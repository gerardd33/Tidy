-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from TidyParser/Par.y
-----------------------------------------------------------------------------

state 27 contains 2 shift/reduce conflicts.
state 46 contains 2 shift/reduce conflicts.
state 79 contains 1 shift/reduce conflicts.
state 82 contains 8 shift/reduce conflicts.
state 83 contains 3 shift/reduce conflicts.
state 84 contains 2 shift/reduce conflicts.
state 171 contains 1 shift/reduce conflicts.
state 180 contains 3 shift/reduce conflicts.
state 181 contains 2 shift/reduce conflicts.
state 182 contains 2 shift/reduce conflicts.
state 183 contains 2 shift/reduce conflicts.
state 269 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Char -> L_charac                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	UpperCaseIdent -> L_UpperCaseIdent                 (4)
	LowerCaseIdent -> L_LowerCaseIdent                 (5)
	Program -> ListClassDecl                           (6)
	ListClassIdent ->                                  (7)
	ListClassIdent -> ClassIdent                       (8)
	ListClassIdent -> ClassIdent ',' ListClassIdent    (9)
	ClassIdent -> UpperCaseIdent                       (10)
	ListClassDecl -> ClassDecl                         (11)
	ListClassDecl -> ClassDecl ListClassDecl           (12)
	ClassDecl -> ClassType 'class' ClassIdent Inheritance ClassBody   (13)
	ClassDecl -> 'abstract' ClassType 'class' ClassIdent Inheritance ClassBody   (14)
	Inheritance ->                                     (15)
	Inheritance -> 'extends' ClassIdent                (16)
	ClassBody ->                                       (17)
	ClassBody -> '{' ValuesSection VariablesSection FunctionsSection ActionsSection '}'   (18)
	ClassType -> 'mutable'                             (19)
	ClassType -> 'immutable'                           (20)
	ClassType -> 'singleton'                           (21)
	ValuesSection ->                                   (22)
	ValuesSection -> 'values:' ValSBody                (23)
	VariablesSection ->                                (24)
	VariablesSection -> 'variables:' VarSBody          (25)
	FunctionsSection ->                                (26)
	FunctionsSection -> 'functions:' FSBody            (27)
	ActionsSection ->                                  (28)
	ActionsSection -> 'actions:' ASBody                (29)
	ValSBody -> ListValueDecl                          (30)
	ValSBody -> '{' ListValueDecl '}'                  (31)
	ValueIdent -> LowerCaseIdent                       (32)
	ValueType -> ClassIdent                            (33)
	ValueType -> ClassIdent '[' ListClassIdent ']'     (34)
	ValueType -> 'get' MethodType                      (35)
	ValueType -> 'do' MethodType                       (36)
	ListValueDecl ->                                   (37)
	ListValueDecl -> ValueDecl                         (38)
	ListValueDecl -> ValueDecl ',' ListValueDecl       (39)
	ValueDecl -> ValueDeclProper                       (40)
	ValueDecl -> 'private' ValueDeclProper             (41)
	ValueDeclProper -> ValueIdent ':' ValueType        (42)
	ValueDeclProper -> ValueIdent ':' ValueType '=' Expr   (43)
	VarSBody -> ListValueDecl                          (44)
	VarSBody -> '{' ListValueDecl '}'                  (45)
	FSBody ->                                          (46)
	FSBody -> '{' ListFunctionDecl '}'                 (47)
	FunctionIdent -> LowerCaseIdent                    (48)
	MethodType -> '(' ListValueDecl ')' '->' ValueType   (49)
	ListFunctionDecl ->                                (50)
	ListFunctionDecl -> FunctionDecl ListFunctionDecl   (51)
	FunctionDecl -> 'override' FunctionIdent ':' MethodType '=' FunctionBody   (52)
	FunctionDecl -> FunctionIdent ':' MethodType '=' FunctionBody   (53)
	FunctionDecl -> 'private' FunctionIdent ':' MethodType '=' FunctionBody   (54)
	FunctionBody -> Expr                               (55)
	FunctionBody -> '{' Expr '}' WithValues            (56)
	WithValues ->                                      (57)
	WithValues -> 'with' ValuesSection                 (58)
	ASBody ->                                          (59)
	ASBody -> '{' ListActionDecl '}'                   (60)
	ListActionDecl ->                                  (61)
	ListActionDecl -> ActionDecl ListActionDecl        (62)
	ActionDecl -> 'override' FunctionIdent ':' MethodType '=' ActionBody   (63)
	ActionDecl -> FunctionIdent ':' MethodType '=' ActionBody   (64)
	ActionDecl -> 'private' FunctionIdent ':' MethodType '=' ActionBody   (65)
	ActionBody -> Expr                                 (66)
	ActionBody -> '{' ListExpr '}'                     (67)
	ListExpr ->                                        (68)
	ListExpr -> Expr ListExpr                          (69)
	Expr -> Expr1                                      (70)
	Expr -> Expr1 BooleanOperator Expr                 (71)
	Expr1 -> Expr2                                     (72)
	Expr1 -> Expr1 RelationalOperator Expr2            (73)
	Expr2 -> Expr3                                     (74)
	Expr2 -> Expr2 '+' Expr3                           (75)
	Expr2 -> Expr2 '-' Expr3                           (76)
	Expr2 -> Expr2 '++' Expr3                          (77)
	Expr3 -> Expr4                                     (78)
	Expr3 -> Expr3 '*' Expr4                           (79)
	Expr3 -> Expr3 '/' Expr4                           (80)
	Expr4 -> Expr5                                     (81)
	Expr4 -> 'not' Expr5                               (82)
	Expr4 -> '-' Expr5                                 (83)
	Expr5 -> '(' Expr ')'                              (84)
	Expr5 -> Literal                                   (85)
	Expr5 -> ValueIdent                                (86)
	Expr5 -> LocalValueDecl                            (87)
	Expr5 -> LambdaFunction                            (88)
	Expr5 -> LambdaAction                              (89)
	Expr5 -> 'local' '.' FunctionCall                  (90)
	Expr5 -> 'local' '#' FunctionCall                  (91)
	Expr5 -> ConstructorCall                           (92)
	Expr5 -> GetExpr                                   (93)
	Expr5 -> DoExpr                                    (94)
	Expr5 -> ImperativeControlFlow                     (95)
	Expr5 -> FunctionalControlFlow                     (96)
	Literal -> Integer                                 (97)
	Literal -> Boolean                                 (98)
	Literal -> Char                                    (99)
	Literal -> String                                  (100)
	Literal -> Void                                    (101)
	Boolean -> 'True'                                  (102)
	Boolean -> 'False'                                 (103)
	Void -> 'Pass'                                     (104)
	LocalValueDecl -> 'value' ValueDecl                (105)
	LambdaFunction -> 'get' '(' ListValueDecl ')' '->' Expr   (106)
	LambdaFunction -> 'get' '(' ListValueDecl ')' '->' '{' Expr '}'   (107)
	LambdaAction -> 'do' '(' ListValueDecl ')' '->' Expr   (108)
	LambdaAction -> 'do' '(' ListValueDecl ')' '->' '{' Expr '}'   (109)
	FunctionCall -> FunctionIdent                      (110)
	FunctionCall -> FunctionIdent '(' ListFunctionArgument ')'   (111)
	ListFunctionArgument ->                            (112)
	ListFunctionArgument -> FunctionArgument           (113)
	ListFunctionArgument -> FunctionArgument ',' ListFunctionArgument   (114)
	FunctionArgument -> Expr                           (115)
	ConstructorCall -> ClassIdent                      (116)
	ConstructorCall -> ClassIdent '(' ListFunctionArgument ')'   (117)
	GetExpr -> ValueIdent '.' FunctionCall             (118)
	GetExpr -> ClassIdent '.' FunctionCall             (119)
	GetExpr -> GetExpr '.' FunctionCall                (120)
	DoExpr -> ValueIdent '#' FunctionCall              (121)
	DoExpr -> ClassIdent '#' FunctionCall              (122)
	DoExpr -> GetExpr '#' FunctionCall                 (123)
	ImperativeControlFlow -> 'while' '(' Expr ')' '{' ListExpr '}'   (124)
	ImperativeControlFlow -> 'for' '(' ValueDecl 'in' Expr ')' '{' ListExpr '}'   (125)
	ImperativeControlFlow -> 'if' '(' Expr ')' '{' ListExpr '}' OptionalElseBranch   (126)
	OptionalElseBranch -> 'else' '{' ListExpr '}'      (127)
	OptionalElseBranch ->                              (128)
	FunctionalControlFlow -> 'if' '(' Expr ')' ThenBranch ElseBranch   (129)
	FunctionalControlFlow -> 'match' Expr '{' ListMatchCase '}'   (130)
	ThenBranch -> 'then' Expr                          (131)
	ThenBranch -> 'then' '{' Expr '}'                  (132)
	ElseBranch -> 'else' Expr                          (133)
	ElseBranch -> 'else' '{' Expr '}'                  (134)
	ListMatchCase ->                                   (135)
	ListMatchCase -> MatchCase ListMatchCase           (136)
	MatchCase -> 'case' Pattern '->' Expr              (137)
	Pattern -> ClassIdent                              (138)
	RelationalOperator -> '<'                          (139)
	RelationalOperator -> '<='                         (140)
	RelationalOperator -> '>'                          (141)
	RelationalOperator -> '>='                         (142)
	RelationalOperator -> '=='                         (143)
	RelationalOperator -> '!='                         (144)
	BooleanOperator -> 'and'                           (145)
	BooleanOperator -> 'or'                            (146)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!='           { PT _ (TS _ 1) }
	'#'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	')'            { PT _ (TS _ 4) }
	'*'            { PT _ (TS _ 5) }
	'+'            { PT _ (TS _ 6) }
	'++'           { PT _ (TS _ 7) }
	','            { PT _ (TS _ 8) }
	'-'            { PT _ (TS _ 9) }
	'->'           { PT _ (TS _ 10) }
	'.'            { PT _ (TS _ 11) }
	'/'            { PT _ (TS _ 12) }
	':'            { PT _ (TS _ 13) }
	'<'            { PT _ (TS _ 14) }
	'<='           { PT _ (TS _ 15) }
	'='            { PT _ (TS _ 16) }
	'=='           { PT _ (TS _ 17) }
	'>'            { PT _ (TS _ 18) }
	'>='           { PT _ (TS _ 19) }
	'False'        { PT _ (TS _ 20) }
	'Pass'         { PT _ (TS _ 21) }
	'True'         { PT _ (TS _ 22) }
	'['            { PT _ (TS _ 23) }
	']'            { PT _ (TS _ 24) }
	'abstract'     { PT _ (TS _ 25) }
	'actions:'     { PT _ (TS _ 26) }
	'and'          { PT _ (TS _ 27) }
	'case'         { PT _ (TS _ 28) }
	'class'        { PT _ (TS _ 29) }
	'do'           { PT _ (TS _ 30) }
	'else'         { PT _ (TS _ 31) }
	'extends'      { PT _ (TS _ 32) }
	'for'          { PT _ (TS _ 33) }
	'functions:'   { PT _ (TS _ 34) }
	'get'          { PT _ (TS _ 35) }
	'if'           { PT _ (TS _ 36) }
	'immutable'    { PT _ (TS _ 37) }
	'in'           { PT _ (TS _ 38) }
	'local'        { PT _ (TS _ 39) }
	'match'        { PT _ (TS _ 40) }
	'mutable'      { PT _ (TS _ 41) }
	'not'          { PT _ (TS _ 42) }
	'or'           { PT _ (TS _ 43) }
	'override'     { PT _ (TS _ 44) }
	'private'      { PT _ (TS _ 45) }
	'singleton'    { PT _ (TS _ 46) }
	'then'         { PT _ (TS _ 47) }
	'value'        { PT _ (TS _ 48) }
	'values:'      { PT _ (TS _ 49) }
	'variables:'   { PT _ (TS _ 50) }
	'while'        { PT _ (TS _ 51) }
	'with'         { PT _ (TS _ 52) }
	'{'            { PT _ (TS _ 53) }
	'}'            { PT _ (TS _ 54) }
	L_charac       { PT _ (TC $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }
	L_UpperCaseIdent{ PT _ (T_UpperCaseIdent $$) }
	L_LowerCaseIdent{ PT _ (T_LowerCaseIdent $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Char            rule  1
	Integer         rule  2
	String          rule  3
	UpperCaseIdent  rule  4
	LowerCaseIdent  rule  5
	Program         rule  6
	ListClassIdent  rules 7, 8, 9
	ClassIdent      rule  10
	ListClassDecl   rules 11, 12
	ClassDecl       rules 13, 14
	Inheritance     rules 15, 16
	ClassBody       rules 17, 18
	ClassType       rules 19, 20, 21
	ValuesSection   rules 22, 23
	VariablesSection rules 24, 25
	FunctionsSection rules 26, 27
	ActionsSection  rules 28, 29
	ValSBody        rules 30, 31
	ValueIdent      rule  32
	ValueType       rules 33, 34, 35, 36
	ListValueDecl   rules 37, 38, 39
	ValueDecl       rules 40, 41
	ValueDeclProper rules 42, 43
	VarSBody        rules 44, 45
	FSBody          rules 46, 47
	FunctionIdent   rule  48
	MethodType      rule  49
	ListFunctionDecl rules 50, 51
	FunctionDecl    rules 52, 53, 54
	FunctionBody    rules 55, 56
	WithValues      rules 57, 58
	ASBody          rules 59, 60
	ListActionDecl  rules 61, 62
	ActionDecl      rules 63, 64, 65
	ActionBody      rules 66, 67
	ListExpr        rules 68, 69
	Expr            rules 70, 71
	Expr1           rules 72, 73
	Expr2           rules 74, 75, 76, 77
	Expr3           rules 78, 79, 80
	Expr4           rules 81, 82, 83
	Expr5           rules 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96
	Literal         rules 97, 98, 99, 100, 101
	Boolean         rules 102, 103
	Void            rule  104
	LocalValueDecl  rule  105
	LambdaFunction  rules 106, 107
	LambdaAction    rules 108, 109
	FunctionCall    rules 110, 111
	ListFunctionArgument rules 112, 113, 114
	FunctionArgument rule  115
	ConstructorCall rules 116, 117
	GetExpr         rules 118, 119, 120
	DoExpr          rules 121, 122, 123
	ImperativeControlFlow rules 124, 125, 126
	OptionalElseBranch rules 127, 128
	FunctionalControlFlow rules 129, 130
	ThenBranch      rules 131, 132
	ElseBranch      rules 133, 134
	ListMatchCase   rules 135, 136
	MatchCase       rule  137
	Pattern         rule  138
	RelationalOperator rules 139, 140, 141, 142, 143, 144
	BooleanOperator rules 145, 146

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'abstract'     shift, and enter state 7
	'immutable'    shift, and enter state 8
	'mutable'      shift, and enter state 9
	'singleton'    shift, and enter state 10

	Program        goto state 3
	ListClassDecl  goto state 4
	ClassDecl      goto state 5
	ClassType      goto state 6

State 1

	Char -> . L_charac                                  (rule 1)

	L_charac       shift, and enter state 2


State 2

	Char -> L_charac .                                  (rule 1)

	'!='           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'/'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'False'        reduce using rule 1
	'Pass'         reduce using rule 1
	'True'         reduce using rule 1
	'actions:'     reduce using rule 1
	'and'          reduce using rule 1
	'case'         reduce using rule 1
	'do'           reduce using rule 1
	'else'         reduce using rule 1
	'for'          reduce using rule 1
	'functions:'   reduce using rule 1
	'get'          reduce using rule 1
	'if'           reduce using rule 1
	'in'           reduce using rule 1
	'local'        reduce using rule 1
	'match'        reduce using rule 1
	'not'          reduce using rule 1
	'or'           reduce using rule 1
	'override'     reduce using rule 1
	'private'      reduce using rule 1
	'value'        reduce using rule 1
	'variables:'   reduce using rule 1
	'while'        reduce using rule 1
	'{'            reduce using rule 1
	'}'            reduce using rule 1
	L_charac       reduce using rule 1
	L_integ        reduce using rule 1
	L_quoted       reduce using rule 1
	L_UpperCaseIdentreduce using rule 1
	L_LowerCaseIdentreduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	Program -> ListClassDecl .                          (rule 6)

	%eof           reduce using rule 6


State 5

	ListClassDecl -> ClassDecl .                        (rule 11)
	ListClassDecl -> ClassDecl . ListClassDecl          (rule 12)

	'abstract'     shift, and enter state 7
	'immutable'    shift, and enter state 8
	'mutable'      shift, and enter state 9
	'singleton'    shift, and enter state 10
	%eof           reduce using rule 11

	ListClassDecl  goto state 13
	ClassDecl      goto state 5
	ClassType      goto state 6

State 6

	ClassDecl -> ClassType . 'class' ClassIdent Inheritance ClassBody    (rule 13)

	'class'        shift, and enter state 12


State 7

	ClassDecl -> 'abstract' . ClassType 'class' ClassIdent Inheritance ClassBody    (rule 14)

	'immutable'    shift, and enter state 8
	'mutable'      shift, and enter state 9
	'singleton'    shift, and enter state 10

	ClassType      goto state 11

State 8

	ClassType -> 'immutable' .                          (rule 20)

	'class'        reduce using rule 20


State 9

	ClassType -> 'mutable' .                            (rule 19)

	'class'        reduce using rule 19


State 10

	ClassType -> 'singleton' .                          (rule 21)

	'class'        reduce using rule 21


State 11

	ClassDecl -> 'abstract' ClassType . 'class' ClassIdent Inheritance ClassBody    (rule 14)

	'class'        shift, and enter state 17


State 12

	ClassDecl -> ClassType 'class' . ClassIdent Inheritance ClassBody    (rule 13)

	L_UpperCaseIdentshift, and enter state 16

	UpperCaseIdent goto state 14
	ClassIdent     goto state 15

State 13

	ListClassDecl -> ClassDecl ListClassDecl .          (rule 12)

	%eof           reduce using rule 12


State 14

	ClassIdent -> UpperCaseIdent .                      (rule 10)

	'!='           reduce using rule 10
	'#'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	'++'           reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	'/'            reduce using rule 10
	'<'            reduce using rule 10
	'<='           reduce using rule 10
	'='            reduce using rule 10
	'=='           reduce using rule 10
	'>'            reduce using rule 10
	'>='           reduce using rule 10
	'False'        reduce using rule 10
	'Pass'         reduce using rule 10
	'True'         reduce using rule 10
	'['            reduce using rule 10
	']'            reduce using rule 10
	'abstract'     reduce using rule 10
	'actions:'     reduce using rule 10
	'and'          reduce using rule 10
	'case'         reduce using rule 10
	'do'           reduce using rule 10
	'else'         reduce using rule 10
	'extends'      reduce using rule 10
	'for'          reduce using rule 10
	'functions:'   reduce using rule 10
	'get'          reduce using rule 10
	'if'           reduce using rule 10
	'immutable'    reduce using rule 10
	'in'           reduce using rule 10
	'local'        reduce using rule 10
	'match'        reduce using rule 10
	'mutable'      reduce using rule 10
	'not'          reduce using rule 10
	'or'           reduce using rule 10
	'override'     reduce using rule 10
	'private'      reduce using rule 10
	'singleton'    reduce using rule 10
	'value'        reduce using rule 10
	'variables:'   reduce using rule 10
	'while'        reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	L_charac       reduce using rule 10
	L_integ        reduce using rule 10
	L_quoted       reduce using rule 10
	L_UpperCaseIdentreduce using rule 10
	L_LowerCaseIdentreduce using rule 10
	%eof           reduce using rule 10


State 15

	ClassDecl -> ClassType 'class' ClassIdent . Inheritance ClassBody    (rule 13)

	'abstract'     reduce using rule 15
	'extends'      shift, and enter state 20
	'immutable'    reduce using rule 15
	'mutable'      reduce using rule 15
	'singleton'    reduce using rule 15
	'{'            reduce using rule 15
	%eof           reduce using rule 15

	Inheritance    goto state 19

State 16

	UpperCaseIdent -> L_UpperCaseIdent .                (rule 4)

	'!='           reduce using rule 4
	'#'            reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'*'            reduce using rule 4
	'+'            reduce using rule 4
	'++'           reduce using rule 4
	','            reduce using rule 4
	'-'            reduce using rule 4
	'->'           reduce using rule 4
	'.'            reduce using rule 4
	'/'            reduce using rule 4
	'<'            reduce using rule 4
	'<='           reduce using rule 4
	'='            reduce using rule 4
	'=='           reduce using rule 4
	'>'            reduce using rule 4
	'>='           reduce using rule 4
	'False'        reduce using rule 4
	'Pass'         reduce using rule 4
	'True'         reduce using rule 4
	'['            reduce using rule 4
	']'            reduce using rule 4
	'abstract'     reduce using rule 4
	'actions:'     reduce using rule 4
	'and'          reduce using rule 4
	'case'         reduce using rule 4
	'do'           reduce using rule 4
	'else'         reduce using rule 4
	'extends'      reduce using rule 4
	'for'          reduce using rule 4
	'functions:'   reduce using rule 4
	'get'          reduce using rule 4
	'if'           reduce using rule 4
	'immutable'    reduce using rule 4
	'in'           reduce using rule 4
	'local'        reduce using rule 4
	'match'        reduce using rule 4
	'mutable'      reduce using rule 4
	'not'          reduce using rule 4
	'or'           reduce using rule 4
	'override'     reduce using rule 4
	'private'      reduce using rule 4
	'singleton'    reduce using rule 4
	'value'        reduce using rule 4
	'variables:'   reduce using rule 4
	'while'        reduce using rule 4
	'{'            reduce using rule 4
	'}'            reduce using rule 4
	L_charac       reduce using rule 4
	L_integ        reduce using rule 4
	L_quoted       reduce using rule 4
	L_UpperCaseIdentreduce using rule 4
	L_LowerCaseIdentreduce using rule 4
	%eof           reduce using rule 4


State 17

	ClassDecl -> 'abstract' ClassType 'class' . ClassIdent Inheritance ClassBody    (rule 14)

	L_UpperCaseIdentshift, and enter state 16

	UpperCaseIdent goto state 14
	ClassIdent     goto state 18

State 18

	ClassDecl -> 'abstract' ClassType 'class' ClassIdent . Inheritance ClassBody    (rule 14)

	'abstract'     reduce using rule 15
	'extends'      shift, and enter state 20
	'immutable'    reduce using rule 15
	'mutable'      reduce using rule 15
	'singleton'    reduce using rule 15
	'{'            reduce using rule 15
	%eof           reduce using rule 15

	Inheritance    goto state 24

State 19

	ClassDecl -> ClassType 'class' ClassIdent Inheritance . ClassBody    (rule 13)

	'abstract'     reduce using rule 17
	'immutable'    reduce using rule 17
	'mutable'      reduce using rule 17
	'singleton'    reduce using rule 17
	'{'            shift, and enter state 23
	%eof           reduce using rule 17

	ClassBody      goto state 22

State 20

	Inheritance -> 'extends' . ClassIdent               (rule 16)

	L_UpperCaseIdentshift, and enter state 16

	UpperCaseIdent goto state 14
	ClassIdent     goto state 21

State 21

	Inheritance -> 'extends' ClassIdent .               (rule 16)

	'abstract'     reduce using rule 16
	'immutable'    reduce using rule 16
	'mutable'      reduce using rule 16
	'singleton'    reduce using rule 16
	'{'            reduce using rule 16
	%eof           reduce using rule 16


State 22

	ClassDecl -> ClassType 'class' ClassIdent Inheritance ClassBody .    (rule 13)

	'abstract'     reduce using rule 13
	'immutable'    reduce using rule 13
	'mutable'      reduce using rule 13
	'singleton'    reduce using rule 13
	%eof           reduce using rule 13


State 23

	ClassBody -> '{' . ValuesSection VariablesSection FunctionsSection ActionsSection '}'    (rule 18)

	'actions:'     reduce using rule 22
	'functions:'   reduce using rule 22
	'values:'      shift, and enter state 27
	'variables:'   reduce using rule 22
	'}'            reduce using rule 22

	ValuesSection  goto state 26

State 24

	ClassDecl -> 'abstract' ClassType 'class' ClassIdent Inheritance . ClassBody    (rule 14)

	'abstract'     reduce using rule 17
	'immutable'    reduce using rule 17
	'mutable'      reduce using rule 17
	'singleton'    reduce using rule 17
	'{'            shift, and enter state 23
	%eof           reduce using rule 17

	ClassBody      goto state 25

State 25

	ClassDecl -> 'abstract' ClassType 'class' ClassIdent Inheritance ClassBody .    (rule 14)

	'abstract'     reduce using rule 14
	'immutable'    reduce using rule 14
	'mutable'      reduce using rule 14
	'singleton'    reduce using rule 14
	%eof           reduce using rule 14


State 26

	ClassBody -> '{' ValuesSection . VariablesSection FunctionsSection ActionsSection '}'    (rule 18)

	'actions:'     reduce using rule 24
	'functions:'   reduce using rule 24
	'variables:'   shift, and enter state 38
	'}'            reduce using rule 24

	VariablesSectiongoto state 37

State 27

	ValuesSection -> 'values:' . ValSBody               (rule 23)

	'actions:'     reduce using rule 37
	'functions:'   reduce using rule 37
	'override'     reduce using rule 37
	'private'      shift, and enter state 34
			(reduce using rule 37)

	'variables:'   reduce using rule 37
	'{'            shift, and enter state 35
	'}'            reduce using rule 37
	L_LowerCaseIdentshift, and enter state 36
			(reduce using rule 37)


	LowerCaseIdent goto state 28
	ValSBody       goto state 29
	ValueIdent     goto state 30
	ListValueDecl  goto state 31
	ValueDecl      goto state 32
	ValueDeclPropergoto state 33

State 28

	ValueIdent -> LowerCaseIdent .                      (rule 32)

	'!='           reduce using rule 32
	'#'            reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'*'            reduce using rule 32
	'+'            reduce using rule 32
	'++'           reduce using rule 32
	','            reduce using rule 32
	'-'            reduce using rule 32
	'.'            reduce using rule 32
	'/'            reduce using rule 32
	':'            reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'=='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'False'        reduce using rule 32
	'Pass'         reduce using rule 32
	'True'         reduce using rule 32
	'actions:'     reduce using rule 32
	'and'          reduce using rule 32
	'case'         reduce using rule 32
	'do'           reduce using rule 32
	'else'         reduce using rule 32
	'for'          reduce using rule 32
	'functions:'   reduce using rule 32
	'get'          reduce using rule 32
	'if'           reduce using rule 32
	'in'           reduce using rule 32
	'local'        reduce using rule 32
	'match'        reduce using rule 32
	'not'          reduce using rule 32
	'or'           reduce using rule 32
	'override'     reduce using rule 32
	'private'      reduce using rule 32
	'value'        reduce using rule 32
	'variables:'   reduce using rule 32
	'while'        reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	L_charac       reduce using rule 32
	L_integ        reduce using rule 32
	L_quoted       reduce using rule 32
	L_UpperCaseIdentreduce using rule 32
	L_LowerCaseIdentreduce using rule 32


State 29

	ValuesSection -> 'values:' ValSBody .               (rule 23)

	'actions:'     reduce using rule 23
	'functions:'   reduce using rule 23
	'override'     reduce using rule 23
	'private'      reduce using rule 23
	'variables:'   reduce using rule 23
	'}'            reduce using rule 23
	L_LowerCaseIdentreduce using rule 23


State 30

	ValueDeclProper -> ValueIdent . ':' ValueType       (rule 42)
	ValueDeclProper -> ValueIdent . ':' ValueType '=' Expr    (rule 43)

	':'            shift, and enter state 47


State 31

	ValSBody -> ListValueDecl .                         (rule 30)

	'actions:'     reduce using rule 30
	'functions:'   reduce using rule 30
	'override'     reduce using rule 30
	'private'      reduce using rule 30
	'variables:'   reduce using rule 30
	'}'            reduce using rule 30
	L_LowerCaseIdentreduce using rule 30


State 32

	ListValueDecl -> ValueDecl .                        (rule 38)
	ListValueDecl -> ValueDecl . ',' ListValueDecl      (rule 39)

	')'            reduce using rule 38
	','            shift, and enter state 46
	'actions:'     reduce using rule 38
	'functions:'   reduce using rule 38
	'override'     reduce using rule 38
	'private'      reduce using rule 38
	'variables:'   reduce using rule 38
	'}'            reduce using rule 38
	L_LowerCaseIdentreduce using rule 38


State 33

	ValueDecl -> ValueDeclProper .                      (rule 40)

	'!='           reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'*'            reduce using rule 40
	'+'            reduce using rule 40
	'++'           reduce using rule 40
	','            reduce using rule 40
	'-'            reduce using rule 40
	'/'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'False'        reduce using rule 40
	'Pass'         reduce using rule 40
	'True'         reduce using rule 40
	'actions:'     reduce using rule 40
	'and'          reduce using rule 40
	'case'         reduce using rule 40
	'do'           reduce using rule 40
	'else'         reduce using rule 40
	'for'          reduce using rule 40
	'functions:'   reduce using rule 40
	'get'          reduce using rule 40
	'if'           reduce using rule 40
	'in'           reduce using rule 40
	'local'        reduce using rule 40
	'match'        reduce using rule 40
	'not'          reduce using rule 40
	'or'           reduce using rule 40
	'override'     reduce using rule 40
	'private'      reduce using rule 40
	'value'        reduce using rule 40
	'variables:'   reduce using rule 40
	'while'        reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	L_charac       reduce using rule 40
	L_integ        reduce using rule 40
	L_quoted       reduce using rule 40
	L_UpperCaseIdentreduce using rule 40
	L_LowerCaseIdentreduce using rule 40


State 34

	ValueDecl -> 'private' . ValueDeclProper            (rule 41)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ValueDeclPropergoto state 45

State 35

	ValSBody -> '{' . ListValueDecl '}'                 (rule 31)

	'private'      shift, and enter state 34
	'}'            reduce using rule 37
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ListValueDecl  goto state 44
	ValueDecl      goto state 32
	ValueDeclPropergoto state 33

State 36

	LowerCaseIdent -> L_LowerCaseIdent .                (rule 5)

	'!='           reduce using rule 5
	'#'            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	'++'           reduce using rule 5
	','            reduce using rule 5
	'-'            reduce using rule 5
	'.'            reduce using rule 5
	'/'            reduce using rule 5
	':'            reduce using rule 5
	'<'            reduce using rule 5
	'<='           reduce using rule 5
	'=='           reduce using rule 5
	'>'            reduce using rule 5
	'>='           reduce using rule 5
	'False'        reduce using rule 5
	'Pass'         reduce using rule 5
	'True'         reduce using rule 5
	'actions:'     reduce using rule 5
	'and'          reduce using rule 5
	'case'         reduce using rule 5
	'do'           reduce using rule 5
	'else'         reduce using rule 5
	'for'          reduce using rule 5
	'functions:'   reduce using rule 5
	'get'          reduce using rule 5
	'if'           reduce using rule 5
	'in'           reduce using rule 5
	'local'        reduce using rule 5
	'match'        reduce using rule 5
	'not'          reduce using rule 5
	'or'           reduce using rule 5
	'override'     reduce using rule 5
	'private'      reduce using rule 5
	'value'        reduce using rule 5
	'variables:'   reduce using rule 5
	'while'        reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	L_charac       reduce using rule 5
	L_integ        reduce using rule 5
	L_quoted       reduce using rule 5
	L_UpperCaseIdentreduce using rule 5
	L_LowerCaseIdentreduce using rule 5


State 37

	ClassBody -> '{' ValuesSection VariablesSection . FunctionsSection ActionsSection '}'    (rule 18)

	'actions:'     reduce using rule 26
	'functions:'   shift, and enter state 43
	'}'            reduce using rule 26

	FunctionsSectiongoto state 42

State 38

	VariablesSection -> 'variables:' . VarSBody         (rule 25)

	'actions:'     reduce using rule 37
	'functions:'   reduce using rule 37
	'private'      shift, and enter state 34
	'{'            shift, and enter state 41
	'}'            reduce using rule 37
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ListValueDecl  goto state 39
	ValueDecl      goto state 32
	ValueDeclPropergoto state 33
	VarSBody       goto state 40

State 39

	VarSBody -> ListValueDecl .                         (rule 44)

	'actions:'     reduce using rule 44
	'functions:'   reduce using rule 44
	'}'            reduce using rule 44


State 40

	VariablesSection -> 'variables:' VarSBody .         (rule 25)

	'actions:'     reduce using rule 25
	'functions:'   reduce using rule 25
	'}'            reduce using rule 25


State 41

	VarSBody -> '{' . ListValueDecl '}'                 (rule 45)

	'private'      shift, and enter state 34
	'}'            reduce using rule 37
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ListValueDecl  goto state 58
	ValueDecl      goto state 32
	ValueDeclPropergoto state 33

State 42

	ClassBody -> '{' ValuesSection VariablesSection FunctionsSection . ActionsSection '}'    (rule 18)

	'actions:'     shift, and enter state 57
	'}'            reduce using rule 28

	ActionsSection goto state 56

State 43

	FunctionsSection -> 'functions:' . FSBody           (rule 27)

	'actions:'     reduce using rule 46
	'{'            shift, and enter state 55
	'}'            reduce using rule 46

	FSBody         goto state 54

State 44

	ValSBody -> '{' ListValueDecl . '}'                 (rule 31)

	'}'            shift, and enter state 53


State 45

	ValueDecl -> 'private' ValueDeclProper .            (rule 41)

	'!='           reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'*'            reduce using rule 41
	'+'            reduce using rule 41
	'++'           reduce using rule 41
	','            reduce using rule 41
	'-'            reduce using rule 41
	'/'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'=='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	'False'        reduce using rule 41
	'Pass'         reduce using rule 41
	'True'         reduce using rule 41
	'actions:'     reduce using rule 41
	'and'          reduce using rule 41
	'case'         reduce using rule 41
	'do'           reduce using rule 41
	'else'         reduce using rule 41
	'for'          reduce using rule 41
	'functions:'   reduce using rule 41
	'get'          reduce using rule 41
	'if'           reduce using rule 41
	'in'           reduce using rule 41
	'local'        reduce using rule 41
	'match'        reduce using rule 41
	'not'          reduce using rule 41
	'or'           reduce using rule 41
	'override'     reduce using rule 41
	'private'      reduce using rule 41
	'value'        reduce using rule 41
	'variables:'   reduce using rule 41
	'while'        reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	L_charac       reduce using rule 41
	L_integ        reduce using rule 41
	L_quoted       reduce using rule 41
	L_UpperCaseIdentreduce using rule 41
	L_LowerCaseIdentreduce using rule 41


State 46

	ListValueDecl -> ValueDecl ',' . ListValueDecl      (rule 39)

	')'            reduce using rule 37
	'actions:'     reduce using rule 37
	'functions:'   reduce using rule 37
	'override'     reduce using rule 37
	'private'      shift, and enter state 34
			(reduce using rule 37)

	'variables:'   reduce using rule 37
	'}'            reduce using rule 37
	L_LowerCaseIdentshift, and enter state 36
			(reduce using rule 37)


	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ListValueDecl  goto state 52
	ValueDecl      goto state 32
	ValueDeclPropergoto state 33

State 47

	ValueDeclProper -> ValueIdent ':' . ValueType       (rule 42)
	ValueDeclProper -> ValueIdent ':' . ValueType '=' Expr    (rule 43)

	'do'           shift, and enter state 50
	'get'          shift, and enter state 51
	L_UpperCaseIdentshift, and enter state 16

	UpperCaseIdent goto state 14
	ClassIdent     goto state 48
	ValueType      goto state 49

State 48

	ValueType -> ClassIdent .                           (rule 33)
	ValueType -> ClassIdent . '[' ListClassIdent ']'    (rule 34)

	'!='           reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'*'            reduce using rule 33
	'+'            reduce using rule 33
	'++'           reduce using rule 33
	','            reduce using rule 33
	'-'            reduce using rule 33
	'/'            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'='            reduce using rule 33
	'=='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'False'        reduce using rule 33
	'Pass'         reduce using rule 33
	'True'         reduce using rule 33
	'['            shift, and enter state 73
	'actions:'     reduce using rule 33
	'and'          reduce using rule 33
	'case'         reduce using rule 33
	'do'           reduce using rule 33
	'else'         reduce using rule 33
	'for'          reduce using rule 33
	'functions:'   reduce using rule 33
	'get'          reduce using rule 33
	'if'           reduce using rule 33
	'in'           reduce using rule 33
	'local'        reduce using rule 33
	'match'        reduce using rule 33
	'not'          reduce using rule 33
	'or'           reduce using rule 33
	'override'     reduce using rule 33
	'private'      reduce using rule 33
	'value'        reduce using rule 33
	'variables:'   reduce using rule 33
	'while'        reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	L_charac       reduce using rule 33
	L_integ        reduce using rule 33
	L_quoted       reduce using rule 33
	L_UpperCaseIdentreduce using rule 33
	L_LowerCaseIdentreduce using rule 33


State 49

	ValueDeclProper -> ValueIdent ':' ValueType .       (rule 42)
	ValueDeclProper -> ValueIdent ':' ValueType . '=' Expr    (rule 43)

	'!='           reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	'*'            reduce using rule 42
	'+'            reduce using rule 42
	'++'           reduce using rule 42
	','            reduce using rule 42
	'-'            reduce using rule 42
	'/'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'='            shift, and enter state 72
	'=='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'False'        reduce using rule 42
	'Pass'         reduce using rule 42
	'True'         reduce using rule 42
	'actions:'     reduce using rule 42
	'and'          reduce using rule 42
	'case'         reduce using rule 42
	'do'           reduce using rule 42
	'else'         reduce using rule 42
	'for'          reduce using rule 42
	'functions:'   reduce using rule 42
	'get'          reduce using rule 42
	'if'           reduce using rule 42
	'in'           reduce using rule 42
	'local'        reduce using rule 42
	'match'        reduce using rule 42
	'not'          reduce using rule 42
	'or'           reduce using rule 42
	'override'     reduce using rule 42
	'private'      reduce using rule 42
	'value'        reduce using rule 42
	'variables:'   reduce using rule 42
	'while'        reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	L_charac       reduce using rule 42
	L_integ        reduce using rule 42
	L_quoted       reduce using rule 42
	L_UpperCaseIdentreduce using rule 42
	L_LowerCaseIdentreduce using rule 42


State 50

	ValueType -> 'do' . MethodType                      (rule 36)

	'('            shift, and enter state 70

	MethodType     goto state 71

State 51

	ValueType -> 'get' . MethodType                     (rule 35)

	'('            shift, and enter state 70

	MethodType     goto state 69

State 52

	ListValueDecl -> ValueDecl ',' ListValueDecl .      (rule 39)

	')'            reduce using rule 39
	'actions:'     reduce using rule 39
	'functions:'   reduce using rule 39
	'override'     reduce using rule 39
	'private'      reduce using rule 39
	'variables:'   reduce using rule 39
	'}'            reduce using rule 39
	L_LowerCaseIdentreduce using rule 39


State 53

	ValSBody -> '{' ListValueDecl '}' .                 (rule 31)

	'actions:'     reduce using rule 31
	'functions:'   reduce using rule 31
	'override'     reduce using rule 31
	'private'      reduce using rule 31
	'variables:'   reduce using rule 31
	'}'            reduce using rule 31
	L_LowerCaseIdentreduce using rule 31


State 54

	FunctionsSection -> 'functions:' FSBody .           (rule 27)

	'actions:'     reduce using rule 27
	'}'            reduce using rule 27


State 55

	FSBody -> '{' . ListFunctionDecl '}'                (rule 47)

	'override'     shift, and enter state 67
	'private'      shift, and enter state 68
	'}'            reduce using rule 50
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 64
	ListFunctionDeclgoto state 65
	FunctionDecl   goto state 66

State 56

	ClassBody -> '{' ValuesSection VariablesSection FunctionsSection ActionsSection . '}'    (rule 18)

	'}'            shift, and enter state 62


State 57

	ActionsSection -> 'actions:' . ASBody               (rule 29)

	'{'            shift, and enter state 61
	'}'            reduce using rule 59

	ASBody         goto state 60

State 58

	VarSBody -> '{' ListValueDecl . '}'                 (rule 45)

	'}'            shift, and enter state 59


State 59

	VarSBody -> '{' ListValueDecl '}' .                 (rule 45)

	'actions:'     reduce using rule 45
	'functions:'   reduce using rule 45
	'}'            reduce using rule 45


State 60

	ActionsSection -> 'actions:' ASBody .               (rule 29)

	'}'            reduce using rule 29


State 61

	ASBody -> '{' . ListActionDecl '}'                  (rule 60)

	'override'     shift, and enter state 123
	'private'      shift, and enter state 124
	'}'            reduce using rule 61
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 120
	ListActionDecl goto state 121
	ActionDecl     goto state 122

State 62

	ClassBody -> '{' ValuesSection VariablesSection FunctionsSection ActionsSection '}' .    (rule 18)

	'abstract'     reduce using rule 18
	'immutable'    reduce using rule 18
	'mutable'      reduce using rule 18
	'singleton'    reduce using rule 18
	%eof           reduce using rule 18


State 63

	FunctionIdent -> LowerCaseIdent .                   (rule 48)

	'!='           reduce using rule 48
	'#'            reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'*'            reduce using rule 48
	'+'            reduce using rule 48
	'++'           reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'.'            reduce using rule 48
	'/'            reduce using rule 48
	':'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'False'        reduce using rule 48
	'Pass'         reduce using rule 48
	'True'         reduce using rule 48
	'actions:'     reduce using rule 48
	'and'          reduce using rule 48
	'case'         reduce using rule 48
	'do'           reduce using rule 48
	'else'         reduce using rule 48
	'for'          reduce using rule 48
	'functions:'   reduce using rule 48
	'get'          reduce using rule 48
	'if'           reduce using rule 48
	'in'           reduce using rule 48
	'local'        reduce using rule 48
	'match'        reduce using rule 48
	'not'          reduce using rule 48
	'or'           reduce using rule 48
	'override'     reduce using rule 48
	'private'      reduce using rule 48
	'value'        reduce using rule 48
	'variables:'   reduce using rule 48
	'while'        reduce using rule 48
	'{'            reduce using rule 48
	'}'            reduce using rule 48
	L_charac       reduce using rule 48
	L_integ        reduce using rule 48
	L_quoted       reduce using rule 48
	L_UpperCaseIdentreduce using rule 48
	L_LowerCaseIdentreduce using rule 48


State 64

	FunctionDecl -> FunctionIdent . ':' MethodType '=' FunctionBody    (rule 53)

	':'            shift, and enter state 119


State 65

	FSBody -> '{' ListFunctionDecl . '}'                (rule 47)

	'}'            shift, and enter state 118


State 66

	ListFunctionDecl -> FunctionDecl . ListFunctionDecl    (rule 51)

	'override'     shift, and enter state 67
	'private'      shift, and enter state 68
	'}'            reduce using rule 50
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 64
	ListFunctionDeclgoto state 117
	FunctionDecl   goto state 66

State 67

	FunctionDecl -> 'override' . FunctionIdent ':' MethodType '=' FunctionBody    (rule 52)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 116

State 68

	FunctionDecl -> 'private' . FunctionIdent ':' MethodType '=' FunctionBody    (rule 54)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 115

State 69

	ValueType -> 'get' MethodType .                     (rule 35)

	'!='           reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'*'            reduce using rule 35
	'+'            reduce using rule 35
	'++'           reduce using rule 35
	','            reduce using rule 35
	'-'            reduce using rule 35
	'/'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'='            reduce using rule 35
	'=='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'False'        reduce using rule 35
	'Pass'         reduce using rule 35
	'True'         reduce using rule 35
	'actions:'     reduce using rule 35
	'and'          reduce using rule 35
	'case'         reduce using rule 35
	'do'           reduce using rule 35
	'else'         reduce using rule 35
	'for'          reduce using rule 35
	'functions:'   reduce using rule 35
	'get'          reduce using rule 35
	'if'           reduce using rule 35
	'in'           reduce using rule 35
	'local'        reduce using rule 35
	'match'        reduce using rule 35
	'not'          reduce using rule 35
	'or'           reduce using rule 35
	'override'     reduce using rule 35
	'private'      reduce using rule 35
	'value'        reduce using rule 35
	'variables:'   reduce using rule 35
	'while'        reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	L_charac       reduce using rule 35
	L_integ        reduce using rule 35
	L_quoted       reduce using rule 35
	L_UpperCaseIdentreduce using rule 35
	L_LowerCaseIdentreduce using rule 35


State 70

	MethodType -> '(' . ListValueDecl ')' '->' ValueType    (rule 49)

	')'            reduce using rule 37
	'private'      shift, and enter state 34
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ListValueDecl  goto state 114
	ValueDecl      goto state 32
	ValueDeclPropergoto state 33

State 71

	ValueType -> 'do' MethodType .                      (rule 36)

	'!='           reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'*'            reduce using rule 36
	'+'            reduce using rule 36
	'++'           reduce using rule 36
	','            reduce using rule 36
	'-'            reduce using rule 36
	'/'            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'='            reduce using rule 36
	'=='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'False'        reduce using rule 36
	'Pass'         reduce using rule 36
	'True'         reduce using rule 36
	'actions:'     reduce using rule 36
	'and'          reduce using rule 36
	'case'         reduce using rule 36
	'do'           reduce using rule 36
	'else'         reduce using rule 36
	'for'          reduce using rule 36
	'functions:'   reduce using rule 36
	'get'          reduce using rule 36
	'if'           reduce using rule 36
	'in'           reduce using rule 36
	'local'        reduce using rule 36
	'match'        reduce using rule 36
	'not'          reduce using rule 36
	'or'           reduce using rule 36
	'override'     reduce using rule 36
	'private'      reduce using rule 36
	'value'        reduce using rule 36
	'variables:'   reduce using rule 36
	'while'        reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	L_charac       reduce using rule 36
	L_integ        reduce using rule 36
	L_quoted       reduce using rule 36
	L_UpperCaseIdentreduce using rule 36
	L_LowerCaseIdentreduce using rule 36


State 72

	ValueDeclProper -> ValueIdent ':' ValueType '=' . Expr    (rule 43)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 81
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 73

	ValueType -> ClassIdent '[' . ListClassIdent ']'    (rule 34)

	']'            reduce using rule 7
	L_UpperCaseIdentshift, and enter state 16

	UpperCaseIdent goto state 14
	ListClassIdent goto state 74
	ClassIdent     goto state 75

State 74

	ValueType -> ClassIdent '[' ListClassIdent . ']'    (rule 34)

	']'            shift, and enter state 169


State 75

	ListClassIdent -> ClassIdent .                      (rule 8)
	ListClassIdent -> ClassIdent . ',' ListClassIdent    (rule 9)

	','            shift, and enter state 168
	']'            reduce using rule 8


State 76

	Literal -> Char .                                   (rule 99)

	'!='           reduce using rule 99
	'('            reduce using rule 99
	')'            reduce using rule 99
	'*'            reduce using rule 99
	'+'            reduce using rule 99
	'++'           reduce using rule 99
	','            reduce using rule 99
	'-'            reduce using rule 99
	'/'            reduce using rule 99
	'<'            reduce using rule 99
	'<='           reduce using rule 99
	'=='           reduce using rule 99
	'>'            reduce using rule 99
	'>='           reduce using rule 99
	'False'        reduce using rule 99
	'Pass'         reduce using rule 99
	'True'         reduce using rule 99
	'actions:'     reduce using rule 99
	'and'          reduce using rule 99
	'case'         reduce using rule 99
	'do'           reduce using rule 99
	'else'         reduce using rule 99
	'for'          reduce using rule 99
	'functions:'   reduce using rule 99
	'get'          reduce using rule 99
	'if'           reduce using rule 99
	'in'           reduce using rule 99
	'local'        reduce using rule 99
	'match'        reduce using rule 99
	'not'          reduce using rule 99
	'or'           reduce using rule 99
	'override'     reduce using rule 99
	'private'      reduce using rule 99
	'value'        reduce using rule 99
	'variables:'   reduce using rule 99
	'while'        reduce using rule 99
	'{'            reduce using rule 99
	'}'            reduce using rule 99
	L_charac       reduce using rule 99
	L_integ        reduce using rule 99
	L_quoted       reduce using rule 99
	L_UpperCaseIdentreduce using rule 99
	L_LowerCaseIdentreduce using rule 99


State 77

	Literal -> Integer .                                (rule 97)

	'!='           reduce using rule 97
	'('            reduce using rule 97
	')'            reduce using rule 97
	'*'            reduce using rule 97
	'+'            reduce using rule 97
	'++'           reduce using rule 97
	','            reduce using rule 97
	'-'            reduce using rule 97
	'/'            reduce using rule 97
	'<'            reduce using rule 97
	'<='           reduce using rule 97
	'=='           reduce using rule 97
	'>'            reduce using rule 97
	'>='           reduce using rule 97
	'False'        reduce using rule 97
	'Pass'         reduce using rule 97
	'True'         reduce using rule 97
	'actions:'     reduce using rule 97
	'and'          reduce using rule 97
	'case'         reduce using rule 97
	'do'           reduce using rule 97
	'else'         reduce using rule 97
	'for'          reduce using rule 97
	'functions:'   reduce using rule 97
	'get'          reduce using rule 97
	'if'           reduce using rule 97
	'in'           reduce using rule 97
	'local'        reduce using rule 97
	'match'        reduce using rule 97
	'not'          reduce using rule 97
	'or'           reduce using rule 97
	'override'     reduce using rule 97
	'private'      reduce using rule 97
	'value'        reduce using rule 97
	'variables:'   reduce using rule 97
	'while'        reduce using rule 97
	'{'            reduce using rule 97
	'}'            reduce using rule 97
	L_charac       reduce using rule 97
	L_integ        reduce using rule 97
	L_quoted       reduce using rule 97
	L_UpperCaseIdentreduce using rule 97
	L_LowerCaseIdentreduce using rule 97


State 78

	Literal -> String .                                 (rule 100)

	'!='           reduce using rule 100
	'('            reduce using rule 100
	')'            reduce using rule 100
	'*'            reduce using rule 100
	'+'            reduce using rule 100
	'++'           reduce using rule 100
	','            reduce using rule 100
	'-'            reduce using rule 100
	'/'            reduce using rule 100
	'<'            reduce using rule 100
	'<='           reduce using rule 100
	'=='           reduce using rule 100
	'>'            reduce using rule 100
	'>='           reduce using rule 100
	'False'        reduce using rule 100
	'Pass'         reduce using rule 100
	'True'         reduce using rule 100
	'actions:'     reduce using rule 100
	'and'          reduce using rule 100
	'case'         reduce using rule 100
	'do'           reduce using rule 100
	'else'         reduce using rule 100
	'for'          reduce using rule 100
	'functions:'   reduce using rule 100
	'get'          reduce using rule 100
	'if'           reduce using rule 100
	'in'           reduce using rule 100
	'local'        reduce using rule 100
	'match'        reduce using rule 100
	'not'          reduce using rule 100
	'or'           reduce using rule 100
	'override'     reduce using rule 100
	'private'      reduce using rule 100
	'value'        reduce using rule 100
	'variables:'   reduce using rule 100
	'while'        reduce using rule 100
	'{'            reduce using rule 100
	'}'            reduce using rule 100
	L_charac       reduce using rule 100
	L_integ        reduce using rule 100
	L_quoted       reduce using rule 100
	L_UpperCaseIdentreduce using rule 100
	L_LowerCaseIdentreduce using rule 100


State 79

	ConstructorCall -> ClassIdent .                     (rule 116)
	ConstructorCall -> ClassIdent . '(' ListFunctionArgument ')'    (rule 117)
	GetExpr -> ClassIdent . '.' FunctionCall            (rule 119)
	DoExpr -> ClassIdent . '#' FunctionCall             (rule 122)

	'!='           reduce using rule 116
	'#'            shift, and enter state 165
	'('            shift, and enter state 166
			(reduce using rule 116)

	')'            reduce using rule 116
	'*'            reduce using rule 116
	'+'            reduce using rule 116
	'++'           reduce using rule 116
	','            reduce using rule 116
	'-'            reduce using rule 116
	'.'            shift, and enter state 167
	'/'            reduce using rule 116
	'<'            reduce using rule 116
	'<='           reduce using rule 116
	'=='           reduce using rule 116
	'>'            reduce using rule 116
	'>='           reduce using rule 116
	'False'        reduce using rule 116
	'Pass'         reduce using rule 116
	'True'         reduce using rule 116
	'actions:'     reduce using rule 116
	'and'          reduce using rule 116
	'case'         reduce using rule 116
	'do'           reduce using rule 116
	'else'         reduce using rule 116
	'for'          reduce using rule 116
	'functions:'   reduce using rule 116
	'get'          reduce using rule 116
	'if'           reduce using rule 116
	'in'           reduce using rule 116
	'local'        reduce using rule 116
	'match'        reduce using rule 116
	'not'          reduce using rule 116
	'or'           reduce using rule 116
	'override'     reduce using rule 116
	'private'      reduce using rule 116
	'value'        reduce using rule 116
	'variables:'   reduce using rule 116
	'while'        reduce using rule 116
	'{'            reduce using rule 116
	'}'            reduce using rule 116
	L_charac       reduce using rule 116
	L_integ        reduce using rule 116
	L_quoted       reduce using rule 116
	L_UpperCaseIdentreduce using rule 116
	L_LowerCaseIdentreduce using rule 116


State 80

	Expr5 -> ValueIdent .                               (rule 86)
	GetExpr -> ValueIdent . '.' FunctionCall            (rule 118)
	DoExpr -> ValueIdent . '#' FunctionCall             (rule 121)

	'!='           reduce using rule 86
	'#'            shift, and enter state 163
	'('            reduce using rule 86
	')'            reduce using rule 86
	'*'            reduce using rule 86
	'+'            reduce using rule 86
	'++'           reduce using rule 86
	','            reduce using rule 86
	'-'            reduce using rule 86
	'.'            shift, and enter state 164
	'/'            reduce using rule 86
	'<'            reduce using rule 86
	'<='           reduce using rule 86
	'=='           reduce using rule 86
	'>'            reduce using rule 86
	'>='           reduce using rule 86
	'False'        reduce using rule 86
	'Pass'         reduce using rule 86
	'True'         reduce using rule 86
	'actions:'     reduce using rule 86
	'and'          reduce using rule 86
	'case'         reduce using rule 86
	'do'           reduce using rule 86
	'else'         reduce using rule 86
	'for'          reduce using rule 86
	'functions:'   reduce using rule 86
	'get'          reduce using rule 86
	'if'           reduce using rule 86
	'in'           reduce using rule 86
	'local'        reduce using rule 86
	'match'        reduce using rule 86
	'not'          reduce using rule 86
	'or'           reduce using rule 86
	'override'     reduce using rule 86
	'private'      reduce using rule 86
	'value'        reduce using rule 86
	'variables:'   reduce using rule 86
	'while'        reduce using rule 86
	'{'            reduce using rule 86
	'}'            reduce using rule 86
	L_charac       reduce using rule 86
	L_integ        reduce using rule 86
	L_quoted       reduce using rule 86
	L_UpperCaseIdentreduce using rule 86
	L_LowerCaseIdentreduce using rule 86


State 81

	ValueDeclProper -> ValueIdent ':' ValueType '=' Expr .    (rule 43)

	'!='           reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	'++'           reduce using rule 43
	','            reduce using rule 43
	'-'            reduce using rule 43
	'/'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'False'        reduce using rule 43
	'Pass'         reduce using rule 43
	'True'         reduce using rule 43
	'actions:'     reduce using rule 43
	'and'          reduce using rule 43
	'case'         reduce using rule 43
	'do'           reduce using rule 43
	'else'         reduce using rule 43
	'for'          reduce using rule 43
	'functions:'   reduce using rule 43
	'get'          reduce using rule 43
	'if'           reduce using rule 43
	'in'           reduce using rule 43
	'local'        reduce using rule 43
	'match'        reduce using rule 43
	'not'          reduce using rule 43
	'or'           reduce using rule 43
	'override'     reduce using rule 43
	'private'      reduce using rule 43
	'value'        reduce using rule 43
	'variables:'   reduce using rule 43
	'while'        reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	L_charac       reduce using rule 43
	L_integ        reduce using rule 43
	L_quoted       reduce using rule 43
	L_UpperCaseIdentreduce using rule 43
	L_LowerCaseIdentreduce using rule 43


State 82

	Expr -> Expr1 .                                     (rule 70)
	Expr -> Expr1 . BooleanOperator Expr                (rule 71)
	Expr1 -> Expr1 . RelationalOperator Expr2           (rule 73)

	'!='           shift, and enter state 155
			(reduce using rule 70)

	'('            reduce using rule 70
	')'            reduce using rule 70
	'*'            reduce using rule 70
	'+'            reduce using rule 70
	'++'           reduce using rule 70
	','            reduce using rule 70
	'-'            reduce using rule 70
	'/'            reduce using rule 70
	'<'            shift, and enter state 156
			(reduce using rule 70)

	'<='           shift, and enter state 157
			(reduce using rule 70)

	'=='           shift, and enter state 158
			(reduce using rule 70)

	'>'            shift, and enter state 159
			(reduce using rule 70)

	'>='           shift, and enter state 160
			(reduce using rule 70)

	'False'        reduce using rule 70
	'Pass'         reduce using rule 70
	'True'         reduce using rule 70
	'actions:'     reduce using rule 70
	'and'          shift, and enter state 161
			(reduce using rule 70)

	'case'         reduce using rule 70
	'do'           reduce using rule 70
	'else'         reduce using rule 70
	'for'          reduce using rule 70
	'functions:'   reduce using rule 70
	'get'          reduce using rule 70
	'if'           reduce using rule 70
	'in'           reduce using rule 70
	'local'        reduce using rule 70
	'match'        reduce using rule 70
	'not'          reduce using rule 70
	'or'           shift, and enter state 162
			(reduce using rule 70)

	'override'     reduce using rule 70
	'private'      reduce using rule 70
	'value'        reduce using rule 70
	'variables:'   reduce using rule 70
	'while'        reduce using rule 70
	'{'            reduce using rule 70
	'}'            reduce using rule 70
	L_charac       reduce using rule 70
	L_integ        reduce using rule 70
	L_quoted       reduce using rule 70
	L_UpperCaseIdentreduce using rule 70
	L_LowerCaseIdentreduce using rule 70

	RelationalOperatorgoto state 153
	BooleanOperatorgoto state 154

State 83

	Expr1 -> Expr2 .                                    (rule 72)
	Expr2 -> Expr2 . '+' Expr3                          (rule 75)
	Expr2 -> Expr2 . '-' Expr3                          (rule 76)
	Expr2 -> Expr2 . '++' Expr3                         (rule 77)

	'!='           reduce using rule 72
	'('            reduce using rule 72
	')'            reduce using rule 72
	'*'            reduce using rule 72
	'+'            shift, and enter state 150
			(reduce using rule 72)

	'++'           shift, and enter state 151
			(reduce using rule 72)

	','            reduce using rule 72
	'-'            shift, and enter state 152
			(reduce using rule 72)

	'/'            reduce using rule 72
	'<'            reduce using rule 72
	'<='           reduce using rule 72
	'=='           reduce using rule 72
	'>'            reduce using rule 72
	'>='           reduce using rule 72
	'False'        reduce using rule 72
	'Pass'         reduce using rule 72
	'True'         reduce using rule 72
	'actions:'     reduce using rule 72
	'and'          reduce using rule 72
	'case'         reduce using rule 72
	'do'           reduce using rule 72
	'else'         reduce using rule 72
	'for'          reduce using rule 72
	'functions:'   reduce using rule 72
	'get'          reduce using rule 72
	'if'           reduce using rule 72
	'in'           reduce using rule 72
	'local'        reduce using rule 72
	'match'        reduce using rule 72
	'not'          reduce using rule 72
	'or'           reduce using rule 72
	'override'     reduce using rule 72
	'private'      reduce using rule 72
	'value'        reduce using rule 72
	'variables:'   reduce using rule 72
	'while'        reduce using rule 72
	'{'            reduce using rule 72
	'}'            reduce using rule 72
	L_charac       reduce using rule 72
	L_integ        reduce using rule 72
	L_quoted       reduce using rule 72
	L_UpperCaseIdentreduce using rule 72
	L_LowerCaseIdentreduce using rule 72


State 84

	Expr2 -> Expr3 .                                    (rule 74)
	Expr3 -> Expr3 . '*' Expr4                          (rule 79)
	Expr3 -> Expr3 . '/' Expr4                          (rule 80)

	'!='           reduce using rule 74
	'('            reduce using rule 74
	')'            reduce using rule 74
	'*'            shift, and enter state 148
			(reduce using rule 74)

	'+'            reduce using rule 74
	'++'           reduce using rule 74
	','            reduce using rule 74
	'-'            reduce using rule 74
	'/'            shift, and enter state 149
			(reduce using rule 74)

	'<'            reduce using rule 74
	'<='           reduce using rule 74
	'=='           reduce using rule 74
	'>'            reduce using rule 74
	'>='           reduce using rule 74
	'False'        reduce using rule 74
	'Pass'         reduce using rule 74
	'True'         reduce using rule 74
	'actions:'     reduce using rule 74
	'and'          reduce using rule 74
	'case'         reduce using rule 74
	'do'           reduce using rule 74
	'else'         reduce using rule 74
	'for'          reduce using rule 74
	'functions:'   reduce using rule 74
	'get'          reduce using rule 74
	'if'           reduce using rule 74
	'in'           reduce using rule 74
	'local'        reduce using rule 74
	'match'        reduce using rule 74
	'not'          reduce using rule 74
	'or'           reduce using rule 74
	'override'     reduce using rule 74
	'private'      reduce using rule 74
	'value'        reduce using rule 74
	'variables:'   reduce using rule 74
	'while'        reduce using rule 74
	'{'            reduce using rule 74
	'}'            reduce using rule 74
	L_charac       reduce using rule 74
	L_integ        reduce using rule 74
	L_quoted       reduce using rule 74
	L_UpperCaseIdentreduce using rule 74
	L_LowerCaseIdentreduce using rule 74


State 85

	Expr3 -> Expr4 .                                    (rule 78)

	'!='           reduce using rule 78
	'('            reduce using rule 78
	')'            reduce using rule 78
	'*'            reduce using rule 78
	'+'            reduce using rule 78
	'++'           reduce using rule 78
	','            reduce using rule 78
	'-'            reduce using rule 78
	'/'            reduce using rule 78
	'<'            reduce using rule 78
	'<='           reduce using rule 78
	'=='           reduce using rule 78
	'>'            reduce using rule 78
	'>='           reduce using rule 78
	'False'        reduce using rule 78
	'Pass'         reduce using rule 78
	'True'         reduce using rule 78
	'actions:'     reduce using rule 78
	'and'          reduce using rule 78
	'case'         reduce using rule 78
	'do'           reduce using rule 78
	'else'         reduce using rule 78
	'for'          reduce using rule 78
	'functions:'   reduce using rule 78
	'get'          reduce using rule 78
	'if'           reduce using rule 78
	'in'           reduce using rule 78
	'local'        reduce using rule 78
	'match'        reduce using rule 78
	'not'          reduce using rule 78
	'or'           reduce using rule 78
	'override'     reduce using rule 78
	'private'      reduce using rule 78
	'value'        reduce using rule 78
	'variables:'   reduce using rule 78
	'while'        reduce using rule 78
	'{'            reduce using rule 78
	'}'            reduce using rule 78
	L_charac       reduce using rule 78
	L_integ        reduce using rule 78
	L_quoted       reduce using rule 78
	L_UpperCaseIdentreduce using rule 78
	L_LowerCaseIdentreduce using rule 78


State 86

	Expr4 -> Expr5 .                                    (rule 81)

	'!='           reduce using rule 81
	'('            reduce using rule 81
	')'            reduce using rule 81
	'*'            reduce using rule 81
	'+'            reduce using rule 81
	'++'           reduce using rule 81
	','            reduce using rule 81
	'-'            reduce using rule 81
	'/'            reduce using rule 81
	'<'            reduce using rule 81
	'<='           reduce using rule 81
	'=='           reduce using rule 81
	'>'            reduce using rule 81
	'>='           reduce using rule 81
	'False'        reduce using rule 81
	'Pass'         reduce using rule 81
	'True'         reduce using rule 81
	'actions:'     reduce using rule 81
	'and'          reduce using rule 81
	'case'         reduce using rule 81
	'do'           reduce using rule 81
	'else'         reduce using rule 81
	'for'          reduce using rule 81
	'functions:'   reduce using rule 81
	'get'          reduce using rule 81
	'if'           reduce using rule 81
	'in'           reduce using rule 81
	'local'        reduce using rule 81
	'match'        reduce using rule 81
	'not'          reduce using rule 81
	'or'           reduce using rule 81
	'override'     reduce using rule 81
	'private'      reduce using rule 81
	'value'        reduce using rule 81
	'variables:'   reduce using rule 81
	'while'        reduce using rule 81
	'{'            reduce using rule 81
	'}'            reduce using rule 81
	L_charac       reduce using rule 81
	L_integ        reduce using rule 81
	L_quoted       reduce using rule 81
	L_UpperCaseIdentreduce using rule 81
	L_LowerCaseIdentreduce using rule 81


State 87

	Expr5 -> Literal .                                  (rule 85)

	'!='           reduce using rule 85
	'('            reduce using rule 85
	')'            reduce using rule 85
	'*'            reduce using rule 85
	'+'            reduce using rule 85
	'++'           reduce using rule 85
	','            reduce using rule 85
	'-'            reduce using rule 85
	'/'            reduce using rule 85
	'<'            reduce using rule 85
	'<='           reduce using rule 85
	'=='           reduce using rule 85
	'>'            reduce using rule 85
	'>='           reduce using rule 85
	'False'        reduce using rule 85
	'Pass'         reduce using rule 85
	'True'         reduce using rule 85
	'actions:'     reduce using rule 85
	'and'          reduce using rule 85
	'case'         reduce using rule 85
	'do'           reduce using rule 85
	'else'         reduce using rule 85
	'for'          reduce using rule 85
	'functions:'   reduce using rule 85
	'get'          reduce using rule 85
	'if'           reduce using rule 85
	'in'           reduce using rule 85
	'local'        reduce using rule 85
	'match'        reduce using rule 85
	'not'          reduce using rule 85
	'or'           reduce using rule 85
	'override'     reduce using rule 85
	'private'      reduce using rule 85
	'value'        reduce using rule 85
	'variables:'   reduce using rule 85
	'while'        reduce using rule 85
	'{'            reduce using rule 85
	'}'            reduce using rule 85
	L_charac       reduce using rule 85
	L_integ        reduce using rule 85
	L_quoted       reduce using rule 85
	L_UpperCaseIdentreduce using rule 85
	L_LowerCaseIdentreduce using rule 85


State 88

	Literal -> Boolean .                                (rule 98)

	'!='           reduce using rule 98
	'('            reduce using rule 98
	')'            reduce using rule 98
	'*'            reduce using rule 98
	'+'            reduce using rule 98
	'++'           reduce using rule 98
	','            reduce using rule 98
	'-'            reduce using rule 98
	'/'            reduce using rule 98
	'<'            reduce using rule 98
	'<='           reduce using rule 98
	'=='           reduce using rule 98
	'>'            reduce using rule 98
	'>='           reduce using rule 98
	'False'        reduce using rule 98
	'Pass'         reduce using rule 98
	'True'         reduce using rule 98
	'actions:'     reduce using rule 98
	'and'          reduce using rule 98
	'case'         reduce using rule 98
	'do'           reduce using rule 98
	'else'         reduce using rule 98
	'for'          reduce using rule 98
	'functions:'   reduce using rule 98
	'get'          reduce using rule 98
	'if'           reduce using rule 98
	'in'           reduce using rule 98
	'local'        reduce using rule 98
	'match'        reduce using rule 98
	'not'          reduce using rule 98
	'or'           reduce using rule 98
	'override'     reduce using rule 98
	'private'      reduce using rule 98
	'value'        reduce using rule 98
	'variables:'   reduce using rule 98
	'while'        reduce using rule 98
	'{'            reduce using rule 98
	'}'            reduce using rule 98
	L_charac       reduce using rule 98
	L_integ        reduce using rule 98
	L_quoted       reduce using rule 98
	L_UpperCaseIdentreduce using rule 98
	L_LowerCaseIdentreduce using rule 98


State 89

	Literal -> Void .                                   (rule 101)

	'!='           reduce using rule 101
	'('            reduce using rule 101
	')'            reduce using rule 101
	'*'            reduce using rule 101
	'+'            reduce using rule 101
	'++'           reduce using rule 101
	','            reduce using rule 101
	'-'            reduce using rule 101
	'/'            reduce using rule 101
	'<'            reduce using rule 101
	'<='           reduce using rule 101
	'=='           reduce using rule 101
	'>'            reduce using rule 101
	'>='           reduce using rule 101
	'False'        reduce using rule 101
	'Pass'         reduce using rule 101
	'True'         reduce using rule 101
	'actions:'     reduce using rule 101
	'and'          reduce using rule 101
	'case'         reduce using rule 101
	'do'           reduce using rule 101
	'else'         reduce using rule 101
	'for'          reduce using rule 101
	'functions:'   reduce using rule 101
	'get'          reduce using rule 101
	'if'           reduce using rule 101
	'in'           reduce using rule 101
	'local'        reduce using rule 101
	'match'        reduce using rule 101
	'not'          reduce using rule 101
	'or'           reduce using rule 101
	'override'     reduce using rule 101
	'private'      reduce using rule 101
	'value'        reduce using rule 101
	'variables:'   reduce using rule 101
	'while'        reduce using rule 101
	'{'            reduce using rule 101
	'}'            reduce using rule 101
	L_charac       reduce using rule 101
	L_integ        reduce using rule 101
	L_quoted       reduce using rule 101
	L_UpperCaseIdentreduce using rule 101
	L_LowerCaseIdentreduce using rule 101


State 90

	Expr5 -> LocalValueDecl .                           (rule 87)

	'!='           reduce using rule 87
	'('            reduce using rule 87
	')'            reduce using rule 87
	'*'            reduce using rule 87
	'+'            reduce using rule 87
	'++'           reduce using rule 87
	','            reduce using rule 87
	'-'            reduce using rule 87
	'/'            reduce using rule 87
	'<'            reduce using rule 87
	'<='           reduce using rule 87
	'=='           reduce using rule 87
	'>'            reduce using rule 87
	'>='           reduce using rule 87
	'False'        reduce using rule 87
	'Pass'         reduce using rule 87
	'True'         reduce using rule 87
	'actions:'     reduce using rule 87
	'and'          reduce using rule 87
	'case'         reduce using rule 87
	'do'           reduce using rule 87
	'else'         reduce using rule 87
	'for'          reduce using rule 87
	'functions:'   reduce using rule 87
	'get'          reduce using rule 87
	'if'           reduce using rule 87
	'in'           reduce using rule 87
	'local'        reduce using rule 87
	'match'        reduce using rule 87
	'not'          reduce using rule 87
	'or'           reduce using rule 87
	'override'     reduce using rule 87
	'private'      reduce using rule 87
	'value'        reduce using rule 87
	'variables:'   reduce using rule 87
	'while'        reduce using rule 87
	'{'            reduce using rule 87
	'}'            reduce using rule 87
	L_charac       reduce using rule 87
	L_integ        reduce using rule 87
	L_quoted       reduce using rule 87
	L_UpperCaseIdentreduce using rule 87
	L_LowerCaseIdentreduce using rule 87


State 91

	Expr5 -> LambdaFunction .                           (rule 88)

	'!='           reduce using rule 88
	'('            reduce using rule 88
	')'            reduce using rule 88
	'*'            reduce using rule 88
	'+'            reduce using rule 88
	'++'           reduce using rule 88
	','            reduce using rule 88
	'-'            reduce using rule 88
	'/'            reduce using rule 88
	'<'            reduce using rule 88
	'<='           reduce using rule 88
	'=='           reduce using rule 88
	'>'            reduce using rule 88
	'>='           reduce using rule 88
	'False'        reduce using rule 88
	'Pass'         reduce using rule 88
	'True'         reduce using rule 88
	'actions:'     reduce using rule 88
	'and'          reduce using rule 88
	'case'         reduce using rule 88
	'do'           reduce using rule 88
	'else'         reduce using rule 88
	'for'          reduce using rule 88
	'functions:'   reduce using rule 88
	'get'          reduce using rule 88
	'if'           reduce using rule 88
	'in'           reduce using rule 88
	'local'        reduce using rule 88
	'match'        reduce using rule 88
	'not'          reduce using rule 88
	'or'           reduce using rule 88
	'override'     reduce using rule 88
	'private'      reduce using rule 88
	'value'        reduce using rule 88
	'variables:'   reduce using rule 88
	'while'        reduce using rule 88
	'{'            reduce using rule 88
	'}'            reduce using rule 88
	L_charac       reduce using rule 88
	L_integ        reduce using rule 88
	L_quoted       reduce using rule 88
	L_UpperCaseIdentreduce using rule 88
	L_LowerCaseIdentreduce using rule 88


State 92

	Expr5 -> LambdaAction .                             (rule 89)

	'!='           reduce using rule 89
	'('            reduce using rule 89
	')'            reduce using rule 89
	'*'            reduce using rule 89
	'+'            reduce using rule 89
	'++'           reduce using rule 89
	','            reduce using rule 89
	'-'            reduce using rule 89
	'/'            reduce using rule 89
	'<'            reduce using rule 89
	'<='           reduce using rule 89
	'=='           reduce using rule 89
	'>'            reduce using rule 89
	'>='           reduce using rule 89
	'False'        reduce using rule 89
	'Pass'         reduce using rule 89
	'True'         reduce using rule 89
	'actions:'     reduce using rule 89
	'and'          reduce using rule 89
	'case'         reduce using rule 89
	'do'           reduce using rule 89
	'else'         reduce using rule 89
	'for'          reduce using rule 89
	'functions:'   reduce using rule 89
	'get'          reduce using rule 89
	'if'           reduce using rule 89
	'in'           reduce using rule 89
	'local'        reduce using rule 89
	'match'        reduce using rule 89
	'not'          reduce using rule 89
	'or'           reduce using rule 89
	'override'     reduce using rule 89
	'private'      reduce using rule 89
	'value'        reduce using rule 89
	'variables:'   reduce using rule 89
	'while'        reduce using rule 89
	'{'            reduce using rule 89
	'}'            reduce using rule 89
	L_charac       reduce using rule 89
	L_integ        reduce using rule 89
	L_quoted       reduce using rule 89
	L_UpperCaseIdentreduce using rule 89
	L_LowerCaseIdentreduce using rule 89


State 93

	Expr5 -> ConstructorCall .                          (rule 92)

	'!='           reduce using rule 92
	'('            reduce using rule 92
	')'            reduce using rule 92
	'*'            reduce using rule 92
	'+'            reduce using rule 92
	'++'           reduce using rule 92
	','            reduce using rule 92
	'-'            reduce using rule 92
	'/'            reduce using rule 92
	'<'            reduce using rule 92
	'<='           reduce using rule 92
	'=='           reduce using rule 92
	'>'            reduce using rule 92
	'>='           reduce using rule 92
	'False'        reduce using rule 92
	'Pass'         reduce using rule 92
	'True'         reduce using rule 92
	'actions:'     reduce using rule 92
	'and'          reduce using rule 92
	'case'         reduce using rule 92
	'do'           reduce using rule 92
	'else'         reduce using rule 92
	'for'          reduce using rule 92
	'functions:'   reduce using rule 92
	'get'          reduce using rule 92
	'if'           reduce using rule 92
	'in'           reduce using rule 92
	'local'        reduce using rule 92
	'match'        reduce using rule 92
	'not'          reduce using rule 92
	'or'           reduce using rule 92
	'override'     reduce using rule 92
	'private'      reduce using rule 92
	'value'        reduce using rule 92
	'variables:'   reduce using rule 92
	'while'        reduce using rule 92
	'{'            reduce using rule 92
	'}'            reduce using rule 92
	L_charac       reduce using rule 92
	L_integ        reduce using rule 92
	L_quoted       reduce using rule 92
	L_UpperCaseIdentreduce using rule 92
	L_LowerCaseIdentreduce using rule 92


State 94

	Expr5 -> GetExpr .                                  (rule 93)
	GetExpr -> GetExpr . '.' FunctionCall               (rule 120)
	DoExpr -> GetExpr . '#' FunctionCall                (rule 123)

	'!='           reduce using rule 93
	'#'            shift, and enter state 146
	'('            reduce using rule 93
	')'            reduce using rule 93
	'*'            reduce using rule 93
	'+'            reduce using rule 93
	'++'           reduce using rule 93
	','            reduce using rule 93
	'-'            reduce using rule 93
	'.'            shift, and enter state 147
	'/'            reduce using rule 93
	'<'            reduce using rule 93
	'<='           reduce using rule 93
	'=='           reduce using rule 93
	'>'            reduce using rule 93
	'>='           reduce using rule 93
	'False'        reduce using rule 93
	'Pass'         reduce using rule 93
	'True'         reduce using rule 93
	'actions:'     reduce using rule 93
	'and'          reduce using rule 93
	'case'         reduce using rule 93
	'do'           reduce using rule 93
	'else'         reduce using rule 93
	'for'          reduce using rule 93
	'functions:'   reduce using rule 93
	'get'          reduce using rule 93
	'if'           reduce using rule 93
	'in'           reduce using rule 93
	'local'        reduce using rule 93
	'match'        reduce using rule 93
	'not'          reduce using rule 93
	'or'           reduce using rule 93
	'override'     reduce using rule 93
	'private'      reduce using rule 93
	'value'        reduce using rule 93
	'variables:'   reduce using rule 93
	'while'        reduce using rule 93
	'{'            reduce using rule 93
	'}'            reduce using rule 93
	L_charac       reduce using rule 93
	L_integ        reduce using rule 93
	L_quoted       reduce using rule 93
	L_UpperCaseIdentreduce using rule 93
	L_LowerCaseIdentreduce using rule 93


State 95

	Expr5 -> DoExpr .                                   (rule 94)

	'!='           reduce using rule 94
	'('            reduce using rule 94
	')'            reduce using rule 94
	'*'            reduce using rule 94
	'+'            reduce using rule 94
	'++'           reduce using rule 94
	','            reduce using rule 94
	'-'            reduce using rule 94
	'/'            reduce using rule 94
	'<'            reduce using rule 94
	'<='           reduce using rule 94
	'=='           reduce using rule 94
	'>'            reduce using rule 94
	'>='           reduce using rule 94
	'False'        reduce using rule 94
	'Pass'         reduce using rule 94
	'True'         reduce using rule 94
	'actions:'     reduce using rule 94
	'and'          reduce using rule 94
	'case'         reduce using rule 94
	'do'           reduce using rule 94
	'else'         reduce using rule 94
	'for'          reduce using rule 94
	'functions:'   reduce using rule 94
	'get'          reduce using rule 94
	'if'           reduce using rule 94
	'in'           reduce using rule 94
	'local'        reduce using rule 94
	'match'        reduce using rule 94
	'not'          reduce using rule 94
	'or'           reduce using rule 94
	'override'     reduce using rule 94
	'private'      reduce using rule 94
	'value'        reduce using rule 94
	'variables:'   reduce using rule 94
	'while'        reduce using rule 94
	'{'            reduce using rule 94
	'}'            reduce using rule 94
	L_charac       reduce using rule 94
	L_integ        reduce using rule 94
	L_quoted       reduce using rule 94
	L_UpperCaseIdentreduce using rule 94
	L_LowerCaseIdentreduce using rule 94


State 96

	Expr5 -> ImperativeControlFlow .                    (rule 95)

	'!='           reduce using rule 95
	'('            reduce using rule 95
	')'            reduce using rule 95
	'*'            reduce using rule 95
	'+'            reduce using rule 95
	'++'           reduce using rule 95
	','            reduce using rule 95
	'-'            reduce using rule 95
	'/'            reduce using rule 95
	'<'            reduce using rule 95
	'<='           reduce using rule 95
	'=='           reduce using rule 95
	'>'            reduce using rule 95
	'>='           reduce using rule 95
	'False'        reduce using rule 95
	'Pass'         reduce using rule 95
	'True'         reduce using rule 95
	'actions:'     reduce using rule 95
	'and'          reduce using rule 95
	'case'         reduce using rule 95
	'do'           reduce using rule 95
	'else'         reduce using rule 95
	'for'          reduce using rule 95
	'functions:'   reduce using rule 95
	'get'          reduce using rule 95
	'if'           reduce using rule 95
	'in'           reduce using rule 95
	'local'        reduce using rule 95
	'match'        reduce using rule 95
	'not'          reduce using rule 95
	'or'           reduce using rule 95
	'override'     reduce using rule 95
	'private'      reduce using rule 95
	'value'        reduce using rule 95
	'variables:'   reduce using rule 95
	'while'        reduce using rule 95
	'{'            reduce using rule 95
	'}'            reduce using rule 95
	L_charac       reduce using rule 95
	L_integ        reduce using rule 95
	L_quoted       reduce using rule 95
	L_UpperCaseIdentreduce using rule 95
	L_LowerCaseIdentreduce using rule 95


State 97

	Expr5 -> FunctionalControlFlow .                    (rule 96)

	'!='           reduce using rule 96
	'('            reduce using rule 96
	')'            reduce using rule 96
	'*'            reduce using rule 96
	'+'            reduce using rule 96
	'++'           reduce using rule 96
	','            reduce using rule 96
	'-'            reduce using rule 96
	'/'            reduce using rule 96
	'<'            reduce using rule 96
	'<='           reduce using rule 96
	'=='           reduce using rule 96
	'>'            reduce using rule 96
	'>='           reduce using rule 96
	'False'        reduce using rule 96
	'Pass'         reduce using rule 96
	'True'         reduce using rule 96
	'actions:'     reduce using rule 96
	'and'          reduce using rule 96
	'case'         reduce using rule 96
	'do'           reduce using rule 96
	'else'         reduce using rule 96
	'for'          reduce using rule 96
	'functions:'   reduce using rule 96
	'get'          reduce using rule 96
	'if'           reduce using rule 96
	'in'           reduce using rule 96
	'local'        reduce using rule 96
	'match'        reduce using rule 96
	'not'          reduce using rule 96
	'or'           reduce using rule 96
	'override'     reduce using rule 96
	'private'      reduce using rule 96
	'value'        reduce using rule 96
	'variables:'   reduce using rule 96
	'while'        reduce using rule 96
	'{'            reduce using rule 96
	'}'            reduce using rule 96
	L_charac       reduce using rule 96
	L_integ        reduce using rule 96
	L_quoted       reduce using rule 96
	L_UpperCaseIdentreduce using rule 96
	L_LowerCaseIdentreduce using rule 96


State 98

	Expr5 -> '(' . Expr ')'                             (rule 84)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 145
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 99

	Expr4 -> '-' . Expr5                                (rule 83)

	'('            shift, and enter state 98
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr5          goto state 144
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 100

	Boolean -> 'False' .                                (rule 103)

	'!='           reduce using rule 103
	'('            reduce using rule 103
	')'            reduce using rule 103
	'*'            reduce using rule 103
	'+'            reduce using rule 103
	'++'           reduce using rule 103
	','            reduce using rule 103
	'-'            reduce using rule 103
	'/'            reduce using rule 103
	'<'            reduce using rule 103
	'<='           reduce using rule 103
	'=='           reduce using rule 103
	'>'            reduce using rule 103
	'>='           reduce using rule 103
	'False'        reduce using rule 103
	'Pass'         reduce using rule 103
	'True'         reduce using rule 103
	'actions:'     reduce using rule 103
	'and'          reduce using rule 103
	'case'         reduce using rule 103
	'do'           reduce using rule 103
	'else'         reduce using rule 103
	'for'          reduce using rule 103
	'functions:'   reduce using rule 103
	'get'          reduce using rule 103
	'if'           reduce using rule 103
	'in'           reduce using rule 103
	'local'        reduce using rule 103
	'match'        reduce using rule 103
	'not'          reduce using rule 103
	'or'           reduce using rule 103
	'override'     reduce using rule 103
	'private'      reduce using rule 103
	'value'        reduce using rule 103
	'variables:'   reduce using rule 103
	'while'        reduce using rule 103
	'{'            reduce using rule 103
	'}'            reduce using rule 103
	L_charac       reduce using rule 103
	L_integ        reduce using rule 103
	L_quoted       reduce using rule 103
	L_UpperCaseIdentreduce using rule 103
	L_LowerCaseIdentreduce using rule 103


State 101

	Void -> 'Pass' .                                    (rule 104)

	'!='           reduce using rule 104
	'('            reduce using rule 104
	')'            reduce using rule 104
	'*'            reduce using rule 104
	'+'            reduce using rule 104
	'++'           reduce using rule 104
	','            reduce using rule 104
	'-'            reduce using rule 104
	'/'            reduce using rule 104
	'<'            reduce using rule 104
	'<='           reduce using rule 104
	'=='           reduce using rule 104
	'>'            reduce using rule 104
	'>='           reduce using rule 104
	'False'        reduce using rule 104
	'Pass'         reduce using rule 104
	'True'         reduce using rule 104
	'actions:'     reduce using rule 104
	'and'          reduce using rule 104
	'case'         reduce using rule 104
	'do'           reduce using rule 104
	'else'         reduce using rule 104
	'for'          reduce using rule 104
	'functions:'   reduce using rule 104
	'get'          reduce using rule 104
	'if'           reduce using rule 104
	'in'           reduce using rule 104
	'local'        reduce using rule 104
	'match'        reduce using rule 104
	'not'          reduce using rule 104
	'or'           reduce using rule 104
	'override'     reduce using rule 104
	'private'      reduce using rule 104
	'value'        reduce using rule 104
	'variables:'   reduce using rule 104
	'while'        reduce using rule 104
	'{'            reduce using rule 104
	'}'            reduce using rule 104
	L_charac       reduce using rule 104
	L_integ        reduce using rule 104
	L_quoted       reduce using rule 104
	L_UpperCaseIdentreduce using rule 104
	L_LowerCaseIdentreduce using rule 104


State 102

	Boolean -> 'True' .                                 (rule 102)

	'!='           reduce using rule 102
	'('            reduce using rule 102
	')'            reduce using rule 102
	'*'            reduce using rule 102
	'+'            reduce using rule 102
	'++'           reduce using rule 102
	','            reduce using rule 102
	'-'            reduce using rule 102
	'/'            reduce using rule 102
	'<'            reduce using rule 102
	'<='           reduce using rule 102
	'=='           reduce using rule 102
	'>'            reduce using rule 102
	'>='           reduce using rule 102
	'False'        reduce using rule 102
	'Pass'         reduce using rule 102
	'True'         reduce using rule 102
	'actions:'     reduce using rule 102
	'and'          reduce using rule 102
	'case'         reduce using rule 102
	'do'           reduce using rule 102
	'else'         reduce using rule 102
	'for'          reduce using rule 102
	'functions:'   reduce using rule 102
	'get'          reduce using rule 102
	'if'           reduce using rule 102
	'in'           reduce using rule 102
	'local'        reduce using rule 102
	'match'        reduce using rule 102
	'not'          reduce using rule 102
	'or'           reduce using rule 102
	'override'     reduce using rule 102
	'private'      reduce using rule 102
	'value'        reduce using rule 102
	'variables:'   reduce using rule 102
	'while'        reduce using rule 102
	'{'            reduce using rule 102
	'}'            reduce using rule 102
	L_charac       reduce using rule 102
	L_integ        reduce using rule 102
	L_quoted       reduce using rule 102
	L_UpperCaseIdentreduce using rule 102
	L_LowerCaseIdentreduce using rule 102


State 103

	LambdaAction -> 'do' . '(' ListValueDecl ')' '->' Expr    (rule 108)
	LambdaAction -> 'do' . '(' ListValueDecl ')' '->' '{' Expr '}'    (rule 109)

	'('            shift, and enter state 143


State 104

	ImperativeControlFlow -> 'for' . '(' ValueDecl 'in' Expr ')' '{' ListExpr '}'    (rule 125)

	'('            shift, and enter state 142


State 105

	LambdaFunction -> 'get' . '(' ListValueDecl ')' '->' Expr    (rule 106)
	LambdaFunction -> 'get' . '(' ListValueDecl ')' '->' '{' Expr '}'    (rule 107)

	'('            shift, and enter state 141


State 106

	ImperativeControlFlow -> 'if' . '(' Expr ')' '{' ListExpr '}' OptionalElseBranch    (rule 126)
	FunctionalControlFlow -> 'if' . '(' Expr ')' ThenBranch ElseBranch    (rule 129)

	'('            shift, and enter state 140


State 107

	Expr5 -> 'local' . '.' FunctionCall                 (rule 90)
	Expr5 -> 'local' . '#' FunctionCall                 (rule 91)

	'#'            shift, and enter state 138
	'.'            shift, and enter state 139


State 108

	FunctionalControlFlow -> 'match' . Expr '{' ListMatchCase '}'    (rule 130)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 137
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 109

	Expr4 -> 'not' . Expr5                              (rule 82)

	'('            shift, and enter state 98
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr5          goto state 136
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 110

	LocalValueDecl -> 'value' . ValueDecl               (rule 105)

	'private'      shift, and enter state 34
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ValueDecl      goto state 135
	ValueDeclPropergoto state 33

State 111

	ImperativeControlFlow -> 'while' . '(' Expr ')' '{' ListExpr '}'    (rule 124)

	'('            shift, and enter state 134


State 112

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	'++'           reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'False'        reduce using rule 2
	'Pass'         reduce using rule 2
	'True'         reduce using rule 2
	'actions:'     reduce using rule 2
	'and'          reduce using rule 2
	'case'         reduce using rule 2
	'do'           reduce using rule 2
	'else'         reduce using rule 2
	'for'          reduce using rule 2
	'functions:'   reduce using rule 2
	'get'          reduce using rule 2
	'if'           reduce using rule 2
	'in'           reduce using rule 2
	'local'        reduce using rule 2
	'match'        reduce using rule 2
	'not'          reduce using rule 2
	'or'           reduce using rule 2
	'override'     reduce using rule 2
	'private'      reduce using rule 2
	'value'        reduce using rule 2
	'variables:'   reduce using rule 2
	'while'        reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	L_charac       reduce using rule 2
	L_integ        reduce using rule 2
	L_quoted       reduce using rule 2
	L_UpperCaseIdentreduce using rule 2
	L_LowerCaseIdentreduce using rule 2


State 113

	String -> L_quoted .                                (rule 3)

	'!='           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	'++'           reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'/'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'False'        reduce using rule 3
	'Pass'         reduce using rule 3
	'True'         reduce using rule 3
	'actions:'     reduce using rule 3
	'and'          reduce using rule 3
	'case'         reduce using rule 3
	'do'           reduce using rule 3
	'else'         reduce using rule 3
	'for'          reduce using rule 3
	'functions:'   reduce using rule 3
	'get'          reduce using rule 3
	'if'           reduce using rule 3
	'in'           reduce using rule 3
	'local'        reduce using rule 3
	'match'        reduce using rule 3
	'not'          reduce using rule 3
	'or'           reduce using rule 3
	'override'     reduce using rule 3
	'private'      reduce using rule 3
	'value'        reduce using rule 3
	'variables:'   reduce using rule 3
	'while'        reduce using rule 3
	'{'            reduce using rule 3
	'}'            reduce using rule 3
	L_charac       reduce using rule 3
	L_integ        reduce using rule 3
	L_quoted       reduce using rule 3
	L_UpperCaseIdentreduce using rule 3
	L_LowerCaseIdentreduce using rule 3


State 114

	MethodType -> '(' ListValueDecl . ')' '->' ValueType    (rule 49)

	')'            shift, and enter state 133


State 115

	FunctionDecl -> 'private' FunctionIdent . ':' MethodType '=' FunctionBody    (rule 54)

	':'            shift, and enter state 132


State 116

	FunctionDecl -> 'override' FunctionIdent . ':' MethodType '=' FunctionBody    (rule 52)

	':'            shift, and enter state 131


State 117

	ListFunctionDecl -> FunctionDecl ListFunctionDecl .    (rule 51)

	'}'            reduce using rule 51


State 118

	FSBody -> '{' ListFunctionDecl '}' .                (rule 47)

	'actions:'     reduce using rule 47
	'}'            reduce using rule 47


State 119

	FunctionDecl -> FunctionIdent ':' . MethodType '=' FunctionBody    (rule 53)

	'('            shift, and enter state 70

	MethodType     goto state 130

State 120

	ActionDecl -> FunctionIdent . ':' MethodType '=' ActionBody    (rule 64)

	':'            shift, and enter state 129


State 121

	ASBody -> '{' ListActionDecl . '}'                  (rule 60)

	'}'            shift, and enter state 128


State 122

	ListActionDecl -> ActionDecl . ListActionDecl       (rule 62)

	'override'     shift, and enter state 123
	'private'      shift, and enter state 124
	'}'            reduce using rule 61
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 120
	ListActionDecl goto state 127
	ActionDecl     goto state 122

State 123

	ActionDecl -> 'override' . FunctionIdent ':' MethodType '=' ActionBody    (rule 63)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 126

State 124

	ActionDecl -> 'private' . FunctionIdent ':' MethodType '=' ActionBody    (rule 65)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 125

State 125

	ActionDecl -> 'private' FunctionIdent . ':' MethodType '=' ActionBody    (rule 65)

	':'            shift, and enter state 203


State 126

	ActionDecl -> 'override' FunctionIdent . ':' MethodType '=' ActionBody    (rule 63)

	':'            shift, and enter state 202


State 127

	ListActionDecl -> ActionDecl ListActionDecl .       (rule 62)

	'}'            reduce using rule 62


State 128

	ASBody -> '{' ListActionDecl '}' .                  (rule 60)

	'}'            reduce using rule 60


State 129

	ActionDecl -> FunctionIdent ':' . MethodType '=' ActionBody    (rule 64)

	'('            shift, and enter state 70

	MethodType     goto state 201

State 130

	FunctionDecl -> FunctionIdent ':' MethodType . '=' FunctionBody    (rule 53)

	'='            shift, and enter state 200


State 131

	FunctionDecl -> 'override' FunctionIdent ':' . MethodType '=' FunctionBody    (rule 52)

	'('            shift, and enter state 70

	MethodType     goto state 199

State 132

	FunctionDecl -> 'private' FunctionIdent ':' . MethodType '=' FunctionBody    (rule 54)

	'('            shift, and enter state 70

	MethodType     goto state 198

State 133

	MethodType -> '(' ListValueDecl ')' . '->' ValueType    (rule 49)

	'->'           shift, and enter state 197


State 134

	ImperativeControlFlow -> 'while' '(' . Expr ')' '{' ListExpr '}'    (rule 124)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 196
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 135

	LocalValueDecl -> 'value' ValueDecl .               (rule 105)

	'!='           reduce using rule 105
	'('            reduce using rule 105
	')'            reduce using rule 105
	'*'            reduce using rule 105
	'+'            reduce using rule 105
	'++'           reduce using rule 105
	','            reduce using rule 105
	'-'            reduce using rule 105
	'/'            reduce using rule 105
	'<'            reduce using rule 105
	'<='           reduce using rule 105
	'=='           reduce using rule 105
	'>'            reduce using rule 105
	'>='           reduce using rule 105
	'False'        reduce using rule 105
	'Pass'         reduce using rule 105
	'True'         reduce using rule 105
	'actions:'     reduce using rule 105
	'and'          reduce using rule 105
	'case'         reduce using rule 105
	'do'           reduce using rule 105
	'else'         reduce using rule 105
	'for'          reduce using rule 105
	'functions:'   reduce using rule 105
	'get'          reduce using rule 105
	'if'           reduce using rule 105
	'in'           reduce using rule 105
	'local'        reduce using rule 105
	'match'        reduce using rule 105
	'not'          reduce using rule 105
	'or'           reduce using rule 105
	'override'     reduce using rule 105
	'private'      reduce using rule 105
	'value'        reduce using rule 105
	'variables:'   reduce using rule 105
	'while'        reduce using rule 105
	'{'            reduce using rule 105
	'}'            reduce using rule 105
	L_charac       reduce using rule 105
	L_integ        reduce using rule 105
	L_quoted       reduce using rule 105
	L_UpperCaseIdentreduce using rule 105
	L_LowerCaseIdentreduce using rule 105


State 136

	Expr4 -> 'not' Expr5 .                              (rule 82)

	'!='           reduce using rule 82
	'('            reduce using rule 82
	')'            reduce using rule 82
	'*'            reduce using rule 82
	'+'            reduce using rule 82
	'++'           reduce using rule 82
	','            reduce using rule 82
	'-'            reduce using rule 82
	'/'            reduce using rule 82
	'<'            reduce using rule 82
	'<='           reduce using rule 82
	'=='           reduce using rule 82
	'>'            reduce using rule 82
	'>='           reduce using rule 82
	'False'        reduce using rule 82
	'Pass'         reduce using rule 82
	'True'         reduce using rule 82
	'actions:'     reduce using rule 82
	'and'          reduce using rule 82
	'case'         reduce using rule 82
	'do'           reduce using rule 82
	'else'         reduce using rule 82
	'for'          reduce using rule 82
	'functions:'   reduce using rule 82
	'get'          reduce using rule 82
	'if'           reduce using rule 82
	'in'           reduce using rule 82
	'local'        reduce using rule 82
	'match'        reduce using rule 82
	'not'          reduce using rule 82
	'or'           reduce using rule 82
	'override'     reduce using rule 82
	'private'      reduce using rule 82
	'value'        reduce using rule 82
	'variables:'   reduce using rule 82
	'while'        reduce using rule 82
	'{'            reduce using rule 82
	'}'            reduce using rule 82
	L_charac       reduce using rule 82
	L_integ        reduce using rule 82
	L_quoted       reduce using rule 82
	L_UpperCaseIdentreduce using rule 82
	L_LowerCaseIdentreduce using rule 82


State 137

	FunctionalControlFlow -> 'match' Expr . '{' ListMatchCase '}'    (rule 130)

	'{'            shift, and enter state 195


State 138

	Expr5 -> 'local' '#' . FunctionCall                 (rule 91)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 171
	FunctionCall   goto state 194

State 139

	Expr5 -> 'local' '.' . FunctionCall                 (rule 90)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 171
	FunctionCall   goto state 193

State 140

	ImperativeControlFlow -> 'if' '(' . Expr ')' '{' ListExpr '}' OptionalElseBranch    (rule 126)
	FunctionalControlFlow -> 'if' '(' . Expr ')' ThenBranch ElseBranch    (rule 129)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 192
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 141

	LambdaFunction -> 'get' '(' . ListValueDecl ')' '->' Expr    (rule 106)
	LambdaFunction -> 'get' '(' . ListValueDecl ')' '->' '{' Expr '}'    (rule 107)

	')'            reduce using rule 37
	'private'      shift, and enter state 34
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ListValueDecl  goto state 191
	ValueDecl      goto state 32
	ValueDeclPropergoto state 33

State 142

	ImperativeControlFlow -> 'for' '(' . ValueDecl 'in' Expr ')' '{' ListExpr '}'    (rule 125)

	'private'      shift, and enter state 34
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ValueDecl      goto state 190
	ValueDeclPropergoto state 33

State 143

	LambdaAction -> 'do' '(' . ListValueDecl ')' '->' Expr    (rule 108)
	LambdaAction -> 'do' '(' . ListValueDecl ')' '->' '{' Expr '}'    (rule 109)

	')'            reduce using rule 37
	'private'      shift, and enter state 34
	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 28
	ValueIdent     goto state 30
	ListValueDecl  goto state 189
	ValueDecl      goto state 32
	ValueDeclPropergoto state 33

State 144

	Expr4 -> '-' Expr5 .                                (rule 83)

	'!='           reduce using rule 83
	'('            reduce using rule 83
	')'            reduce using rule 83
	'*'            reduce using rule 83
	'+'            reduce using rule 83
	'++'           reduce using rule 83
	','            reduce using rule 83
	'-'            reduce using rule 83
	'/'            reduce using rule 83
	'<'            reduce using rule 83
	'<='           reduce using rule 83
	'=='           reduce using rule 83
	'>'            reduce using rule 83
	'>='           reduce using rule 83
	'False'        reduce using rule 83
	'Pass'         reduce using rule 83
	'True'         reduce using rule 83
	'actions:'     reduce using rule 83
	'and'          reduce using rule 83
	'case'         reduce using rule 83
	'do'           reduce using rule 83
	'else'         reduce using rule 83
	'for'          reduce using rule 83
	'functions:'   reduce using rule 83
	'get'          reduce using rule 83
	'if'           reduce using rule 83
	'in'           reduce using rule 83
	'local'        reduce using rule 83
	'match'        reduce using rule 83
	'not'          reduce using rule 83
	'or'           reduce using rule 83
	'override'     reduce using rule 83
	'private'      reduce using rule 83
	'value'        reduce using rule 83
	'variables:'   reduce using rule 83
	'while'        reduce using rule 83
	'{'            reduce using rule 83
	'}'            reduce using rule 83
	L_charac       reduce using rule 83
	L_integ        reduce using rule 83
	L_quoted       reduce using rule 83
	L_UpperCaseIdentreduce using rule 83
	L_LowerCaseIdentreduce using rule 83


State 145

	Expr5 -> '(' Expr . ')'                             (rule 84)

	')'            shift, and enter state 188


State 146

	DoExpr -> GetExpr '#' . FunctionCall                (rule 123)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 171
	FunctionCall   goto state 187

State 147

	GetExpr -> GetExpr '.' . FunctionCall               (rule 120)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 171
	FunctionCall   goto state 186

State 148

	Expr3 -> Expr3 '*' . Expr4                          (rule 79)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr4          goto state 185
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 149

	Expr3 -> Expr3 '/' . Expr4                          (rule 80)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr4          goto state 184
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 150

	Expr2 -> Expr2 '+' . Expr3                          (rule 75)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr3          goto state 183
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 151

	Expr2 -> Expr2 '++' . Expr3                         (rule 77)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr3          goto state 182
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 152

	Expr2 -> Expr2 '-' . Expr3                          (rule 76)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr3          goto state 181
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 153

	Expr1 -> Expr1 RelationalOperator . Expr2           (rule 73)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr2          goto state 180
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 154

	Expr -> Expr1 BooleanOperator . Expr                (rule 71)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 179
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 155

	RelationalOperator -> '!=' .                        (rule 144)

	'('            reduce using rule 144
	'-'            reduce using rule 144
	'False'        reduce using rule 144
	'Pass'         reduce using rule 144
	'True'         reduce using rule 144
	'do'           reduce using rule 144
	'for'          reduce using rule 144
	'get'          reduce using rule 144
	'if'           reduce using rule 144
	'local'        reduce using rule 144
	'match'        reduce using rule 144
	'not'          reduce using rule 144
	'value'        reduce using rule 144
	'while'        reduce using rule 144
	L_charac       reduce using rule 144
	L_integ        reduce using rule 144
	L_quoted       reduce using rule 144
	L_UpperCaseIdentreduce using rule 144
	L_LowerCaseIdentreduce using rule 144


State 156

	RelationalOperator -> '<' .                         (rule 139)

	'('            reduce using rule 139
	'-'            reduce using rule 139
	'False'        reduce using rule 139
	'Pass'         reduce using rule 139
	'True'         reduce using rule 139
	'do'           reduce using rule 139
	'for'          reduce using rule 139
	'get'          reduce using rule 139
	'if'           reduce using rule 139
	'local'        reduce using rule 139
	'match'        reduce using rule 139
	'not'          reduce using rule 139
	'value'        reduce using rule 139
	'while'        reduce using rule 139
	L_charac       reduce using rule 139
	L_integ        reduce using rule 139
	L_quoted       reduce using rule 139
	L_UpperCaseIdentreduce using rule 139
	L_LowerCaseIdentreduce using rule 139


State 157

	RelationalOperator -> '<=' .                        (rule 140)

	'('            reduce using rule 140
	'-'            reduce using rule 140
	'False'        reduce using rule 140
	'Pass'         reduce using rule 140
	'True'         reduce using rule 140
	'do'           reduce using rule 140
	'for'          reduce using rule 140
	'get'          reduce using rule 140
	'if'           reduce using rule 140
	'local'        reduce using rule 140
	'match'        reduce using rule 140
	'not'          reduce using rule 140
	'value'        reduce using rule 140
	'while'        reduce using rule 140
	L_charac       reduce using rule 140
	L_integ        reduce using rule 140
	L_quoted       reduce using rule 140
	L_UpperCaseIdentreduce using rule 140
	L_LowerCaseIdentreduce using rule 140


State 158

	RelationalOperator -> '==' .                        (rule 143)

	'('            reduce using rule 143
	'-'            reduce using rule 143
	'False'        reduce using rule 143
	'Pass'         reduce using rule 143
	'True'         reduce using rule 143
	'do'           reduce using rule 143
	'for'          reduce using rule 143
	'get'          reduce using rule 143
	'if'           reduce using rule 143
	'local'        reduce using rule 143
	'match'        reduce using rule 143
	'not'          reduce using rule 143
	'value'        reduce using rule 143
	'while'        reduce using rule 143
	L_charac       reduce using rule 143
	L_integ        reduce using rule 143
	L_quoted       reduce using rule 143
	L_UpperCaseIdentreduce using rule 143
	L_LowerCaseIdentreduce using rule 143


State 159

	RelationalOperator -> '>' .                         (rule 141)

	'('            reduce using rule 141
	'-'            reduce using rule 141
	'False'        reduce using rule 141
	'Pass'         reduce using rule 141
	'True'         reduce using rule 141
	'do'           reduce using rule 141
	'for'          reduce using rule 141
	'get'          reduce using rule 141
	'if'           reduce using rule 141
	'local'        reduce using rule 141
	'match'        reduce using rule 141
	'not'          reduce using rule 141
	'value'        reduce using rule 141
	'while'        reduce using rule 141
	L_charac       reduce using rule 141
	L_integ        reduce using rule 141
	L_quoted       reduce using rule 141
	L_UpperCaseIdentreduce using rule 141
	L_LowerCaseIdentreduce using rule 141


State 160

	RelationalOperator -> '>=' .                        (rule 142)

	'('            reduce using rule 142
	'-'            reduce using rule 142
	'False'        reduce using rule 142
	'Pass'         reduce using rule 142
	'True'         reduce using rule 142
	'do'           reduce using rule 142
	'for'          reduce using rule 142
	'get'          reduce using rule 142
	'if'           reduce using rule 142
	'local'        reduce using rule 142
	'match'        reduce using rule 142
	'not'          reduce using rule 142
	'value'        reduce using rule 142
	'while'        reduce using rule 142
	L_charac       reduce using rule 142
	L_integ        reduce using rule 142
	L_quoted       reduce using rule 142
	L_UpperCaseIdentreduce using rule 142
	L_LowerCaseIdentreduce using rule 142


State 161

	BooleanOperator -> 'and' .                          (rule 145)

	'('            reduce using rule 145
	'-'            reduce using rule 145
	'False'        reduce using rule 145
	'Pass'         reduce using rule 145
	'True'         reduce using rule 145
	'do'           reduce using rule 145
	'for'          reduce using rule 145
	'get'          reduce using rule 145
	'if'           reduce using rule 145
	'local'        reduce using rule 145
	'match'        reduce using rule 145
	'not'          reduce using rule 145
	'value'        reduce using rule 145
	'while'        reduce using rule 145
	L_charac       reduce using rule 145
	L_integ        reduce using rule 145
	L_quoted       reduce using rule 145
	L_UpperCaseIdentreduce using rule 145
	L_LowerCaseIdentreduce using rule 145


State 162

	BooleanOperator -> 'or' .                           (rule 146)

	'('            reduce using rule 146
	'-'            reduce using rule 146
	'False'        reduce using rule 146
	'Pass'         reduce using rule 146
	'True'         reduce using rule 146
	'do'           reduce using rule 146
	'for'          reduce using rule 146
	'get'          reduce using rule 146
	'if'           reduce using rule 146
	'local'        reduce using rule 146
	'match'        reduce using rule 146
	'not'          reduce using rule 146
	'value'        reduce using rule 146
	'while'        reduce using rule 146
	L_charac       reduce using rule 146
	L_integ        reduce using rule 146
	L_quoted       reduce using rule 146
	L_UpperCaseIdentreduce using rule 146
	L_LowerCaseIdentreduce using rule 146


State 163

	DoExpr -> ValueIdent '#' . FunctionCall             (rule 121)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 171
	FunctionCall   goto state 178

State 164

	GetExpr -> ValueIdent '.' . FunctionCall            (rule 118)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 171
	FunctionCall   goto state 177

State 165

	DoExpr -> ClassIdent '#' . FunctionCall             (rule 122)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 171
	FunctionCall   goto state 176

State 166

	ConstructorCall -> ClassIdent '(' . ListFunctionArgument ')'    (rule 117)

	'('            shift, and enter state 98
	')'            reduce using rule 112
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 173
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ListFunctionArgumentgoto state 174
	FunctionArgumentgoto state 175
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 167

	GetExpr -> ClassIdent '.' . FunctionCall            (rule 119)

	L_LowerCaseIdentshift, and enter state 36

	LowerCaseIdent goto state 63
	FunctionIdent  goto state 171
	FunctionCall   goto state 172

State 168

	ListClassIdent -> ClassIdent ',' . ListClassIdent    (rule 9)

	']'            reduce using rule 7
	L_UpperCaseIdentshift, and enter state 16

	UpperCaseIdent goto state 14
	ListClassIdent goto state 170
	ClassIdent     goto state 75

State 169

	ValueType -> ClassIdent '[' ListClassIdent ']' .    (rule 34)

	'!='           reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'*'            reduce using rule 34
	'+'            reduce using rule 34
	'++'           reduce using rule 34
	','            reduce using rule 34
	'-'            reduce using rule 34
	'/'            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'='            reduce using rule 34
	'=='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'False'        reduce using rule 34
	'Pass'         reduce using rule 34
	'True'         reduce using rule 34
	'actions:'     reduce using rule 34
	'and'          reduce using rule 34
	'case'         reduce using rule 34
	'do'           reduce using rule 34
	'else'         reduce using rule 34
	'for'          reduce using rule 34
	'functions:'   reduce using rule 34
	'get'          reduce using rule 34
	'if'           reduce using rule 34
	'in'           reduce using rule 34
	'local'        reduce using rule 34
	'match'        reduce using rule 34
	'not'          reduce using rule 34
	'or'           reduce using rule 34
	'override'     reduce using rule 34
	'private'      reduce using rule 34
	'value'        reduce using rule 34
	'variables:'   reduce using rule 34
	'while'        reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	L_charac       reduce using rule 34
	L_integ        reduce using rule 34
	L_quoted       reduce using rule 34
	L_UpperCaseIdentreduce using rule 34
	L_LowerCaseIdentreduce using rule 34


State 170

	ListClassIdent -> ClassIdent ',' ListClassIdent .    (rule 9)

	']'            reduce using rule 9


State 171

	FunctionCall -> FunctionIdent .                     (rule 110)
	FunctionCall -> FunctionIdent . '(' ListFunctionArgument ')'    (rule 111)

	'!='           reduce using rule 110
	'#'            reduce using rule 110
	'('            shift, and enter state 223
			(reduce using rule 110)

	')'            reduce using rule 110
	'*'            reduce using rule 110
	'+'            reduce using rule 110
	'++'           reduce using rule 110
	','            reduce using rule 110
	'-'            reduce using rule 110
	'.'            reduce using rule 110
	'/'            reduce using rule 110
	'<'            reduce using rule 110
	'<='           reduce using rule 110
	'=='           reduce using rule 110
	'>'            reduce using rule 110
	'>='           reduce using rule 110
	'False'        reduce using rule 110
	'Pass'         reduce using rule 110
	'True'         reduce using rule 110
	'actions:'     reduce using rule 110
	'and'          reduce using rule 110
	'case'         reduce using rule 110
	'do'           reduce using rule 110
	'else'         reduce using rule 110
	'for'          reduce using rule 110
	'functions:'   reduce using rule 110
	'get'          reduce using rule 110
	'if'           reduce using rule 110
	'in'           reduce using rule 110
	'local'        reduce using rule 110
	'match'        reduce using rule 110
	'not'          reduce using rule 110
	'or'           reduce using rule 110
	'override'     reduce using rule 110
	'private'      reduce using rule 110
	'value'        reduce using rule 110
	'variables:'   reduce using rule 110
	'while'        reduce using rule 110
	'{'            reduce using rule 110
	'}'            reduce using rule 110
	L_charac       reduce using rule 110
	L_integ        reduce using rule 110
	L_quoted       reduce using rule 110
	L_UpperCaseIdentreduce using rule 110
	L_LowerCaseIdentreduce using rule 110


State 172

	GetExpr -> ClassIdent '.' FunctionCall .            (rule 119)

	'!='           reduce using rule 119
	'#'            reduce using rule 119
	'('            reduce using rule 119
	')'            reduce using rule 119
	'*'            reduce using rule 119
	'+'            reduce using rule 119
	'++'           reduce using rule 119
	','            reduce using rule 119
	'-'            reduce using rule 119
	'.'            reduce using rule 119
	'/'            reduce using rule 119
	'<'            reduce using rule 119
	'<='           reduce using rule 119
	'=='           reduce using rule 119
	'>'            reduce using rule 119
	'>='           reduce using rule 119
	'False'        reduce using rule 119
	'Pass'         reduce using rule 119
	'True'         reduce using rule 119
	'actions:'     reduce using rule 119
	'and'          reduce using rule 119
	'case'         reduce using rule 119
	'do'           reduce using rule 119
	'else'         reduce using rule 119
	'for'          reduce using rule 119
	'functions:'   reduce using rule 119
	'get'          reduce using rule 119
	'if'           reduce using rule 119
	'in'           reduce using rule 119
	'local'        reduce using rule 119
	'match'        reduce using rule 119
	'not'          reduce using rule 119
	'or'           reduce using rule 119
	'override'     reduce using rule 119
	'private'      reduce using rule 119
	'value'        reduce using rule 119
	'variables:'   reduce using rule 119
	'while'        reduce using rule 119
	'{'            reduce using rule 119
	'}'            reduce using rule 119
	L_charac       reduce using rule 119
	L_integ        reduce using rule 119
	L_quoted       reduce using rule 119
	L_UpperCaseIdentreduce using rule 119
	L_LowerCaseIdentreduce using rule 119


State 173

	FunctionArgument -> Expr .                          (rule 115)

	')'            reduce using rule 115
	','            reduce using rule 115


State 174

	ConstructorCall -> ClassIdent '(' ListFunctionArgument . ')'    (rule 117)

	')'            shift, and enter state 222


State 175

	ListFunctionArgument -> FunctionArgument .          (rule 113)
	ListFunctionArgument -> FunctionArgument . ',' ListFunctionArgument    (rule 114)

	')'            reduce using rule 113
	','            shift, and enter state 221


State 176

	DoExpr -> ClassIdent '#' FunctionCall .             (rule 122)

	'!='           reduce using rule 122
	'('            reduce using rule 122
	')'            reduce using rule 122
	'*'            reduce using rule 122
	'+'            reduce using rule 122
	'++'           reduce using rule 122
	','            reduce using rule 122
	'-'            reduce using rule 122
	'/'            reduce using rule 122
	'<'            reduce using rule 122
	'<='           reduce using rule 122
	'=='           reduce using rule 122
	'>'            reduce using rule 122
	'>='           reduce using rule 122
	'False'        reduce using rule 122
	'Pass'         reduce using rule 122
	'True'         reduce using rule 122
	'actions:'     reduce using rule 122
	'and'          reduce using rule 122
	'case'         reduce using rule 122
	'do'           reduce using rule 122
	'else'         reduce using rule 122
	'for'          reduce using rule 122
	'functions:'   reduce using rule 122
	'get'          reduce using rule 122
	'if'           reduce using rule 122
	'in'           reduce using rule 122
	'local'        reduce using rule 122
	'match'        reduce using rule 122
	'not'          reduce using rule 122
	'or'           reduce using rule 122
	'override'     reduce using rule 122
	'private'      reduce using rule 122
	'value'        reduce using rule 122
	'variables:'   reduce using rule 122
	'while'        reduce using rule 122
	'{'            reduce using rule 122
	'}'            reduce using rule 122
	L_charac       reduce using rule 122
	L_integ        reduce using rule 122
	L_quoted       reduce using rule 122
	L_UpperCaseIdentreduce using rule 122
	L_LowerCaseIdentreduce using rule 122


State 177

	GetExpr -> ValueIdent '.' FunctionCall .            (rule 118)

	'!='           reduce using rule 118
	'#'            reduce using rule 118
	'('            reduce using rule 118
	')'            reduce using rule 118
	'*'            reduce using rule 118
	'+'            reduce using rule 118
	'++'           reduce using rule 118
	','            reduce using rule 118
	'-'            reduce using rule 118
	'.'            reduce using rule 118
	'/'            reduce using rule 118
	'<'            reduce using rule 118
	'<='           reduce using rule 118
	'=='           reduce using rule 118
	'>'            reduce using rule 118
	'>='           reduce using rule 118
	'False'        reduce using rule 118
	'Pass'         reduce using rule 118
	'True'         reduce using rule 118
	'actions:'     reduce using rule 118
	'and'          reduce using rule 118
	'case'         reduce using rule 118
	'do'           reduce using rule 118
	'else'         reduce using rule 118
	'for'          reduce using rule 118
	'functions:'   reduce using rule 118
	'get'          reduce using rule 118
	'if'           reduce using rule 118
	'in'           reduce using rule 118
	'local'        reduce using rule 118
	'match'        reduce using rule 118
	'not'          reduce using rule 118
	'or'           reduce using rule 118
	'override'     reduce using rule 118
	'private'      reduce using rule 118
	'value'        reduce using rule 118
	'variables:'   reduce using rule 118
	'while'        reduce using rule 118
	'{'            reduce using rule 118
	'}'            reduce using rule 118
	L_charac       reduce using rule 118
	L_integ        reduce using rule 118
	L_quoted       reduce using rule 118
	L_UpperCaseIdentreduce using rule 118
	L_LowerCaseIdentreduce using rule 118


State 178

	DoExpr -> ValueIdent '#' FunctionCall .             (rule 121)

	'!='           reduce using rule 121
	'('            reduce using rule 121
	')'            reduce using rule 121
	'*'            reduce using rule 121
	'+'            reduce using rule 121
	'++'           reduce using rule 121
	','            reduce using rule 121
	'-'            reduce using rule 121
	'/'            reduce using rule 121
	'<'            reduce using rule 121
	'<='           reduce using rule 121
	'=='           reduce using rule 121
	'>'            reduce using rule 121
	'>='           reduce using rule 121
	'False'        reduce using rule 121
	'Pass'         reduce using rule 121
	'True'         reduce using rule 121
	'actions:'     reduce using rule 121
	'and'          reduce using rule 121
	'case'         reduce using rule 121
	'do'           reduce using rule 121
	'else'         reduce using rule 121
	'for'          reduce using rule 121
	'functions:'   reduce using rule 121
	'get'          reduce using rule 121
	'if'           reduce using rule 121
	'in'           reduce using rule 121
	'local'        reduce using rule 121
	'match'        reduce using rule 121
	'not'          reduce using rule 121
	'or'           reduce using rule 121
	'override'     reduce using rule 121
	'private'      reduce using rule 121
	'value'        reduce using rule 121
	'variables:'   reduce using rule 121
	'while'        reduce using rule 121
	'{'            reduce using rule 121
	'}'            reduce using rule 121
	L_charac       reduce using rule 121
	L_integ        reduce using rule 121
	L_quoted       reduce using rule 121
	L_UpperCaseIdentreduce using rule 121
	L_LowerCaseIdentreduce using rule 121


State 179

	Expr -> Expr1 BooleanOperator Expr .                (rule 71)

	'!='           reduce using rule 71
	'('            reduce using rule 71
	')'            reduce using rule 71
	'*'            reduce using rule 71
	'+'            reduce using rule 71
	'++'           reduce using rule 71
	','            reduce using rule 71
	'-'            reduce using rule 71
	'/'            reduce using rule 71
	'<'            reduce using rule 71
	'<='           reduce using rule 71
	'=='           reduce using rule 71
	'>'            reduce using rule 71
	'>='           reduce using rule 71
	'False'        reduce using rule 71
	'Pass'         reduce using rule 71
	'True'         reduce using rule 71
	'actions:'     reduce using rule 71
	'and'          reduce using rule 71
	'case'         reduce using rule 71
	'do'           reduce using rule 71
	'else'         reduce using rule 71
	'for'          reduce using rule 71
	'functions:'   reduce using rule 71
	'get'          reduce using rule 71
	'if'           reduce using rule 71
	'in'           reduce using rule 71
	'local'        reduce using rule 71
	'match'        reduce using rule 71
	'not'          reduce using rule 71
	'or'           reduce using rule 71
	'override'     reduce using rule 71
	'private'      reduce using rule 71
	'value'        reduce using rule 71
	'variables:'   reduce using rule 71
	'while'        reduce using rule 71
	'{'            reduce using rule 71
	'}'            reduce using rule 71
	L_charac       reduce using rule 71
	L_integ        reduce using rule 71
	L_quoted       reduce using rule 71
	L_UpperCaseIdentreduce using rule 71
	L_LowerCaseIdentreduce using rule 71


State 180

	Expr1 -> Expr1 RelationalOperator Expr2 .           (rule 73)
	Expr2 -> Expr2 . '+' Expr3                          (rule 75)
	Expr2 -> Expr2 . '-' Expr3                          (rule 76)
	Expr2 -> Expr2 . '++' Expr3                         (rule 77)

	'!='           reduce using rule 73
	'('            reduce using rule 73
	')'            reduce using rule 73
	'*'            reduce using rule 73
	'+'            shift, and enter state 150
			(reduce using rule 73)

	'++'           shift, and enter state 151
			(reduce using rule 73)

	','            reduce using rule 73
	'-'            shift, and enter state 152
			(reduce using rule 73)

	'/'            reduce using rule 73
	'<'            reduce using rule 73
	'<='           reduce using rule 73
	'=='           reduce using rule 73
	'>'            reduce using rule 73
	'>='           reduce using rule 73
	'False'        reduce using rule 73
	'Pass'         reduce using rule 73
	'True'         reduce using rule 73
	'actions:'     reduce using rule 73
	'and'          reduce using rule 73
	'case'         reduce using rule 73
	'do'           reduce using rule 73
	'else'         reduce using rule 73
	'for'          reduce using rule 73
	'functions:'   reduce using rule 73
	'get'          reduce using rule 73
	'if'           reduce using rule 73
	'in'           reduce using rule 73
	'local'        reduce using rule 73
	'match'        reduce using rule 73
	'not'          reduce using rule 73
	'or'           reduce using rule 73
	'override'     reduce using rule 73
	'private'      reduce using rule 73
	'value'        reduce using rule 73
	'variables:'   reduce using rule 73
	'while'        reduce using rule 73
	'{'            reduce using rule 73
	'}'            reduce using rule 73
	L_charac       reduce using rule 73
	L_integ        reduce using rule 73
	L_quoted       reduce using rule 73
	L_UpperCaseIdentreduce using rule 73
	L_LowerCaseIdentreduce using rule 73


State 181

	Expr2 -> Expr2 '-' Expr3 .                          (rule 76)
	Expr3 -> Expr3 . '*' Expr4                          (rule 79)
	Expr3 -> Expr3 . '/' Expr4                          (rule 80)

	'!='           reduce using rule 76
	'('            reduce using rule 76
	')'            reduce using rule 76
	'*'            shift, and enter state 148
			(reduce using rule 76)

	'+'            reduce using rule 76
	'++'           reduce using rule 76
	','            reduce using rule 76
	'-'            reduce using rule 76
	'/'            shift, and enter state 149
			(reduce using rule 76)

	'<'            reduce using rule 76
	'<='           reduce using rule 76
	'=='           reduce using rule 76
	'>'            reduce using rule 76
	'>='           reduce using rule 76
	'False'        reduce using rule 76
	'Pass'         reduce using rule 76
	'True'         reduce using rule 76
	'actions:'     reduce using rule 76
	'and'          reduce using rule 76
	'case'         reduce using rule 76
	'do'           reduce using rule 76
	'else'         reduce using rule 76
	'for'          reduce using rule 76
	'functions:'   reduce using rule 76
	'get'          reduce using rule 76
	'if'           reduce using rule 76
	'in'           reduce using rule 76
	'local'        reduce using rule 76
	'match'        reduce using rule 76
	'not'          reduce using rule 76
	'or'           reduce using rule 76
	'override'     reduce using rule 76
	'private'      reduce using rule 76
	'value'        reduce using rule 76
	'variables:'   reduce using rule 76
	'while'        reduce using rule 76
	'{'            reduce using rule 76
	'}'            reduce using rule 76
	L_charac       reduce using rule 76
	L_integ        reduce using rule 76
	L_quoted       reduce using rule 76
	L_UpperCaseIdentreduce using rule 76
	L_LowerCaseIdentreduce using rule 76


State 182

	Expr2 -> Expr2 '++' Expr3 .                         (rule 77)
	Expr3 -> Expr3 . '*' Expr4                          (rule 79)
	Expr3 -> Expr3 . '/' Expr4                          (rule 80)

	'!='           reduce using rule 77
	'('            reduce using rule 77
	')'            reduce using rule 77
	'*'            shift, and enter state 148
			(reduce using rule 77)

	'+'            reduce using rule 77
	'++'           reduce using rule 77
	','            reduce using rule 77
	'-'            reduce using rule 77
	'/'            shift, and enter state 149
			(reduce using rule 77)

	'<'            reduce using rule 77
	'<='           reduce using rule 77
	'=='           reduce using rule 77
	'>'            reduce using rule 77
	'>='           reduce using rule 77
	'False'        reduce using rule 77
	'Pass'         reduce using rule 77
	'True'         reduce using rule 77
	'actions:'     reduce using rule 77
	'and'          reduce using rule 77
	'case'         reduce using rule 77
	'do'           reduce using rule 77
	'else'         reduce using rule 77
	'for'          reduce using rule 77
	'functions:'   reduce using rule 77
	'get'          reduce using rule 77
	'if'           reduce using rule 77
	'in'           reduce using rule 77
	'local'        reduce using rule 77
	'match'        reduce using rule 77
	'not'          reduce using rule 77
	'or'           reduce using rule 77
	'override'     reduce using rule 77
	'private'      reduce using rule 77
	'value'        reduce using rule 77
	'variables:'   reduce using rule 77
	'while'        reduce using rule 77
	'{'            reduce using rule 77
	'}'            reduce using rule 77
	L_charac       reduce using rule 77
	L_integ        reduce using rule 77
	L_quoted       reduce using rule 77
	L_UpperCaseIdentreduce using rule 77
	L_LowerCaseIdentreduce using rule 77


State 183

	Expr2 -> Expr2 '+' Expr3 .                          (rule 75)
	Expr3 -> Expr3 . '*' Expr4                          (rule 79)
	Expr3 -> Expr3 . '/' Expr4                          (rule 80)

	'!='           reduce using rule 75
	'('            reduce using rule 75
	')'            reduce using rule 75
	'*'            shift, and enter state 148
			(reduce using rule 75)

	'+'            reduce using rule 75
	'++'           reduce using rule 75
	','            reduce using rule 75
	'-'            reduce using rule 75
	'/'            shift, and enter state 149
			(reduce using rule 75)

	'<'            reduce using rule 75
	'<='           reduce using rule 75
	'=='           reduce using rule 75
	'>'            reduce using rule 75
	'>='           reduce using rule 75
	'False'        reduce using rule 75
	'Pass'         reduce using rule 75
	'True'         reduce using rule 75
	'actions:'     reduce using rule 75
	'and'          reduce using rule 75
	'case'         reduce using rule 75
	'do'           reduce using rule 75
	'else'         reduce using rule 75
	'for'          reduce using rule 75
	'functions:'   reduce using rule 75
	'get'          reduce using rule 75
	'if'           reduce using rule 75
	'in'           reduce using rule 75
	'local'        reduce using rule 75
	'match'        reduce using rule 75
	'not'          reduce using rule 75
	'or'           reduce using rule 75
	'override'     reduce using rule 75
	'private'      reduce using rule 75
	'value'        reduce using rule 75
	'variables:'   reduce using rule 75
	'while'        reduce using rule 75
	'{'            reduce using rule 75
	'}'            reduce using rule 75
	L_charac       reduce using rule 75
	L_integ        reduce using rule 75
	L_quoted       reduce using rule 75
	L_UpperCaseIdentreduce using rule 75
	L_LowerCaseIdentreduce using rule 75


State 184

	Expr3 -> Expr3 '/' Expr4 .                          (rule 80)

	'!='           reduce using rule 80
	'('            reduce using rule 80
	')'            reduce using rule 80
	'*'            reduce using rule 80
	'+'            reduce using rule 80
	'++'           reduce using rule 80
	','            reduce using rule 80
	'-'            reduce using rule 80
	'/'            reduce using rule 80
	'<'            reduce using rule 80
	'<='           reduce using rule 80
	'=='           reduce using rule 80
	'>'            reduce using rule 80
	'>='           reduce using rule 80
	'False'        reduce using rule 80
	'Pass'         reduce using rule 80
	'True'         reduce using rule 80
	'actions:'     reduce using rule 80
	'and'          reduce using rule 80
	'case'         reduce using rule 80
	'do'           reduce using rule 80
	'else'         reduce using rule 80
	'for'          reduce using rule 80
	'functions:'   reduce using rule 80
	'get'          reduce using rule 80
	'if'           reduce using rule 80
	'in'           reduce using rule 80
	'local'        reduce using rule 80
	'match'        reduce using rule 80
	'not'          reduce using rule 80
	'or'           reduce using rule 80
	'override'     reduce using rule 80
	'private'      reduce using rule 80
	'value'        reduce using rule 80
	'variables:'   reduce using rule 80
	'while'        reduce using rule 80
	'{'            reduce using rule 80
	'}'            reduce using rule 80
	L_charac       reduce using rule 80
	L_integ        reduce using rule 80
	L_quoted       reduce using rule 80
	L_UpperCaseIdentreduce using rule 80
	L_LowerCaseIdentreduce using rule 80


State 185

	Expr3 -> Expr3 '*' Expr4 .                          (rule 79)

	'!='           reduce using rule 79
	'('            reduce using rule 79
	')'            reduce using rule 79
	'*'            reduce using rule 79
	'+'            reduce using rule 79
	'++'           reduce using rule 79
	','            reduce using rule 79
	'-'            reduce using rule 79
	'/'            reduce using rule 79
	'<'            reduce using rule 79
	'<='           reduce using rule 79
	'=='           reduce using rule 79
	'>'            reduce using rule 79
	'>='           reduce using rule 79
	'False'        reduce using rule 79
	'Pass'         reduce using rule 79
	'True'         reduce using rule 79
	'actions:'     reduce using rule 79
	'and'          reduce using rule 79
	'case'         reduce using rule 79
	'do'           reduce using rule 79
	'else'         reduce using rule 79
	'for'          reduce using rule 79
	'functions:'   reduce using rule 79
	'get'          reduce using rule 79
	'if'           reduce using rule 79
	'in'           reduce using rule 79
	'local'        reduce using rule 79
	'match'        reduce using rule 79
	'not'          reduce using rule 79
	'or'           reduce using rule 79
	'override'     reduce using rule 79
	'private'      reduce using rule 79
	'value'        reduce using rule 79
	'variables:'   reduce using rule 79
	'while'        reduce using rule 79
	'{'            reduce using rule 79
	'}'            reduce using rule 79
	L_charac       reduce using rule 79
	L_integ        reduce using rule 79
	L_quoted       reduce using rule 79
	L_UpperCaseIdentreduce using rule 79
	L_LowerCaseIdentreduce using rule 79


State 186

	GetExpr -> GetExpr '.' FunctionCall .               (rule 120)

	'!='           reduce using rule 120
	'#'            reduce using rule 120
	'('            reduce using rule 120
	')'            reduce using rule 120
	'*'            reduce using rule 120
	'+'            reduce using rule 120
	'++'           reduce using rule 120
	','            reduce using rule 120
	'-'            reduce using rule 120
	'.'            reduce using rule 120
	'/'            reduce using rule 120
	'<'            reduce using rule 120
	'<='           reduce using rule 120
	'=='           reduce using rule 120
	'>'            reduce using rule 120
	'>='           reduce using rule 120
	'False'        reduce using rule 120
	'Pass'         reduce using rule 120
	'True'         reduce using rule 120
	'actions:'     reduce using rule 120
	'and'          reduce using rule 120
	'case'         reduce using rule 120
	'do'           reduce using rule 120
	'else'         reduce using rule 120
	'for'          reduce using rule 120
	'functions:'   reduce using rule 120
	'get'          reduce using rule 120
	'if'           reduce using rule 120
	'in'           reduce using rule 120
	'local'        reduce using rule 120
	'match'        reduce using rule 120
	'not'          reduce using rule 120
	'or'           reduce using rule 120
	'override'     reduce using rule 120
	'private'      reduce using rule 120
	'value'        reduce using rule 120
	'variables:'   reduce using rule 120
	'while'        reduce using rule 120
	'{'            reduce using rule 120
	'}'            reduce using rule 120
	L_charac       reduce using rule 120
	L_integ        reduce using rule 120
	L_quoted       reduce using rule 120
	L_UpperCaseIdentreduce using rule 120
	L_LowerCaseIdentreduce using rule 120


State 187

	DoExpr -> GetExpr '#' FunctionCall .                (rule 123)

	'!='           reduce using rule 123
	'('            reduce using rule 123
	')'            reduce using rule 123
	'*'            reduce using rule 123
	'+'            reduce using rule 123
	'++'           reduce using rule 123
	','            reduce using rule 123
	'-'            reduce using rule 123
	'/'            reduce using rule 123
	'<'            reduce using rule 123
	'<='           reduce using rule 123
	'=='           reduce using rule 123
	'>'            reduce using rule 123
	'>='           reduce using rule 123
	'False'        reduce using rule 123
	'Pass'         reduce using rule 123
	'True'         reduce using rule 123
	'actions:'     reduce using rule 123
	'and'          reduce using rule 123
	'case'         reduce using rule 123
	'do'           reduce using rule 123
	'else'         reduce using rule 123
	'for'          reduce using rule 123
	'functions:'   reduce using rule 123
	'get'          reduce using rule 123
	'if'           reduce using rule 123
	'in'           reduce using rule 123
	'local'        reduce using rule 123
	'match'        reduce using rule 123
	'not'          reduce using rule 123
	'or'           reduce using rule 123
	'override'     reduce using rule 123
	'private'      reduce using rule 123
	'value'        reduce using rule 123
	'variables:'   reduce using rule 123
	'while'        reduce using rule 123
	'{'            reduce using rule 123
	'}'            reduce using rule 123
	L_charac       reduce using rule 123
	L_integ        reduce using rule 123
	L_quoted       reduce using rule 123
	L_UpperCaseIdentreduce using rule 123
	L_LowerCaseIdentreduce using rule 123


State 188

	Expr5 -> '(' Expr ')' .                             (rule 84)

	'!='           reduce using rule 84
	'('            reduce using rule 84
	')'            reduce using rule 84
	'*'            reduce using rule 84
	'+'            reduce using rule 84
	'++'           reduce using rule 84
	','            reduce using rule 84
	'-'            reduce using rule 84
	'/'            reduce using rule 84
	'<'            reduce using rule 84
	'<='           reduce using rule 84
	'=='           reduce using rule 84
	'>'            reduce using rule 84
	'>='           reduce using rule 84
	'False'        reduce using rule 84
	'Pass'         reduce using rule 84
	'True'         reduce using rule 84
	'actions:'     reduce using rule 84
	'and'          reduce using rule 84
	'case'         reduce using rule 84
	'do'           reduce using rule 84
	'else'         reduce using rule 84
	'for'          reduce using rule 84
	'functions:'   reduce using rule 84
	'get'          reduce using rule 84
	'if'           reduce using rule 84
	'in'           reduce using rule 84
	'local'        reduce using rule 84
	'match'        reduce using rule 84
	'not'          reduce using rule 84
	'or'           reduce using rule 84
	'override'     reduce using rule 84
	'private'      reduce using rule 84
	'value'        reduce using rule 84
	'variables:'   reduce using rule 84
	'while'        reduce using rule 84
	'{'            reduce using rule 84
	'}'            reduce using rule 84
	L_charac       reduce using rule 84
	L_integ        reduce using rule 84
	L_quoted       reduce using rule 84
	L_UpperCaseIdentreduce using rule 84
	L_LowerCaseIdentreduce using rule 84


State 189

	LambdaAction -> 'do' '(' ListValueDecl . ')' '->' Expr    (rule 108)
	LambdaAction -> 'do' '(' ListValueDecl . ')' '->' '{' Expr '}'    (rule 109)

	')'            shift, and enter state 220


State 190

	ImperativeControlFlow -> 'for' '(' ValueDecl . 'in' Expr ')' '{' ListExpr '}'    (rule 125)

	'in'           shift, and enter state 219


State 191

	LambdaFunction -> 'get' '(' ListValueDecl . ')' '->' Expr    (rule 106)
	LambdaFunction -> 'get' '(' ListValueDecl . ')' '->' '{' Expr '}'    (rule 107)

	')'            shift, and enter state 218


State 192

	ImperativeControlFlow -> 'if' '(' Expr . ')' '{' ListExpr '}' OptionalElseBranch    (rule 126)
	FunctionalControlFlow -> 'if' '(' Expr . ')' ThenBranch ElseBranch    (rule 129)

	')'            shift, and enter state 217


State 193

	Expr5 -> 'local' '.' FunctionCall .                 (rule 90)

	'!='           reduce using rule 90
	'('            reduce using rule 90
	')'            reduce using rule 90
	'*'            reduce using rule 90
	'+'            reduce using rule 90
	'++'           reduce using rule 90
	','            reduce using rule 90
	'-'            reduce using rule 90
	'/'            reduce using rule 90
	'<'            reduce using rule 90
	'<='           reduce using rule 90
	'=='           reduce using rule 90
	'>'            reduce using rule 90
	'>='           reduce using rule 90
	'False'        reduce using rule 90
	'Pass'         reduce using rule 90
	'True'         reduce using rule 90
	'actions:'     reduce using rule 90
	'and'          reduce using rule 90
	'case'         reduce using rule 90
	'do'           reduce using rule 90
	'else'         reduce using rule 90
	'for'          reduce using rule 90
	'functions:'   reduce using rule 90
	'get'          reduce using rule 90
	'if'           reduce using rule 90
	'in'           reduce using rule 90
	'local'        reduce using rule 90
	'match'        reduce using rule 90
	'not'          reduce using rule 90
	'or'           reduce using rule 90
	'override'     reduce using rule 90
	'private'      reduce using rule 90
	'value'        reduce using rule 90
	'variables:'   reduce using rule 90
	'while'        reduce using rule 90
	'{'            reduce using rule 90
	'}'            reduce using rule 90
	L_charac       reduce using rule 90
	L_integ        reduce using rule 90
	L_quoted       reduce using rule 90
	L_UpperCaseIdentreduce using rule 90
	L_LowerCaseIdentreduce using rule 90


State 194

	Expr5 -> 'local' '#' FunctionCall .                 (rule 91)

	'!='           reduce using rule 91
	'('            reduce using rule 91
	')'            reduce using rule 91
	'*'            reduce using rule 91
	'+'            reduce using rule 91
	'++'           reduce using rule 91
	','            reduce using rule 91
	'-'            reduce using rule 91
	'/'            reduce using rule 91
	'<'            reduce using rule 91
	'<='           reduce using rule 91
	'=='           reduce using rule 91
	'>'            reduce using rule 91
	'>='           reduce using rule 91
	'False'        reduce using rule 91
	'Pass'         reduce using rule 91
	'True'         reduce using rule 91
	'actions:'     reduce using rule 91
	'and'          reduce using rule 91
	'case'         reduce using rule 91
	'do'           reduce using rule 91
	'else'         reduce using rule 91
	'for'          reduce using rule 91
	'functions:'   reduce using rule 91
	'get'          reduce using rule 91
	'if'           reduce using rule 91
	'in'           reduce using rule 91
	'local'        reduce using rule 91
	'match'        reduce using rule 91
	'not'          reduce using rule 91
	'or'           reduce using rule 91
	'override'     reduce using rule 91
	'private'      reduce using rule 91
	'value'        reduce using rule 91
	'variables:'   reduce using rule 91
	'while'        reduce using rule 91
	'{'            reduce using rule 91
	'}'            reduce using rule 91
	L_charac       reduce using rule 91
	L_integ        reduce using rule 91
	L_quoted       reduce using rule 91
	L_UpperCaseIdentreduce using rule 91
	L_LowerCaseIdentreduce using rule 91


State 195

	FunctionalControlFlow -> 'match' Expr '{' . ListMatchCase '}'    (rule 130)

	'case'         shift, and enter state 216
	'}'            reduce using rule 135

	ListMatchCase  goto state 214
	MatchCase      goto state 215

State 196

	ImperativeControlFlow -> 'while' '(' Expr . ')' '{' ListExpr '}'    (rule 124)

	')'            shift, and enter state 213


State 197

	MethodType -> '(' ListValueDecl ')' '->' . ValueType    (rule 49)

	'do'           shift, and enter state 50
	'get'          shift, and enter state 51
	L_UpperCaseIdentshift, and enter state 16

	UpperCaseIdent goto state 14
	ClassIdent     goto state 48
	ValueType      goto state 212

State 198

	FunctionDecl -> 'private' FunctionIdent ':' MethodType . '=' FunctionBody    (rule 54)

	'='            shift, and enter state 211


State 199

	FunctionDecl -> 'override' FunctionIdent ':' MethodType . '=' FunctionBody    (rule 52)

	'='            shift, and enter state 210


State 200

	FunctionDecl -> FunctionIdent ':' MethodType '=' . FunctionBody    (rule 53)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 209
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	FunctionBody   goto state 207
	Expr           goto state 208
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 201

	ActionDecl -> FunctionIdent ':' MethodType . '=' ActionBody    (rule 64)

	'='            shift, and enter state 206


State 202

	ActionDecl -> 'override' FunctionIdent ':' . MethodType '=' ActionBody    (rule 63)

	'('            shift, and enter state 70

	MethodType     goto state 205

State 203

	ActionDecl -> 'private' FunctionIdent ':' . MethodType '=' ActionBody    (rule 65)

	'('            shift, and enter state 70

	MethodType     goto state 204

State 204

	ActionDecl -> 'private' FunctionIdent ':' MethodType . '=' ActionBody    (rule 65)

	'='            shift, and enter state 244


State 205

	ActionDecl -> 'override' FunctionIdent ':' MethodType . '=' ActionBody    (rule 63)

	'='            shift, and enter state 243


State 206

	ActionDecl -> FunctionIdent ':' MethodType '=' . ActionBody    (rule 64)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 242
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	ActionBody     goto state 240
	Expr           goto state 241
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 207

	FunctionDecl -> FunctionIdent ':' MethodType '=' FunctionBody .    (rule 53)

	'override'     reduce using rule 53
	'private'      reduce using rule 53
	'}'            reduce using rule 53
	L_LowerCaseIdentreduce using rule 53


State 208

	FunctionBody -> Expr .                              (rule 55)

	'override'     reduce using rule 55
	'private'      reduce using rule 55
	'}'            reduce using rule 55
	L_LowerCaseIdentreduce using rule 55


State 209

	FunctionBody -> '{' . Expr '}' WithValues           (rule 56)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 239
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 210

	FunctionDecl -> 'override' FunctionIdent ':' MethodType '=' . FunctionBody    (rule 52)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 209
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	FunctionBody   goto state 238
	Expr           goto state 208
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 211

	FunctionDecl -> 'private' FunctionIdent ':' MethodType '=' . FunctionBody    (rule 54)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 209
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	FunctionBody   goto state 237
	Expr           goto state 208
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 212

	MethodType -> '(' ListValueDecl ')' '->' ValueType .    (rule 49)

	'!='           reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'*'            reduce using rule 49
	'+'            reduce using rule 49
	'++'           reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'/'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'='            reduce using rule 49
	'=='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'False'        reduce using rule 49
	'Pass'         reduce using rule 49
	'True'         reduce using rule 49
	'actions:'     reduce using rule 49
	'and'          reduce using rule 49
	'case'         reduce using rule 49
	'do'           reduce using rule 49
	'else'         reduce using rule 49
	'for'          reduce using rule 49
	'functions:'   reduce using rule 49
	'get'          reduce using rule 49
	'if'           reduce using rule 49
	'in'           reduce using rule 49
	'local'        reduce using rule 49
	'match'        reduce using rule 49
	'not'          reduce using rule 49
	'or'           reduce using rule 49
	'override'     reduce using rule 49
	'private'      reduce using rule 49
	'value'        reduce using rule 49
	'variables:'   reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'}'            reduce using rule 49
	L_charac       reduce using rule 49
	L_integ        reduce using rule 49
	L_quoted       reduce using rule 49
	L_UpperCaseIdentreduce using rule 49
	L_LowerCaseIdentreduce using rule 49


State 213

	ImperativeControlFlow -> 'while' '(' Expr ')' . '{' ListExpr '}'    (rule 124)

	'{'            shift, and enter state 236


State 214

	FunctionalControlFlow -> 'match' Expr '{' ListMatchCase . '}'    (rule 130)

	'}'            shift, and enter state 235


State 215

	ListMatchCase -> MatchCase . ListMatchCase          (rule 136)

	'case'         shift, and enter state 216
	'}'            reduce using rule 135

	ListMatchCase  goto state 234
	MatchCase      goto state 215

State 216

	MatchCase -> 'case' . Pattern '->' Expr             (rule 137)

	L_UpperCaseIdentshift, and enter state 16

	UpperCaseIdent goto state 14
	ClassIdent     goto state 232
	Pattern        goto state 233

State 217

	ImperativeControlFlow -> 'if' '(' Expr ')' . '{' ListExpr '}' OptionalElseBranch    (rule 126)
	FunctionalControlFlow -> 'if' '(' Expr ')' . ThenBranch ElseBranch    (rule 129)

	'then'         shift, and enter state 230
	'{'            shift, and enter state 231

	ThenBranch     goto state 229

State 218

	LambdaFunction -> 'get' '(' ListValueDecl ')' . '->' Expr    (rule 106)
	LambdaFunction -> 'get' '(' ListValueDecl ')' . '->' '{' Expr '}'    (rule 107)

	'->'           shift, and enter state 228


State 219

	ImperativeControlFlow -> 'for' '(' ValueDecl 'in' . Expr ')' '{' ListExpr '}'    (rule 125)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 227
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 220

	LambdaAction -> 'do' '(' ListValueDecl ')' . '->' Expr    (rule 108)
	LambdaAction -> 'do' '(' ListValueDecl ')' . '->' '{' Expr '}'    (rule 109)

	'->'           shift, and enter state 226


State 221

	ListFunctionArgument -> FunctionArgument ',' . ListFunctionArgument    (rule 114)

	'('            shift, and enter state 98
	')'            reduce using rule 112
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 173
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ListFunctionArgumentgoto state 225
	FunctionArgumentgoto state 175
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 222

	ConstructorCall -> ClassIdent '(' ListFunctionArgument ')' .    (rule 117)

	'!='           reduce using rule 117
	'('            reduce using rule 117
	')'            reduce using rule 117
	'*'            reduce using rule 117
	'+'            reduce using rule 117
	'++'           reduce using rule 117
	','            reduce using rule 117
	'-'            reduce using rule 117
	'/'            reduce using rule 117
	'<'            reduce using rule 117
	'<='           reduce using rule 117
	'=='           reduce using rule 117
	'>'            reduce using rule 117
	'>='           reduce using rule 117
	'False'        reduce using rule 117
	'Pass'         reduce using rule 117
	'True'         reduce using rule 117
	'actions:'     reduce using rule 117
	'and'          reduce using rule 117
	'case'         reduce using rule 117
	'do'           reduce using rule 117
	'else'         reduce using rule 117
	'for'          reduce using rule 117
	'functions:'   reduce using rule 117
	'get'          reduce using rule 117
	'if'           reduce using rule 117
	'in'           reduce using rule 117
	'local'        reduce using rule 117
	'match'        reduce using rule 117
	'not'          reduce using rule 117
	'or'           reduce using rule 117
	'override'     reduce using rule 117
	'private'      reduce using rule 117
	'value'        reduce using rule 117
	'variables:'   reduce using rule 117
	'while'        reduce using rule 117
	'{'            reduce using rule 117
	'}'            reduce using rule 117
	L_charac       reduce using rule 117
	L_integ        reduce using rule 117
	L_quoted       reduce using rule 117
	L_UpperCaseIdentreduce using rule 117
	L_LowerCaseIdentreduce using rule 117


State 223

	FunctionCall -> FunctionIdent '(' . ListFunctionArgument ')'    (rule 111)

	'('            shift, and enter state 98
	')'            reduce using rule 112
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 173
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ListFunctionArgumentgoto state 224
	FunctionArgumentgoto state 175
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 224

	FunctionCall -> FunctionIdent '(' ListFunctionArgument . ')'    (rule 111)

	')'            shift, and enter state 262


State 225

	ListFunctionArgument -> FunctionArgument ',' ListFunctionArgument .    (rule 114)

	')'            reduce using rule 114


State 226

	LambdaAction -> 'do' '(' ListValueDecl ')' '->' . Expr    (rule 108)
	LambdaAction -> 'do' '(' ListValueDecl ')' '->' . '{' Expr '}'    (rule 109)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 261
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 260
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 227

	ImperativeControlFlow -> 'for' '(' ValueDecl 'in' Expr . ')' '{' ListExpr '}'    (rule 125)

	')'            shift, and enter state 259


State 228

	LambdaFunction -> 'get' '(' ListValueDecl ')' '->' . Expr    (rule 106)
	LambdaFunction -> 'get' '(' ListValueDecl ')' '->' . '{' Expr '}'    (rule 107)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 258
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 257
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 229

	FunctionalControlFlow -> 'if' '(' Expr ')' ThenBranch . ElseBranch    (rule 129)

	'else'         shift, and enter state 256

	ElseBranch     goto state 255

State 230

	ThenBranch -> 'then' . Expr                         (rule 131)
	ThenBranch -> 'then' . '{' Expr '}'                 (rule 132)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 254
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 253
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 231

	ImperativeControlFlow -> 'if' '(' Expr ')' '{' . ListExpr '}' OptionalElseBranch    (rule 126)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'}'            reduce using rule 68
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	ListExpr       goto state 252
	Expr           goto state 248
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 232

	Pattern -> ClassIdent .                             (rule 138)

	'->'           reduce using rule 138


State 233

	MatchCase -> 'case' Pattern . '->' Expr             (rule 137)

	'->'           shift, and enter state 251


State 234

	ListMatchCase -> MatchCase ListMatchCase .          (rule 136)

	'}'            reduce using rule 136


State 235

	FunctionalControlFlow -> 'match' Expr '{' ListMatchCase '}' .    (rule 130)

	'!='           reduce using rule 130
	'('            reduce using rule 130
	')'            reduce using rule 130
	'*'            reduce using rule 130
	'+'            reduce using rule 130
	'++'           reduce using rule 130
	','            reduce using rule 130
	'-'            reduce using rule 130
	'/'            reduce using rule 130
	'<'            reduce using rule 130
	'<='           reduce using rule 130
	'=='           reduce using rule 130
	'>'            reduce using rule 130
	'>='           reduce using rule 130
	'False'        reduce using rule 130
	'Pass'         reduce using rule 130
	'True'         reduce using rule 130
	'actions:'     reduce using rule 130
	'and'          reduce using rule 130
	'case'         reduce using rule 130
	'do'           reduce using rule 130
	'else'         reduce using rule 130
	'for'          reduce using rule 130
	'functions:'   reduce using rule 130
	'get'          reduce using rule 130
	'if'           reduce using rule 130
	'in'           reduce using rule 130
	'local'        reduce using rule 130
	'match'        reduce using rule 130
	'not'          reduce using rule 130
	'or'           reduce using rule 130
	'override'     reduce using rule 130
	'private'      reduce using rule 130
	'value'        reduce using rule 130
	'variables:'   reduce using rule 130
	'while'        reduce using rule 130
	'{'            reduce using rule 130
	'}'            reduce using rule 130
	L_charac       reduce using rule 130
	L_integ        reduce using rule 130
	L_quoted       reduce using rule 130
	L_UpperCaseIdentreduce using rule 130
	L_LowerCaseIdentreduce using rule 130


State 236

	ImperativeControlFlow -> 'while' '(' Expr ')' '{' . ListExpr '}'    (rule 124)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'}'            reduce using rule 68
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	ListExpr       goto state 250
	Expr           goto state 248
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 237

	FunctionDecl -> 'private' FunctionIdent ':' MethodType '=' FunctionBody .    (rule 54)

	'override'     reduce using rule 54
	'private'      reduce using rule 54
	'}'            reduce using rule 54
	L_LowerCaseIdentreduce using rule 54


State 238

	FunctionDecl -> 'override' FunctionIdent ':' MethodType '=' FunctionBody .    (rule 52)

	'override'     reduce using rule 52
	'private'      reduce using rule 52
	'}'            reduce using rule 52
	L_LowerCaseIdentreduce using rule 52


State 239

	FunctionBody -> '{' Expr . '}' WithValues           (rule 56)

	'}'            shift, and enter state 249


State 240

	ActionDecl -> FunctionIdent ':' MethodType '=' ActionBody .    (rule 64)

	'override'     reduce using rule 64
	'private'      reduce using rule 64
	'}'            reduce using rule 64
	L_LowerCaseIdentreduce using rule 64


State 241

	ActionBody -> Expr .                                (rule 66)

	'override'     reduce using rule 66
	'private'      reduce using rule 66
	'}'            reduce using rule 66
	L_LowerCaseIdentreduce using rule 66


State 242

	ActionBody -> '{' . ListExpr '}'                    (rule 67)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'}'            reduce using rule 68
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	ListExpr       goto state 247
	Expr           goto state 248
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 243

	ActionDecl -> 'override' FunctionIdent ':' MethodType '=' . ActionBody    (rule 63)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 242
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	ActionBody     goto state 246
	Expr           goto state 241
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 244

	ActionDecl -> 'private' FunctionIdent ':' MethodType '=' . ActionBody    (rule 65)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 242
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	ActionBody     goto state 245
	Expr           goto state 241
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 245

	ActionDecl -> 'private' FunctionIdent ':' MethodType '=' ActionBody .    (rule 65)

	'override'     reduce using rule 65
	'private'      reduce using rule 65
	'}'            reduce using rule 65
	L_LowerCaseIdentreduce using rule 65


State 246

	ActionDecl -> 'override' FunctionIdent ':' MethodType '=' ActionBody .    (rule 63)

	'override'     reduce using rule 63
	'private'      reduce using rule 63
	'}'            reduce using rule 63
	L_LowerCaseIdentreduce using rule 63


State 247

	ActionBody -> '{' ListExpr . '}'                    (rule 67)

	'}'            shift, and enter state 275


State 248

	ListExpr -> Expr . ListExpr                         (rule 69)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'}'            reduce using rule 68
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	ListExpr       goto state 274
	Expr           goto state 248
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 249

	FunctionBody -> '{' Expr '}' . WithValues           (rule 56)

	'override'     reduce using rule 57
	'private'      reduce using rule 57
	'with'         shift, and enter state 273
	'}'            reduce using rule 57
	L_LowerCaseIdentreduce using rule 57

	WithValues     goto state 272

State 250

	ImperativeControlFlow -> 'while' '(' Expr ')' '{' ListExpr . '}'    (rule 124)

	'}'            shift, and enter state 271


State 251

	MatchCase -> 'case' Pattern '->' . Expr             (rule 137)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 270
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 252

	ImperativeControlFlow -> 'if' '(' Expr ')' '{' ListExpr . '}' OptionalElseBranch    (rule 126)

	'}'            shift, and enter state 269


State 253

	ThenBranch -> 'then' Expr .                         (rule 131)

	'else'         reduce using rule 131


State 254

	ThenBranch -> 'then' '{' . Expr '}'                 (rule 132)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 268
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 255

	FunctionalControlFlow -> 'if' '(' Expr ')' ThenBranch ElseBranch .    (rule 129)

	'!='           reduce using rule 129
	'('            reduce using rule 129
	')'            reduce using rule 129
	'*'            reduce using rule 129
	'+'            reduce using rule 129
	'++'           reduce using rule 129
	','            reduce using rule 129
	'-'            reduce using rule 129
	'/'            reduce using rule 129
	'<'            reduce using rule 129
	'<='           reduce using rule 129
	'=='           reduce using rule 129
	'>'            reduce using rule 129
	'>='           reduce using rule 129
	'False'        reduce using rule 129
	'Pass'         reduce using rule 129
	'True'         reduce using rule 129
	'actions:'     reduce using rule 129
	'and'          reduce using rule 129
	'case'         reduce using rule 129
	'do'           reduce using rule 129
	'else'         reduce using rule 129
	'for'          reduce using rule 129
	'functions:'   reduce using rule 129
	'get'          reduce using rule 129
	'if'           reduce using rule 129
	'in'           reduce using rule 129
	'local'        reduce using rule 129
	'match'        reduce using rule 129
	'not'          reduce using rule 129
	'or'           reduce using rule 129
	'override'     reduce using rule 129
	'private'      reduce using rule 129
	'value'        reduce using rule 129
	'variables:'   reduce using rule 129
	'while'        reduce using rule 129
	'{'            reduce using rule 129
	'}'            reduce using rule 129
	L_charac       reduce using rule 129
	L_integ        reduce using rule 129
	L_quoted       reduce using rule 129
	L_UpperCaseIdentreduce using rule 129
	L_LowerCaseIdentreduce using rule 129


State 256

	ElseBranch -> 'else' . Expr                         (rule 133)
	ElseBranch -> 'else' . '{' Expr '}'                 (rule 134)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'{'            shift, and enter state 267
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 266
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 257

	LambdaFunction -> 'get' '(' ListValueDecl ')' '->' Expr .    (rule 106)

	'!='           reduce using rule 106
	'('            reduce using rule 106
	')'            reduce using rule 106
	'*'            reduce using rule 106
	'+'            reduce using rule 106
	'++'           reduce using rule 106
	','            reduce using rule 106
	'-'            reduce using rule 106
	'/'            reduce using rule 106
	'<'            reduce using rule 106
	'<='           reduce using rule 106
	'=='           reduce using rule 106
	'>'            reduce using rule 106
	'>='           reduce using rule 106
	'False'        reduce using rule 106
	'Pass'         reduce using rule 106
	'True'         reduce using rule 106
	'actions:'     reduce using rule 106
	'and'          reduce using rule 106
	'case'         reduce using rule 106
	'do'           reduce using rule 106
	'else'         reduce using rule 106
	'for'          reduce using rule 106
	'functions:'   reduce using rule 106
	'get'          reduce using rule 106
	'if'           reduce using rule 106
	'in'           reduce using rule 106
	'local'        reduce using rule 106
	'match'        reduce using rule 106
	'not'          reduce using rule 106
	'or'           reduce using rule 106
	'override'     reduce using rule 106
	'private'      reduce using rule 106
	'value'        reduce using rule 106
	'variables:'   reduce using rule 106
	'while'        reduce using rule 106
	'{'            reduce using rule 106
	'}'            reduce using rule 106
	L_charac       reduce using rule 106
	L_integ        reduce using rule 106
	L_quoted       reduce using rule 106
	L_UpperCaseIdentreduce using rule 106
	L_LowerCaseIdentreduce using rule 106


State 258

	LambdaFunction -> 'get' '(' ListValueDecl ')' '->' '{' . Expr '}'    (rule 107)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 265
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 259

	ImperativeControlFlow -> 'for' '(' ValueDecl 'in' Expr ')' . '{' ListExpr '}'    (rule 125)

	'{'            shift, and enter state 264


State 260

	LambdaAction -> 'do' '(' ListValueDecl ')' '->' Expr .    (rule 108)

	'!='           reduce using rule 108
	'('            reduce using rule 108
	')'            reduce using rule 108
	'*'            reduce using rule 108
	'+'            reduce using rule 108
	'++'           reduce using rule 108
	','            reduce using rule 108
	'-'            reduce using rule 108
	'/'            reduce using rule 108
	'<'            reduce using rule 108
	'<='           reduce using rule 108
	'=='           reduce using rule 108
	'>'            reduce using rule 108
	'>='           reduce using rule 108
	'False'        reduce using rule 108
	'Pass'         reduce using rule 108
	'True'         reduce using rule 108
	'actions:'     reduce using rule 108
	'and'          reduce using rule 108
	'case'         reduce using rule 108
	'do'           reduce using rule 108
	'else'         reduce using rule 108
	'for'          reduce using rule 108
	'functions:'   reduce using rule 108
	'get'          reduce using rule 108
	'if'           reduce using rule 108
	'in'           reduce using rule 108
	'local'        reduce using rule 108
	'match'        reduce using rule 108
	'not'          reduce using rule 108
	'or'           reduce using rule 108
	'override'     reduce using rule 108
	'private'      reduce using rule 108
	'value'        reduce using rule 108
	'variables:'   reduce using rule 108
	'while'        reduce using rule 108
	'{'            reduce using rule 108
	'}'            reduce using rule 108
	L_charac       reduce using rule 108
	L_integ        reduce using rule 108
	L_quoted       reduce using rule 108
	L_UpperCaseIdentreduce using rule 108
	L_LowerCaseIdentreduce using rule 108


State 261

	LambdaAction -> 'do' '(' ListValueDecl ')' '->' '{' . Expr '}'    (rule 109)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 263
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 262

	FunctionCall -> FunctionIdent '(' ListFunctionArgument ')' .    (rule 111)

	'!='           reduce using rule 111
	'#'            reduce using rule 111
	'('            reduce using rule 111
	')'            reduce using rule 111
	'*'            reduce using rule 111
	'+'            reduce using rule 111
	'++'           reduce using rule 111
	','            reduce using rule 111
	'-'            reduce using rule 111
	'.'            reduce using rule 111
	'/'            reduce using rule 111
	'<'            reduce using rule 111
	'<='           reduce using rule 111
	'=='           reduce using rule 111
	'>'            reduce using rule 111
	'>='           reduce using rule 111
	'False'        reduce using rule 111
	'Pass'         reduce using rule 111
	'True'         reduce using rule 111
	'actions:'     reduce using rule 111
	'and'          reduce using rule 111
	'case'         reduce using rule 111
	'do'           reduce using rule 111
	'else'         reduce using rule 111
	'for'          reduce using rule 111
	'functions:'   reduce using rule 111
	'get'          reduce using rule 111
	'if'           reduce using rule 111
	'in'           reduce using rule 111
	'local'        reduce using rule 111
	'match'        reduce using rule 111
	'not'          reduce using rule 111
	'or'           reduce using rule 111
	'override'     reduce using rule 111
	'private'      reduce using rule 111
	'value'        reduce using rule 111
	'variables:'   reduce using rule 111
	'while'        reduce using rule 111
	'{'            reduce using rule 111
	'}'            reduce using rule 111
	L_charac       reduce using rule 111
	L_integ        reduce using rule 111
	L_quoted       reduce using rule 111
	L_UpperCaseIdentreduce using rule 111
	L_LowerCaseIdentreduce using rule 111


State 263

	LambdaAction -> 'do' '(' ListValueDecl ')' '->' '{' Expr . '}'    (rule 109)

	'}'            shift, and enter state 283


State 264

	ImperativeControlFlow -> 'for' '(' ValueDecl 'in' Expr ')' '{' . ListExpr '}'    (rule 125)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'}'            reduce using rule 68
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	ListExpr       goto state 282
	Expr           goto state 248
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 265

	LambdaFunction -> 'get' '(' ListValueDecl ')' '->' '{' Expr . '}'    (rule 107)

	'}'            shift, and enter state 281


State 266

	ElseBranch -> 'else' Expr .                         (rule 133)

	'!='           reduce using rule 133
	'('            reduce using rule 133
	')'            reduce using rule 133
	'*'            reduce using rule 133
	'+'            reduce using rule 133
	'++'           reduce using rule 133
	','            reduce using rule 133
	'-'            reduce using rule 133
	'/'            reduce using rule 133
	'<'            reduce using rule 133
	'<='           reduce using rule 133
	'=='           reduce using rule 133
	'>'            reduce using rule 133
	'>='           reduce using rule 133
	'False'        reduce using rule 133
	'Pass'         reduce using rule 133
	'True'         reduce using rule 133
	'actions:'     reduce using rule 133
	'and'          reduce using rule 133
	'case'         reduce using rule 133
	'do'           reduce using rule 133
	'else'         reduce using rule 133
	'for'          reduce using rule 133
	'functions:'   reduce using rule 133
	'get'          reduce using rule 133
	'if'           reduce using rule 133
	'in'           reduce using rule 133
	'local'        reduce using rule 133
	'match'        reduce using rule 133
	'not'          reduce using rule 133
	'or'           reduce using rule 133
	'override'     reduce using rule 133
	'private'      reduce using rule 133
	'value'        reduce using rule 133
	'variables:'   reduce using rule 133
	'while'        reduce using rule 133
	'{'            reduce using rule 133
	'}'            reduce using rule 133
	L_charac       reduce using rule 133
	L_integ        reduce using rule 133
	L_quoted       reduce using rule 133
	L_UpperCaseIdentreduce using rule 133
	L_LowerCaseIdentreduce using rule 133


State 267

	ElseBranch -> 'else' '{' . Expr '}'                 (rule 134)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	Expr           goto state 280
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 268

	ThenBranch -> 'then' '{' Expr . '}'                 (rule 132)

	'}'            shift, and enter state 279


State 269

	ImperativeControlFlow -> 'if' '(' Expr ')' '{' ListExpr '}' . OptionalElseBranch    (rule 126)

	'!='           reduce using rule 128
	'('            reduce using rule 128
	')'            reduce using rule 128
	'*'            reduce using rule 128
	'+'            reduce using rule 128
	'++'           reduce using rule 128
	','            reduce using rule 128
	'-'            reduce using rule 128
	'/'            reduce using rule 128
	'<'            reduce using rule 128
	'<='           reduce using rule 128
	'=='           reduce using rule 128
	'>'            reduce using rule 128
	'>='           reduce using rule 128
	'False'        reduce using rule 128
	'Pass'         reduce using rule 128
	'True'         reduce using rule 128
	'actions:'     reduce using rule 128
	'and'          reduce using rule 128
	'case'         reduce using rule 128
	'do'           reduce using rule 128
	'else'         shift, and enter state 278
			(reduce using rule 128)

	'for'          reduce using rule 128
	'functions:'   reduce using rule 128
	'get'          reduce using rule 128
	'if'           reduce using rule 128
	'in'           reduce using rule 128
	'local'        reduce using rule 128
	'match'        reduce using rule 128
	'not'          reduce using rule 128
	'or'           reduce using rule 128
	'override'     reduce using rule 128
	'private'      reduce using rule 128
	'value'        reduce using rule 128
	'variables:'   reduce using rule 128
	'while'        reduce using rule 128
	'{'            reduce using rule 128
	'}'            reduce using rule 128
	L_charac       reduce using rule 128
	L_integ        reduce using rule 128
	L_quoted       reduce using rule 128
	L_UpperCaseIdentreduce using rule 128
	L_LowerCaseIdentreduce using rule 128

	OptionalElseBranchgoto state 277

State 270

	MatchCase -> 'case' Pattern '->' Expr .             (rule 137)

	'case'         reduce using rule 137
	'}'            reduce using rule 137


State 271

	ImperativeControlFlow -> 'while' '(' Expr ')' '{' ListExpr '}' .    (rule 124)

	'!='           reduce using rule 124
	'('            reduce using rule 124
	')'            reduce using rule 124
	'*'            reduce using rule 124
	'+'            reduce using rule 124
	'++'           reduce using rule 124
	','            reduce using rule 124
	'-'            reduce using rule 124
	'/'            reduce using rule 124
	'<'            reduce using rule 124
	'<='           reduce using rule 124
	'=='           reduce using rule 124
	'>'            reduce using rule 124
	'>='           reduce using rule 124
	'False'        reduce using rule 124
	'Pass'         reduce using rule 124
	'True'         reduce using rule 124
	'actions:'     reduce using rule 124
	'and'          reduce using rule 124
	'case'         reduce using rule 124
	'do'           reduce using rule 124
	'else'         reduce using rule 124
	'for'          reduce using rule 124
	'functions:'   reduce using rule 124
	'get'          reduce using rule 124
	'if'           reduce using rule 124
	'in'           reduce using rule 124
	'local'        reduce using rule 124
	'match'        reduce using rule 124
	'not'          reduce using rule 124
	'or'           reduce using rule 124
	'override'     reduce using rule 124
	'private'      reduce using rule 124
	'value'        reduce using rule 124
	'variables:'   reduce using rule 124
	'while'        reduce using rule 124
	'{'            reduce using rule 124
	'}'            reduce using rule 124
	L_charac       reduce using rule 124
	L_integ        reduce using rule 124
	L_quoted       reduce using rule 124
	L_UpperCaseIdentreduce using rule 124
	L_LowerCaseIdentreduce using rule 124


State 272

	FunctionBody -> '{' Expr '}' WithValues .           (rule 56)

	'override'     reduce using rule 56
	'private'      reduce using rule 56
	'}'            reduce using rule 56
	L_LowerCaseIdentreduce using rule 56


State 273

	WithValues -> 'with' . ValuesSection                (rule 58)

	'override'     reduce using rule 22
	'private'      reduce using rule 22
	'values:'      shift, and enter state 27
	'}'            reduce using rule 22
	L_LowerCaseIdentreduce using rule 22

	ValuesSection  goto state 276

State 274

	ListExpr -> Expr ListExpr .                         (rule 69)

	'}'            reduce using rule 69


State 275

	ActionBody -> '{' ListExpr '}' .                    (rule 67)

	'override'     reduce using rule 67
	'private'      reduce using rule 67
	'}'            reduce using rule 67
	L_LowerCaseIdentreduce using rule 67


State 276

	WithValues -> 'with' ValuesSection .                (rule 58)

	'override'     reduce using rule 58
	'private'      reduce using rule 58
	'}'            reduce using rule 58
	L_LowerCaseIdentreduce using rule 58


State 277

	ImperativeControlFlow -> 'if' '(' Expr ')' '{' ListExpr '}' OptionalElseBranch .    (rule 126)

	'!='           reduce using rule 126
	'('            reduce using rule 126
	')'            reduce using rule 126
	'*'            reduce using rule 126
	'+'            reduce using rule 126
	'++'           reduce using rule 126
	','            reduce using rule 126
	'-'            reduce using rule 126
	'/'            reduce using rule 126
	'<'            reduce using rule 126
	'<='           reduce using rule 126
	'=='           reduce using rule 126
	'>'            reduce using rule 126
	'>='           reduce using rule 126
	'False'        reduce using rule 126
	'Pass'         reduce using rule 126
	'True'         reduce using rule 126
	'actions:'     reduce using rule 126
	'and'          reduce using rule 126
	'case'         reduce using rule 126
	'do'           reduce using rule 126
	'else'         reduce using rule 126
	'for'          reduce using rule 126
	'functions:'   reduce using rule 126
	'get'          reduce using rule 126
	'if'           reduce using rule 126
	'in'           reduce using rule 126
	'local'        reduce using rule 126
	'match'        reduce using rule 126
	'not'          reduce using rule 126
	'or'           reduce using rule 126
	'override'     reduce using rule 126
	'private'      reduce using rule 126
	'value'        reduce using rule 126
	'variables:'   reduce using rule 126
	'while'        reduce using rule 126
	'{'            reduce using rule 126
	'}'            reduce using rule 126
	L_charac       reduce using rule 126
	L_integ        reduce using rule 126
	L_quoted       reduce using rule 126
	L_UpperCaseIdentreduce using rule 126
	L_LowerCaseIdentreduce using rule 126


State 278

	OptionalElseBranch -> 'else' . '{' ListExpr '}'     (rule 127)

	'{'            shift, and enter state 286


State 279

	ThenBranch -> 'then' '{' Expr '}' .                 (rule 132)

	'else'         reduce using rule 132


State 280

	ElseBranch -> 'else' '{' Expr . '}'                 (rule 134)

	'}'            shift, and enter state 285


State 281

	LambdaFunction -> 'get' '(' ListValueDecl ')' '->' '{' Expr '}' .    (rule 107)

	'!='           reduce using rule 107
	'('            reduce using rule 107
	')'            reduce using rule 107
	'*'            reduce using rule 107
	'+'            reduce using rule 107
	'++'           reduce using rule 107
	','            reduce using rule 107
	'-'            reduce using rule 107
	'/'            reduce using rule 107
	'<'            reduce using rule 107
	'<='           reduce using rule 107
	'=='           reduce using rule 107
	'>'            reduce using rule 107
	'>='           reduce using rule 107
	'False'        reduce using rule 107
	'Pass'         reduce using rule 107
	'True'         reduce using rule 107
	'actions:'     reduce using rule 107
	'and'          reduce using rule 107
	'case'         reduce using rule 107
	'do'           reduce using rule 107
	'else'         reduce using rule 107
	'for'          reduce using rule 107
	'functions:'   reduce using rule 107
	'get'          reduce using rule 107
	'if'           reduce using rule 107
	'in'           reduce using rule 107
	'local'        reduce using rule 107
	'match'        reduce using rule 107
	'not'          reduce using rule 107
	'or'           reduce using rule 107
	'override'     reduce using rule 107
	'private'      reduce using rule 107
	'value'        reduce using rule 107
	'variables:'   reduce using rule 107
	'while'        reduce using rule 107
	'{'            reduce using rule 107
	'}'            reduce using rule 107
	L_charac       reduce using rule 107
	L_integ        reduce using rule 107
	L_quoted       reduce using rule 107
	L_UpperCaseIdentreduce using rule 107
	L_LowerCaseIdentreduce using rule 107


State 282

	ImperativeControlFlow -> 'for' '(' ValueDecl 'in' Expr ')' '{' ListExpr . '}'    (rule 125)

	'}'            shift, and enter state 284


State 283

	LambdaAction -> 'do' '(' ListValueDecl ')' '->' '{' Expr '}' .    (rule 109)

	'!='           reduce using rule 109
	'('            reduce using rule 109
	')'            reduce using rule 109
	'*'            reduce using rule 109
	'+'            reduce using rule 109
	'++'           reduce using rule 109
	','            reduce using rule 109
	'-'            reduce using rule 109
	'/'            reduce using rule 109
	'<'            reduce using rule 109
	'<='           reduce using rule 109
	'=='           reduce using rule 109
	'>'            reduce using rule 109
	'>='           reduce using rule 109
	'False'        reduce using rule 109
	'Pass'         reduce using rule 109
	'True'         reduce using rule 109
	'actions:'     reduce using rule 109
	'and'          reduce using rule 109
	'case'         reduce using rule 109
	'do'           reduce using rule 109
	'else'         reduce using rule 109
	'for'          reduce using rule 109
	'functions:'   reduce using rule 109
	'get'          reduce using rule 109
	'if'           reduce using rule 109
	'in'           reduce using rule 109
	'local'        reduce using rule 109
	'match'        reduce using rule 109
	'not'          reduce using rule 109
	'or'           reduce using rule 109
	'override'     reduce using rule 109
	'private'      reduce using rule 109
	'value'        reduce using rule 109
	'variables:'   reduce using rule 109
	'while'        reduce using rule 109
	'{'            reduce using rule 109
	'}'            reduce using rule 109
	L_charac       reduce using rule 109
	L_integ        reduce using rule 109
	L_quoted       reduce using rule 109
	L_UpperCaseIdentreduce using rule 109
	L_LowerCaseIdentreduce using rule 109


State 284

	ImperativeControlFlow -> 'for' '(' ValueDecl 'in' Expr ')' '{' ListExpr '}' .    (rule 125)

	'!='           reduce using rule 125
	'('            reduce using rule 125
	')'            reduce using rule 125
	'*'            reduce using rule 125
	'+'            reduce using rule 125
	'++'           reduce using rule 125
	','            reduce using rule 125
	'-'            reduce using rule 125
	'/'            reduce using rule 125
	'<'            reduce using rule 125
	'<='           reduce using rule 125
	'=='           reduce using rule 125
	'>'            reduce using rule 125
	'>='           reduce using rule 125
	'False'        reduce using rule 125
	'Pass'         reduce using rule 125
	'True'         reduce using rule 125
	'actions:'     reduce using rule 125
	'and'          reduce using rule 125
	'case'         reduce using rule 125
	'do'           reduce using rule 125
	'else'         reduce using rule 125
	'for'          reduce using rule 125
	'functions:'   reduce using rule 125
	'get'          reduce using rule 125
	'if'           reduce using rule 125
	'in'           reduce using rule 125
	'local'        reduce using rule 125
	'match'        reduce using rule 125
	'not'          reduce using rule 125
	'or'           reduce using rule 125
	'override'     reduce using rule 125
	'private'      reduce using rule 125
	'value'        reduce using rule 125
	'variables:'   reduce using rule 125
	'while'        reduce using rule 125
	'{'            reduce using rule 125
	'}'            reduce using rule 125
	L_charac       reduce using rule 125
	L_integ        reduce using rule 125
	L_quoted       reduce using rule 125
	L_UpperCaseIdentreduce using rule 125
	L_LowerCaseIdentreduce using rule 125


State 285

	ElseBranch -> 'else' '{' Expr '}' .                 (rule 134)

	'!='           reduce using rule 134
	'('            reduce using rule 134
	')'            reduce using rule 134
	'*'            reduce using rule 134
	'+'            reduce using rule 134
	'++'           reduce using rule 134
	','            reduce using rule 134
	'-'            reduce using rule 134
	'/'            reduce using rule 134
	'<'            reduce using rule 134
	'<='           reduce using rule 134
	'=='           reduce using rule 134
	'>'            reduce using rule 134
	'>='           reduce using rule 134
	'False'        reduce using rule 134
	'Pass'         reduce using rule 134
	'True'         reduce using rule 134
	'actions:'     reduce using rule 134
	'and'          reduce using rule 134
	'case'         reduce using rule 134
	'do'           reduce using rule 134
	'else'         reduce using rule 134
	'for'          reduce using rule 134
	'functions:'   reduce using rule 134
	'get'          reduce using rule 134
	'if'           reduce using rule 134
	'in'           reduce using rule 134
	'local'        reduce using rule 134
	'match'        reduce using rule 134
	'not'          reduce using rule 134
	'or'           reduce using rule 134
	'override'     reduce using rule 134
	'private'      reduce using rule 134
	'value'        reduce using rule 134
	'variables:'   reduce using rule 134
	'while'        reduce using rule 134
	'{'            reduce using rule 134
	'}'            reduce using rule 134
	L_charac       reduce using rule 134
	L_integ        reduce using rule 134
	L_quoted       reduce using rule 134
	L_UpperCaseIdentreduce using rule 134
	L_LowerCaseIdentreduce using rule 134


State 286

	OptionalElseBranch -> 'else' '{' . ListExpr '}'     (rule 127)

	'('            shift, and enter state 98
	'-'            shift, and enter state 99
	'False'        shift, and enter state 100
	'Pass'         shift, and enter state 101
	'True'         shift, and enter state 102
	'do'           shift, and enter state 103
	'for'          shift, and enter state 104
	'get'          shift, and enter state 105
	'if'           shift, and enter state 106
	'local'        shift, and enter state 107
	'match'        shift, and enter state 108
	'not'          shift, and enter state 109
	'value'        shift, and enter state 110
	'while'        shift, and enter state 111
	'}'            reduce using rule 68
	L_charac       shift, and enter state 2
	L_integ        shift, and enter state 112
	L_quoted       shift, and enter state 113
	L_UpperCaseIdentshift, and enter state 16
	L_LowerCaseIdentshift, and enter state 36

	Char           goto state 76
	Integer        goto state 77
	String         goto state 78
	UpperCaseIdent goto state 14
	LowerCaseIdent goto state 28
	ClassIdent     goto state 79
	ValueIdent     goto state 80
	ListExpr       goto state 287
	Expr           goto state 248
	Expr1          goto state 82
	Expr2          goto state 83
	Expr3          goto state 84
	Expr4          goto state 85
	Expr5          goto state 86
	Literal        goto state 87
	Boolean        goto state 88
	Void           goto state 89
	LocalValueDecl goto state 90
	LambdaFunction goto state 91
	LambdaAction   goto state 92
	ConstructorCallgoto state 93
	GetExpr        goto state 94
	DoExpr         goto state 95
	ImperativeControlFlowgoto state 96
	FunctionalControlFlowgoto state 97

State 287

	OptionalElseBranch -> 'else' '{' ListExpr . '}'     (rule 127)

	'}'            shift, and enter state 288


State 288

	OptionalElseBranch -> 'else' '{' ListExpr '}' .     (rule 127)

	'!='           reduce using rule 127
	'('            reduce using rule 127
	')'            reduce using rule 127
	'*'            reduce using rule 127
	'+'            reduce using rule 127
	'++'           reduce using rule 127
	','            reduce using rule 127
	'-'            reduce using rule 127
	'/'            reduce using rule 127
	'<'            reduce using rule 127
	'<='           reduce using rule 127
	'=='           reduce using rule 127
	'>'            reduce using rule 127
	'>='           reduce using rule 127
	'False'        reduce using rule 127
	'Pass'         reduce using rule 127
	'True'         reduce using rule 127
	'actions:'     reduce using rule 127
	'and'          reduce using rule 127
	'case'         reduce using rule 127
	'do'           reduce using rule 127
	'else'         reduce using rule 127
	'for'          reduce using rule 127
	'functions:'   reduce using rule 127
	'get'          reduce using rule 127
	'if'           reduce using rule 127
	'in'           reduce using rule 127
	'local'        reduce using rule 127
	'match'        reduce using rule 127
	'not'          reduce using rule 127
	'or'           reduce using rule 127
	'override'     reduce using rule 127
	'private'      reduce using rule 127
	'value'        reduce using rule 127
	'variables:'   reduce using rule 127
	'while'        reduce using rule 127
	'{'            reduce using rule 127
	'}'            reduce using rule 127
	L_charac       reduce using rule 127
	L_integ        reduce using rule 127
	L_quoted       reduce using rule 127
	L_UpperCaseIdentreduce using rule 127
	L_LowerCaseIdentreduce using rule 127


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 147
Number of terminals: 59
Number of non-terminals: 65
Number of states: 289
