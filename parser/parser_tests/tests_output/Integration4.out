
Parse Successful!

[Abstract Syntax]

ProgramEntrypoint [ClassDeclConcrete MMutable (CIdent (UpperCaseIdent "PhoneMessageReceiver")) (SuperclassPresent (CIdent (UpperCaseIdent "MessageReceiver"))) (ClassBodyFilled (ValuesPresent (ValSBodyMultiLine [PublicValueDecl (InitialisedValue (VIdent (LowerCaseIdent "messageReceived")) (ValueTypeClass (CIdent (UpperCaseIdent "String"))) (ELiteral (LString "You got a new message!"))),PublicValueDecl (InitialisedValue (VIdent (LowerCaseIdent "messageInvalid")) (ValueTypeClass (CIdent (UpperCaseIdent "String"))) (ELiteral (LString "Invalid message"))),PublicValueDecl (InitialisedValue (VIdent (LowerCaseIdent "maxMessageLength")) (ValueTypeClass (CIdent (UpperCaseIdent "Int"))) (ELiteral (LInt 100))),PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "notificationChannels")) (ValueTypeGeneric (CIdent (UpperCaseIdent "List")) [CIdent (UpperCaseIdent "NotificationChannel")]))])) (VariablesPresent (VarSBodyMultiLine [PublicValueDecl (InitialisedValue (VIdent (LowerCaseIdent "messages")) (ValueTypeGeneric (CIdent (UpperCaseIdent "List")) [CIdent (UpperCaseIdent "Message")]) (ECtorCall (CtorCallWithArgs (CIdent (UpperCaseIdent "List")) [])))])) (FunctionsPresent (FSBodyFilled [PrivateFunctionDecl (FIdent (LowerCaseIdent "parseMessage")) (FType [PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "message")) (ValueTypeClass (CIdent (UpperCaseIdent "Message"))))] (ValueTypeClass (CIdent (UpperCaseIdent "String")))) (FunctionBodyMultiLine (EFunctionalControlFlow (FIfThenElse (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "validateMessage")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "message")))]))) (ThenMultiLine (EFunctionalControlFlow (FMatch (ELocalValue (VIdent (LowerCaseIdent "message"))) [Case (TypePattern (CIdent (UpperCaseIdent "Email"))) (ELiteral (LString "One new email")),Case (TypePattern (CIdent (UpperCaseIdent "Sms"))) (ELiteral (LString "One new SMS")),Case (TypePattern (CIdent (UpperCaseIdent "Notification"))) (ELiteral (LString "One new notification"))]))) (ElseMultiLine (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "messageInvalid")))))))) WithValuesAbsent),PrivateFunctionDecl (FIdent (LowerCaseIdent "validateMessage")) (FType [PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "message")) (ValueTypeClass (CIdent (UpperCaseIdent "Message"))))] (ValueTypeClass (CIdent (UpperCaseIdent "Bool")))) (FunctionBodyMultiLine (EBooleanOperator (EUnaryNot (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "message")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "empty")))))) BAnd (ERelationalOperator (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "message")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "length"))))) RLessEqual (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "maxMessageLength"))))))) WithValuesAbsent)])) (ActionsPresent (ASBodyFilled [OverrideActionDecl (FIdent (LowerCaseIdent "receive")) (FType [PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "message")) (ValueTypeClass (CIdent (UpperCaseIdent "Message"))))] (ValueTypeClass (CIdent (UpperCaseIdent "Bool")))) (ActionBodyMultiLine [EDoExpr (DoExprStatic (CIdent (UpperCaseIdent "System")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "printLine")) [FunctionArg (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "messageReceived")))))])),ELocalValueDecl (LocalVDecl (PublicValueDecl (InitialisedValue (VIdent (LowerCaseIdent "response")) (ValueTypeClass (CIdent (UpperCaseIdent "String"))) (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "parseMessage")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "message")))])))))),EDoExpr (DoExprStatic (CIdent (UpperCaseIdent "System")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "printLine")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "response")))])),EImperativeControlFlow (IIf (ERelationalOperator (ELocalValue (VIdent (LowerCaseIdent "response"))) RNotEqual (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "messageInvalid")))))) [EDoExpr (DoExprInstance (VIdent (LowerCaseIdent "super")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "receive")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "message")))])),EDoExpr (DoExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "messages")) [FunctionArg (EGetExpr (GetExprChain (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "messages")))) (FunctionCallWithArgs (FIdent (LowerCaseIdent "add")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "message")))])))])),EImperativeControlFlow (IForeach (PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "channel")) (ValueTypeClass (CIdent (UpperCaseIdent "NotificationChannel"))))) (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "notificationChannels"))))) [EDoExpr (DoExprInstance (VIdent (LowerCaseIdent "channel")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "notify")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "response")))]))]),ELiteral (LBool BTrue)] (ElsePresent [ELiteral (LBool BFalse)]))])])))]

[Linearized tree]

mutable class PhoneMessageReceiver extends MessageReceiver {
  values: {
    messageReceived : String = "You got a new message!", messageInvalid : String = "Invalid message", maxMessageLength : Int = 100, notificationChannels : List [NotificationChannel]
  }
  variables: {
    messages : List [Message] = List ()
  }
  functions: {
    private parseMessage : (message : Message) -> String = {
      if (this . validateMessage (message)) then {
        match message {
          case Email -> "One new email" case Sms -> "One new SMS" case Notification -> "One new notification"
        }
        }
      else {
        this . messageInvalid
      }
      }
    private validateMessage : (message : Message) -> Bool = {
      not message . empty and message . length <= this . maxMessageLength
    }
    }
  actions: {
    override receive : (message : Message) -> Bool = {
      System # printLine (this . messageReceived) value response : String = this . parseMessage (message) System # printLine (response) if (response != this . messageInvalid) {
        super # receive (message) this # messages (this . messages . add (message)) for (channel : NotificationChannel in this . notificationChannels) {
          channel # notify (response)
        }
        True
      }
      else {
        False
      }
      }
    }
  }

