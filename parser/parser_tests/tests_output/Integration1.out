
Parse Successful!

[Abstract Syntax]

ProgramEntrypoint [ClassDeclConcrete MMutable (CIdent (UpperCaseIdent "Student")) SuperclassAbsent (ClassBodyFilled (ValuesPresent (ValSBodyMultiLine [PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "id")) (ValueTypeClass (CIdent (UpperCaseIdent "Int")))),PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "firstName")) (ValueTypeClass (CIdent (UpperCaseIdent "String")))),PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "lastName")) (ValueTypeClass (CIdent (UpperCaseIdent "String")))),PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "birthDate")) (ValueTypeClass (CIdent (UpperCaseIdent "Date")))),PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "gender")) (ValueTypeClass (CIdent (UpperCaseIdent "Gender"))))])) (VariablesPresent (VarSBodyMultiLine [PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "login")) (ValueTypeClass (CIdent (UpperCaseIdent "String")))),PrivateValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "passwordHash")) (ValueTypeClass (CIdent (UpperCaseIdent "String")))),PublicValueDecl (InitialisedValue (VIdent (LowerCaseIdent "classes")) (ValueTypeGeneric (CIdent (UpperCaseIdent "List")) [CIdent (UpperCaseIdent "UniversityClass")]) (ECtorCall (CtorCallWithArgs (CIdent (UpperCaseIdent "List")) [])))])) (FunctionsPresent (FSBodyFilled [PublicFunctionDecl (FIdent (LowerCaseIdent "fullName")) (FType [] (ValueTypeClass (CIdent (UpperCaseIdent "String")))) (FunctionBodyOneLine (EConcatenate (EConcatenate (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "firstName"))))) (ELiteral (LString " "))) (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "lastName"))))))),PublicFunctionDecl (FIdent (LowerCaseIdent "authorize")) (FType [PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "enteredPassword")) (ValueTypeClass (CIdent (UpperCaseIdent "String"))))] (ValueTypeClass (CIdent (UpperCaseIdent "Bool")))) (FunctionBodyMultiLine (ERelationalOperator (EGetExpr (GetExprStatic (CIdent (UpperCaseIdent "PasswordUtils")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "hash")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "enteredPassword")))]))) REqual (EGetExpr (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "passwordHash")))))) WithValuesAbsent)])) (ActionsPresent (ASBodyFilled [PublicActionDecl (FIdent (LowerCaseIdent "changePassword")) (FType [PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "newPassword")) (ValueTypeClass (CIdent (UpperCaseIdent "String"))))] (ValueTypeClass (CIdent (UpperCaseIdent "Void")))) (ActionBodyMultiLine [EDoExpr (DoExprStatic (CIdent (UpperCaseIdent "Logger")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "log")) [FunctionArg (EConcatenate (ELiteral (LString "Changing password for user ")) (ELocalValue (VIdent (LowerCaseIdent "this"))))])),ELocalValueDecl (LocalVDecl (PublicValueDecl (InitialisedValue (VIdent (LowerCaseIdent "hashedPassword")) (ValueTypeClass (CIdent (UpperCaseIdent "String"))) (EGetExpr (GetExprStatic (CIdent (UpperCaseIdent "PasswordUtils")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "hash")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "newPassword")))])))))),EDoExpr (DoExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "passwordHash")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "hashedPassword")))]))]),PublicActionDecl (FIdent (LowerCaseIdent "addClass")) (FType [PublicValueDecl (UninitialisedValue (VIdent (LowerCaseIdent "newClass")) (ValueTypeClass (CIdent (UpperCaseIdent "UniversityClass"))))] (ValueTypeClass (CIdent (UpperCaseIdent "Void")))) (ActionBodyMultiLine [EImperativeControlFlow (IIf (EUnaryNot (EGetExpr (GetExprChain (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "classes")))) (FunctionCallWithArgs (FIdent (LowerCaseIdent "contains")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "newClass")))])))) [EDoExpr (DoExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallWithArgs (FIdent (LowerCaseIdent "classes")) [FunctionArg (EGetExpr (GetExprChain (GetExprInstance (VIdent (LowerCaseIdent "this")) (FunctionCallNoArgs (FIdent (LowerCaseIdent "classes")))) (FunctionCallWithArgs (FIdent (LowerCaseIdent "add")) [FunctionArg (ELocalValue (VIdent (LowerCaseIdent "newClass")))])))]))] ElseAbsent)])])))]

[Linearized tree]

mutable class Student {
  values: {
    id : Int, firstName : String, lastName : String, birthDate : Date, gender : Gender
  }
  variables: {
    login : String, private passwordHash : String, classes : List [UniversityClass] = List ()
  }
  functions: {
    fullName : () -> String = this . firstName ++ " " ++ this . lastName authorize : (enteredPassword : String) -> Bool = {
      PasswordUtils . hash (enteredPassword) == this . passwordHash
    }
    }
  actions: {
    changePassword : (newPassword : String) -> Void = {
      Logger # log ("Changing password for user " ++ this) value hashedPassword : String = PasswordUtils . hash (newPassword) this # passwordHash (hashedPassword)
    }
    addClass : (newClass : UniversityClass) -> Void = {
      if (not this . classes . contains (newClass)) {
        this # classes (this . classes . add (newClass))
      }
      }
    }
  }

