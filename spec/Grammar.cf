-- PROGRAMS -----------------------------------

entrypoints Program ;
Program. Program ::= [ClassDecl] ;


-- CLASS DECLARATIONS -------------------------

ClassIdent. ClassIdent ::= Ident ;
-- TODO starts with upper case

separator nonempty ClassDecl "" ;
ClassDeclConcrete. ClassDecl ::= ClassType "class" ClassIdent ClassBody ;
ClassDeclAbstract. ClassDecl ::= "abstract" ClassType "class" ClassIdent ClassBody ;


ClassBodyEmpty. ClassBody ::= ;
ClassBodyFilled. ClassBody ::= "{" ValuesSection VariablesSection FunctionsSection ActionsSection "}" ;


-- CLASS MODIFIERS ----------------------------

MMutable. ClassType ::= "mutable" ;
MImmutable. ClassType ::= "immutable" ;
MSingleton. ClassType ::= "singleton" ;


-- CLASS SECTION DECLARATIONS -----------------

ValuesAbsent. ValuesSection ::= ;
ValuesPresent. ValuesSection ::= "values:" ValSBody ;

VariablesAbsent. VariablesSection ::= ;
VariablesPresent. VariablesSection ::= "variables:" VarSBody ;

FunctionsAbsent. FunctionsSection ::= ;
FunctionsPresent. FunctionsSection ::= "functions:" FSBody ;

ActionsAbsent. ActionsSection ::= ;
ActionsPresent. ActionsSection ::= "actions:" ASBody ;


-- VALUES SECTION -----------------------------

ValSBodyEmpty. ValSBody ::= ;
ValSBodyOneLine. ValSBody ::= [ValueDecl] ;
ValSBodyMultiLine. ValSBody ::= "{" [ValueDecl] "}" ;

ValueIdent. ValueIdent ::= Ident ;
-- TODO if starts with lower case then normal value, else a constant 
ValueType. ValueType ::= ClassIdent ;
-- TODO doesn't work with generic types, doesn't work with function types

separator ValueDecl "," ;
UninitialisedValue. ValueDecl ::= ValueIdent ":" ValueType ;
InitialisedValue. ValueDecl ::= ValueIdent ":" ValueType "=" Exp ;


-- VARIABLES SECTION --------------------------

VarSBodyEmpty. VarSBody ::= ;
VarSBodyOneLine. VarSBody ::= [ValueDecl] ;
VarSBodyMultiLine. VarSBody ::= "{" [ValueDecl] "}" ;


-- FUNCTIONS SECTION --------------------------

FSBodyEmpty. FSBody ::= ;
FSBodyFilled. FSBody ::= "{" [FunctionDecl] "}" ;

FunctionIdent. FunctionIdent ::= Ident ;
-- TODO must start with lower case
FunctionType. FunctionType ::= "(" [ValueDecl] ")" "->" ValueType;
-- TODO merge FunctionType and valueType, extract types to a different set of rules in general, after it's working
-- TODO should be handled better, with connection to function objects to be pure OOP
-- TODO doesn't work with generic types, doesn't work with function parameters/return types

separator FunctionDecl "" ; 
PublicFunctionDecl. FunctionDecl ::= FunctionIdent ":" FunctionType "=" FunctionBody ;
PrivateFunctionDecl. FunctionDecl ::= "private" FunctionIdent ":" FunctionType "=" FunctionBody ;

FunctionBodyOneLine. FunctionBody ::= Exp ;
FunctionBodyMultiLine. FunctionBody ::= "{" Exp "}" WithValues ;

WithValuesAbsent. WithValues ::= ;
WithValuesPresent. WithValues ::= "with" ValuesSection ;


-- ACTIONS SECTION ----------------------------

ASBodyEmpty. ASBody ::= ;






-- TODO currently a mock
Exp. Exp ::= Integer;





-- COMMENTS -----------------------------------

comment "//" ;
comment "/*" "*/" ;
