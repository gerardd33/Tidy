-- GLOBAL -------------------------------------

token UpperCaseIdent (upper (letter | digit | '_')*) ;
token LowerCaseIdent (lower (letter | digit | '_')*) ;


-- PROGRAMS -----------------------------------

entrypoints Program ;
Program. Program ::= [ClassDecl] ;


-- COMMENTS -----------------------------------

comment "//" ;
comment "/*" "*/" ;


-- CLASS DECLARATIONS -------------------------

separator ClassIdent "," ;
ClassIdent. ClassIdent ::= UpperCaseIdent ;

separator nonempty ClassDecl "" ;
ClassDeclConcrete. ClassDecl ::= ClassType "class" ClassIdent Inheritance ClassBody ;
ClassDeclAbstract. ClassDecl ::= "abstract" ClassType "class" ClassIdent Inheritance ClassBody ;

SuperclassAbsent. Inheritance ::= ;
SuperclassPresent. Inheritance ::= "extends" ClassIdent ;


ClassBodyEmpty. ClassBody ::= ;
ClassBodyFilled. ClassBody ::= "{" ValuesSection VariablesSection FunctionsSection ActionsSection "}" ;


-- CLASS MODIFIERS ----------------------------

MMutable. ClassType ::= "mutable" ;
MImmutable. ClassType ::= "immutable" ;
MSingleton. ClassType ::= "singleton" ;


-- CLASS SECTION DECLARATIONS -----------------

ValuesAbsent. ValuesSection ::= ;
ValuesPresent. ValuesSection ::= "values:" ValSBody ;

VariablesAbsent. VariablesSection ::= ;
VariablesPresent. VariablesSection ::= "variables:" VarSBody ;

FunctionsAbsent. FunctionsSection ::= ;
FunctionsPresent. FunctionsSection ::= "functions:" FSBody ;

ActionsAbsent. ActionsSection ::= ;
ActionsPresent. ActionsSection ::= "actions:" ASBody ;


-- VALUES SECTION -----------------------------

ValSBodyEmpty. ValSBody ::= ;
ValSBodyOneLine. ValSBody ::= [ValueDecl] ;
ValSBodyMultiLine. ValSBody ::= "{" [ValueDecl] "}" ;

ValueIdent. ValueIdent ::= LowerCaseIdent ;

ValueTypeClass. ValueType ::=  ClassIdent;
ValueTypeGeneric. ValueType ::= ClassIdent "[" [ClassIdent] "]" ;

separator ValueDecl "," ;
PublicValueDecl. ValueDecl ::= ValueDeclProper ;
PrivateValueDecl. ValueDecl ::= "private" ValueDeclProper ;

UninitialisedValue. ValueDeclProper ::= ValueIdent ":" ValueType ;
InitialisedValue. ValueDeclProper ::= ValueIdent ":" ValueType "=" Expr ;


-- VARIABLES SECTION --------------------------

VarSBodyEmpty. VarSBody ::= ;
VarSBodyOneLine. VarSBody ::= [ValueDecl] ;
VarSBodyMultiLine. VarSBody ::= "{" [ValueDecl] "}" ;


-- FUNCTIONS SECTION --------------------------

FSBodyEmpty. FSBody ::= ;
FSBodyFilled. FSBody ::= "{" [FunctionDecl] "}" ;

FunctionIdent. FunctionIdent ::= LowerCaseIdent ;
FunctionType. FunctionType ::= "(" [ValueDecl] ")" "->" ValueType;

separator FunctionDecl "" ;
OverrideFunctionDecl. FunctionDecl ::= "override" FunctionIdent ":" FunctionType "=" FunctionBody ;
PublicFunctionDecl. FunctionDecl ::= FunctionIdent ":" FunctionType "=" FunctionBody ;
PrivateFunctionDecl. FunctionDecl ::= "private" FunctionIdent ":" FunctionType "=" FunctionBody ;

FunctionBodyOneLine. FunctionBody ::= Expr ;
FunctionBodyMultiLine. FunctionBody ::= "{" Expr "}" WithValues ;

WithValuesAbsent. WithValues ::= ;
WithValuesPresent. WithValues ::= "with" ValuesSection ;


-- ACTIONS SECTION ----------------------------

ASBodyEmpty. ASBody ::= ;
ASBodyFilled. ASBody ::= "{" [ActionDecl] "}" ;

separator ActionDecl "" ; 
OverrideActionDecl. ActionDecl ::= "override" FunctionIdent ":" FunctionType "=" ActionBody ;
PublicActionDecl. ActionDecl ::= FunctionIdent ":" FunctionType "=" ActionBody ;
PrivateActionDecl. ActionDecl ::= "private" FunctionIdent ":" FunctionType "=" ActionBody ;

ActionBodyOneLine. ActionBody ::= Expr ;
ActionBodyMultiLine. ActionBody ::= "{" [Expr] "}" ;


-- EXPRESSIONS -------------------------------

separator Expr "" ;
coercions Expr 5 ;

ELiteral. Expr5 ::= Literal ;
EValue. Expr5 ::= ValueIdent ;
ELocalValueDecl. Expr5 ::= LocalValueDecl ;
ECtorCall. Expr5 ::= ConstructorCall ;
EGetExpr. Expr5 ::= GetExpr ;
EDoExpr. Expr5 ::= DoExpr ;
EImperativeControlFlow. Expr5 ::= ImperativeControlFlow ;
EFunctionalControlFlow. Expr5 ::= FunctionalControlFlow ;

EUnaryNot. Expr4 ::= "not" Expr5 ;
EUnaryMinus. Expr4 ::= "-" Expr5 ;

EMultiply. Expr3 ::= Expr3 "*" Expr4 ;
EDivide. Expr3 ::= Expr3 "/" Expr4 ;

EAdd. Expr2 ::= Expr2 "+" Expr3 ;
ESubtract. Expr2 ::= Expr2 "-" Expr3 ;
EConcatenate. Expr2 ::= Expr2 "++" Expr3 ;

ERelationalOperator. Expr1 ::= Expr1 RelationalOperator Expr2 ;

EBooleanOperator. Expr ::= Expr1 BooleanOperator Expr ;


-- LITERALS ----------------------------------

LInt. Literal ::= Integer ;
LBool. Literal ::= Boolean ;
LChar. Literal ::= Char ;
LString. Literal ::= String ;
LVoid. Literal ::= Void ;

BTrue. Boolean ::= "True" ;
BFalse. Boolean ::= "False" ;
VPass. Void ::= "Pass" ;


-- LOCAL VALUE DECLARATIONS ------------------

LocalValueDecl. LocalValueDecl ::= "value" ValueDecl ;


-- FUNCTION CALLS ----------------------------

FunctionCallNoArgs. FunctionCall ::= FunctionIdent ;
FunctionCallWithArgs. FunctionCall ::= FunctionIdent "(" [FunctionArgument] ")" ;

separator FunctionArgument "," ;
FunctionArgument. FunctionArgument ::= Expr ;


-- CONSTRUCTOR CALLS --------------------------

CtorCallNoArgs. ConstructorCall ::= ClassIdent ;
CtorCallWithArgs. ConstructorCall ::= ClassIdent "(" [FunctionArgument] ")" ;


-- GET EXPRESSIONS ----------------------------

GetExprInstance. GetExpr ::= ValueIdent "." FunctionCall ;
GetExprStatic. GetExpr ::= ClassIdent "." FunctionCall ;
GetExprChain. GetExpr ::= GetExpr "." FunctionCall ;


-- DO EXPRESSIONS ----------------------------

DoExprInstance. DoExpr ::= ValueIdent "#" FunctionCall ;
DoExprStatic. DoExpr ::= ClassIdent "#" FunctionCall ;
DoExprChain. DoExpr ::= GetExpr "#" FunctionCall ;


-- IMPERATIVE CONTROL FLOW -------------------

IWhile. ImperativeControlFlow ::= "while" "(" Expr ")" "{" [Expr] "}" ;
IForeach. ImperativeControlFlow ::= "for" "(" ValueDecl "in" Expr ")" "{" [Expr] "}" ;
IIf. ImperativeControlFlow ::= "if" "(" Expr ")" "{" [Expr] "}" OptionalElseBranch ;

ElsePresent. OptionalElseBranch ::= "else" "{" [Expr] "}" ;
ElseAbsent. OptionalElseBranch ::= ;


-- FUNCTIONAL CONTROL FLOW -------------------

FIfThenElse. FunctionalControlFlow ::= "if" "(" Expr ")" ThenBranch ElseBranch ;

ThenOneLine. ThenBranch ::= "then" Expr ;
ThenMultiLine. ThenBranch ::= "then" "{" Expr "}" ;
ElseOneLine. ElseBranch ::= "else" Expr ;
ElseMultiLine. ElseBranch ::= "else" "{" Expr "}" ;

FMatch. FunctionalControlFlow ::= "match" Expr "{" [MatchCase] "}" ;

separator MatchCase "" ;
MatchCase. MatchCase ::= "case" Pattern "->" Expr ;

TypePattern. Pattern ::= ClassIdent ; 


-- RELATIONAL OPERATORS ----------------------

RLess. RelationalOperator ::= "<" ;
RLessEqual. RelationalOperator ::= "<=" ;
RGreater. RelationalOperator ::= ">" ;
RGreaterEqual. RelationalOperator ::= ">=" ;
REqual. RelationalOperator ::= "==" ;
RNotEqual. RelationalOperator ::= "!=" ;


-- BOOLEAN OPERATORS -------------------------

BAnd. BooleanOperator ::= "and" ;
BOr. BooleanOperator ::= "or" ;
