-- PROGRAMS -----------------------------------

entrypoints Program ;
Program. Program ::= [ClassDecl] ;


-- COMMENTS -----------------------------------

comment "//" ;
comment "/*" "*/" ;


-- CLASS DECLARATIONS -------------------------

ClassIdent. ClassIdent ::= Ident ;
-- TODO starts with upper case

separator nonempty ClassDecl "" ;
ClassDeclConcrete. ClassDecl ::= ClassType "class" ClassIdent ClassBody ;
ClassDeclAbstract. ClassDecl ::= "abstract" ClassType "class" ClassIdent ClassBody ;


ClassBodyEmpty. ClassBody ::= ;
ClassBodyFilled. ClassBody ::= "{" ValuesSection VariablesSection FunctionsSection ActionsSection "}" ;


-- CLASS MODIFIERS ----------------------------

MMutable. ClassType ::= "mutable" ;
MImmutable. ClassType ::= "immutable" ;
MSingleton. ClassType ::= "singleton" ;


-- CLASS SECTION DECLARATIONS -----------------

ValuesAbsent. ValuesSection ::= ;
ValuesPresent. ValuesSection ::= "values:" ValSBody ;

VariablesAbsent. VariablesSection ::= ;
VariablesPresent. VariablesSection ::= "variables:" VarSBody ;

FunctionsAbsent. FunctionsSection ::= ;
FunctionsPresent. FunctionsSection ::= "functions:" FSBody ;

ActionsAbsent. ActionsSection ::= ;
ActionsPresent. ActionsSection ::= "actions:" ASBody ;


-- VALUES SECTION -----------------------------

ValSBodyEmpty. ValSBody ::= ;
ValSBodyOneLine. ValSBody ::= [ValueDecl] ;
ValSBodyMultiLine. ValSBody ::= "{" [ValueDecl] "}" ;

ValueIdent. ValueIdent ::= Ident ;
-- TODO if starts with lower case then normal value, else a constant 
ValueType. ValueType ::= ClassIdent ;
-- TODO doesn't work with generic types, doesn't work with function types

separator ValueDecl "," ;
UninitialisedValue. ValueDecl ::= ValueIdent ":" ValueType ;
InitialisedValue. ValueDecl ::= ValueIdent ":" ValueType "=" Exp ;


-- VARIABLES SECTION --------------------------

VarSBodyEmpty. VarSBody ::= ;
VarSBodyOneLine. VarSBody ::= [ValueDecl] ;
VarSBodyMultiLine. VarSBody ::= "{" [ValueDecl] "}" ;


-- FUNCTIONS SECTION --------------------------

FSBodyEmpty. FSBody ::= ;
FSBodyFilled. FSBody ::= "{" [FunctionDecl] "}" ;

FunctionIdent. FunctionIdent ::= Ident ;
-- TODO must start with lower case
FunctionType. FunctionType ::= "(" [ValueDecl] ")" "->" ValueType;
-- TODO merge FunctionType and valueType, extract types to a different set of rules in general, after it's working
-- TODO should be handled better, with connection to function objects to be pure OOP
-- TODO doesn't work with generic types, doesn't work with function parameters/return types

separator FunctionDecl "" ; 
PublicFunctionDecl. FunctionDecl ::= FunctionIdent ":" FunctionType "=" FunctionBody ;
PrivateFunctionDecl. FunctionDecl ::= "private" FunctionIdent ":" FunctionType "=" FunctionBody ;

FunctionBodyOneLine. FunctionBody ::= Exp ;
FunctionBodyMultiLine. FunctionBody ::= "{" Exp "}" WithValues ;

WithValuesAbsent. WithValues ::= ;
WithValuesPresent. WithValues ::= "with" ValuesSection ;


-- ACTIONS SECTION ----------------------------

ASBodyEmpty. ASBody ::= ;
ASBodyFilled. ASBody ::= "{" [ActionDecl] "}" ;

separator ActionDecl "" ; 
PublicActionDecl. ActionDecl ::= FunctionIdent ":" FunctionType "=" ActionBody ;
PrivateActionDecl. ActionDecl ::= "private" FunctionIdent ":" FunctionType "=" ActionBody ;

ActionBodyOneLine. ActionBody ::= Exp ;
ActionBodyMultiLine. ActionBody ::= "{" [Exp] "}" ;


-- EXPRESSIONS -------------------------------

separator Exp "" ;
coercions Exp 5 ;

ELiteral. Exp5 ::= Literal ;
-- EImperative. Exp5 ::= Imperative ;

EUnaryNot. Exp4 ::= "not" Exp5 ;
EUnaryMinus. Exp4 ::= "-" Exp5 ;

EMultiply. Exp3 ::= Exp3 "*" Exp4 ;
EDivide. Exp3 ::= Exp3 "/" Exp4 ;

EAdd. Exp2 ::= Exp2 "+" Exp3 ;
ESubtract. Exp2 ::= Exp2 "-" Exp3 ;

EComparisonOp. Exp1 ::= Exp1 RelationalOperator Exp2 ;

EBooleanOp. Exp ::= Exp1 BooleanOperator Exp ;


-- LITERALS ----------------------------------

LInt. Literal ::= Integer ;
LBool. Literal ::= Boolean ;
LChar. Literal ::= Char ;
LString. Literal ::= String ;
LVoid. Literal ::= "()" ;

BTrue. Boolean ::= "True" ;
BFalse. Boolean ::= "False" ;


-- IMPERATIVE INSTRUCTIONS -------------------

-- TODO add

-- RELATIONAL OPERATORS ----------------------

CLess. RelationalOperator ::= "<" ;
CLessEqual. RelationalOperator ::= "<=" ;
CGreater. RelationalOperator ::= ">" ;
CGreaterEqual. RelationalOperator ::= ">=" ;
CEqual. RelationalOperator ::= "==" ;
CNotEqual. RelationalOperator ::= "!=" ;


-- BOOLEAN OPERATORS -------------------------

BAnd. BooleanOperator ::= "and" ;
BOr. BooleanOperator ::= "or" ;
