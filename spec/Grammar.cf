-- PROGRAMS -----------------------------------

entrypoints Program ;
Program. Program ::= [ClassDecl] ;


-- CLASS DECLARATIONS -------------------------

separator nonempty ClassDecl "" ;

ClassName. ClassName ::= Ident ;
-- TODO starts with upper case

ClassDeclConcrete. ClassDecl ::= ClassType "class" ClassName ClassBody ;
ClassDeclAbstract. ClassDecl ::= "abstract" ClassType "class" ClassName ClassBody ;


ClassBodyEmpty. ClassBody ::= ;
ClassBodyFilled. ClassBody ::= "{" ValuesDecl VariablesDecl FunctionsDecl ActionsDecl "}" ;

-- CLASS TYPES --------------------------------

ClassTypeMutable. ClassType ::= "mutable" ;
ClassTypeImmutable. ClassType ::= "immutable" ;
ClassTypeinSgleton. ClassType ::= "singleton" ;


-- CLASS SECTION DECLARATIONS -----------------

ValuesAbsent. ValuesDecl ::= ;
ValuesPresent. ValuesDecl ::= "values:" ValuesBody ;

VariablesAbsent. VariablesDecl ::= ;
VariablesPresent. VariablesDecl ::= "variables:" VariablesBody ;

FunctionsAbsent. FunctionsDecl ::= ;
FunctionsPresent. FunctionsDecl ::= "functions:" FunctionsBody ;

ActionsAbsent. ActionsDecl ::= ;
ActionsPresent. ActionsDecl ::= "actions:" ActionsBody ;


-- VALUES SECTION -----------------------------

ValueName. ValueName ::= Ident ;
-- TODO if starts with lower case then normal value, else a constant 

ValuesBodyEmpty. ValuesBody ::= ;
ValuesBodyFilledOneLine. ValuesBody ::= [ValueDecl] ;
ValuesBodyFilledMultiLine. ValuesBody ::= "{" [ValueDecl] "}" ;

separator ValueDecl "," ; 
UninitialisedAttribute. ValueDecl ::= ValueName ":" ClassName ;
InitialisedAttribute. ValueDecl ::= ValueName ":" ClassName "=" Exp ;


-- VARIABLES SECTION --------------------------

VariablesBodyEmpty. VariablesBody ::= ;
VariablesBodyFilledOneLine. VariablesBody ::= [ValueDecl] ;
VariablesBodyFilledMultiLine. VariablesBody ::= "{" [ValueDecl] "}" ;


-- FUNCTIONS SECTION --------------------------

FunctionsBodyEmpty. FunctionsBody ::= ;


-- ACTIONS SECTION ----------------------------

ActionsBodyEmpty. ActionsBody ::= ;






-- TODO currently a mock
Exp. Exp ::= Integer;





-- COMMENTS -----------------------------------

comment "//" ;
comment "/*" "*/" ;

