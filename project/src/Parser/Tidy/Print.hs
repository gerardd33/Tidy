{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Parser.
--   Generated by the BNF converter.

module Parser.Tidy.Print where

import qualified Parser.Tidy.Abs
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Parser.Tidy.Abs.UpperCaseIdent where
  prt _ (Parser.Tidy.Abs.UpperCaseIdent i) = doc $ showString $ i

instance Print Parser.Tidy.Abs.LowerCaseIdent where
  prt _ (Parser.Tidy.Abs.LowerCaseIdent i) = doc $ showString $ i

instance Print Parser.Tidy.Abs.Program where
  prt i e = case e of
    Parser.Tidy.Abs.ProgramEntrypoint classdecls -> prPrec i 0 (concatD [prt 0 classdecls])

instance Print [Parser.Tidy.Abs.ClassIdent] where
  prt = prtList

instance Print Parser.Tidy.Abs.ClassIdent where
  prt i e = case e of
    Parser.Tidy.Abs.ClassIdentifier uppercaseident -> prPrec i 0 (concatD [prt 0 uppercaseident])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Parser.Tidy.Abs.ClassDecl] where
  prt = prtList

instance Print Parser.Tidy.Abs.ClassDecl where
  prt i e = case e of
    Parser.Tidy.Abs.ClassDeclaration abstractmodifier classtypemodifier classident inheritance classbody -> prPrec i 0 (concatD [prt 0 abstractmodifier, prt 0 classtypemodifier, doc (showString "class"), prt 0 classident, prt 0 inheritance, prt 0 classbody])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Parser.Tidy.Abs.Inheritance where
  prt i e = case e of
    Parser.Tidy.Abs.SuperclassPresent -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.SuperclassAbsent classident -> prPrec i 0 (concatD [doc (showString "extends"), prt 0 classident])

instance Print Parser.Tidy.Abs.ClassBody where
  prt i e = case e of
    Parser.Tidy.Abs.ClassBodyEmpty -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.ClassBodyFilled valuessection variablessection functionssection actionssection -> prPrec i 0 (concatD [doc (showString "{"), prt 0 valuessection, prt 0 variablessection, prt 0 functionssection, prt 0 actionssection, doc (showString "}")])

instance Print Parser.Tidy.Abs.ClassTypeModifier where
  prt i e = case e of
    Parser.Tidy.Abs.MMutable -> prPrec i 0 (concatD [doc (showString "mutable")])
    Parser.Tidy.Abs.MImmutable -> prPrec i 0 (concatD [doc (showString "immutable")])
    Parser.Tidy.Abs.MSingleton -> prPrec i 0 (concatD [doc (showString "singleton")])

instance Print Parser.Tidy.Abs.AbstractModifier where
  prt i e = case e of
    Parser.Tidy.Abs.MConcrete -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.MAbstract -> prPrec i 0 (concatD [doc (showString "abstract")])

instance Print Parser.Tidy.Abs.ValuesSection where
  prt i e = case e of
    Parser.Tidy.Abs.ValuesAbsent -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.ValuesPresent objectdecls -> prPrec i 0 (concatD [doc (showString "values:"), doc (showString "{"), prt 0 objectdecls, doc (showString "}")])

instance Print Parser.Tidy.Abs.VariablesSection where
  prt i e = case e of
    Parser.Tidy.Abs.VariablesAbsent -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.VariablesPresent objectdecls -> prPrec i 0 (concatD [doc (showString "variables:"), doc (showString "{"), prt 0 objectdecls, doc (showString "}")])

instance Print Parser.Tidy.Abs.FunctionsSection where
  prt i e = case e of
    Parser.Tidy.Abs.FunctionsAbsent -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.FunctionsPresent functiondecls -> prPrec i 0 (concatD [doc (showString "functions:"), doc (showString "{"), prt 0 functiondecls, doc (showString "}")])

instance Print Parser.Tidy.Abs.ActionsSection where
  prt i e = case e of
    Parser.Tidy.Abs.ActionsAbsent -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.ActionsPresent actiondecls -> prPrec i 0 (concatD [doc (showString "actions:"), doc (showString "{"), prt 0 actiondecls, doc (showString "}")])

instance Print Parser.Tidy.Abs.ObjectIdent where
  prt i e = case e of
    Parser.Tidy.Abs.ObjectIdentifier lowercaseident -> prPrec i 0 (concatD [prt 0 lowercaseident])

instance Print Parser.Tidy.Abs.ObjectType where
  prt i e = case e of
    Parser.Tidy.Abs.ObjectTypeClass classident genericparameter -> prPrec i 0 (concatD [prt 0 classident, prt 0 genericparameter])
    Parser.Tidy.Abs.ObjectTypeFunction methodtype -> prPrec i 0 (concatD [doc (showString "get"), prt 0 methodtype])
    Parser.Tidy.Abs.ObjectTypeAction methodtype -> prPrec i 0 (concatD [doc (showString "do"), prt 0 methodtype])

instance Print Parser.Tidy.Abs.GenericParameter where
  prt i e = case e of
    Parser.Tidy.Abs.GenericPrameterAbsent -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.GenericParameterPresent classidents -> prPrec i 0 (concatD [doc (showString "["), prt 0 classidents, doc (showString "]")])

instance Print [Parser.Tidy.Abs.ObjectDecl] where
  prt = prtList

instance Print Parser.Tidy.Abs.ObjectDecl where
  prt i e = case e of
    Parser.Tidy.Abs.ObjectDeclaration visibilitymodifier objectdeclproper -> prPrec i 0 (concatD [prt 0 visibilitymodifier, prt 0 objectdeclproper, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Parser.Tidy.Abs.VisibilityModifier where
  prt i e = case e of
    Parser.Tidy.Abs.MPublic -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.MPrivate -> prPrec i 0 (concatD [doc (showString "private")])

instance Print [Parser.Tidy.Abs.ObjectDeclProper] where
  prt = prtList

instance Print Parser.Tidy.Abs.ObjectDeclProper where
  prt i e = case e of
    Parser.Tidy.Abs.ObjectDeclarationProper objectident objecttype initialization -> prPrec i 0 (concatD [prt 0 objectident, doc (showString ":"), prt 0 objecttype, prt 0 initialization])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Parser.Tidy.Abs.Initialization where
  prt i e = case e of
    Parser.Tidy.Abs.Uninitialized -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.Initialized expr -> prPrec i 0 (concatD [doc (showString "="), prt 0 expr])

instance Print Parser.Tidy.Abs.MethodIdent where
  prt i e = case e of
    Parser.Tidy.Abs.MethodIdentifier lowercaseident -> prPrec i 0 (concatD [prt 0 lowercaseident])

instance Print Parser.Tidy.Abs.MethodType where
  prt i e = case e of
    Parser.Tidy.Abs.MethodTypeSignature paramlist objecttype -> prPrec i 0 (concatD [prt 0 paramlist, doc (showString "->"), prt 0 objecttype])

instance Print Parser.Tidy.Abs.ParamList where
  prt i e = case e of
    Parser.Tidy.Abs.ParameterList objectdeclpropers -> prPrec i 0 (concatD [doc (showString "("), prt 0 objectdeclpropers, doc (showString ")")])

instance Print [Parser.Tidy.Abs.FunctionDecl] where
  prt = prtList

instance Print Parser.Tidy.Abs.FunctionDecl where
  prt i e = case e of
    Parser.Tidy.Abs.FunctionDeclaration overridemodifier visibilitymodifier methodident methodtype functionbody -> prPrec i 0 (concatD [prt 0 overridemodifier, prt 0 visibilitymodifier, prt 0 methodident, doc (showString ":"), prt 0 methodtype, doc (showString "="), prt 0 functionbody])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Parser.Tidy.Abs.OverrideModifier where
  prt i e = case e of
    Parser.Tidy.Abs.MNonOverriding -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.MOverride -> prPrec i 0 (concatD [doc (showString "override")])

instance Print Parser.Tidy.Abs.FunctionBody where
  prt i e = case e of
    Parser.Tidy.Abs.FunctionBodyOneLine expr -> prPrec i 0 (concatD [prt 0 expr])
    Parser.Tidy.Abs.FunctionBodyMultiLine expr withvalues -> prPrec i 0 (concatD [doc (showString "{"), prt 0 expr, doc (showString "}"), prt 0 withvalues])

instance Print Parser.Tidy.Abs.WithValues where
  prt i e = case e of
    Parser.Tidy.Abs.WithValuesAbsent -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.WithValuesPresent valuessection -> prPrec i 0 (concatD [doc (showString "with"), prt 0 valuessection])

instance Print [Parser.Tidy.Abs.ActionDecl] where
  prt = prtList

instance Print Parser.Tidy.Abs.ActionDecl where
  prt i e = case e of
    Parser.Tidy.Abs.ActionDeclaration overridemodifier visibilitymodifier methodident methodtype actionbody -> prPrec i 0 (concatD [prt 0 overridemodifier, prt 0 visibilitymodifier, prt 0 methodident, doc (showString ":"), prt 0 methodtype, doc (showString "="), prt 0 actionbody])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Parser.Tidy.Abs.ActionBody where
  prt i e = case e of
    Parser.Tidy.Abs.ActionBodyOneLine expr -> prPrec i 0 (concatD [prt 0 expr])
    Parser.Tidy.Abs.ActionBodyMultiLine exprs -> prPrec i 0 (concatD [doc (showString "{"), prt 0 exprs, doc (showString "}")])

instance Print [Parser.Tidy.Abs.Expr] where
  prt = prtList

instance Print Parser.Tidy.Abs.Expr where
  prt i e = case e of
    Parser.Tidy.Abs.ELiteral literal -> prPrec i 10 (concatD [prt 0 literal])
    Parser.Tidy.Abs.ELocalValue objectident -> prPrec i 10 (concatD [prt 0 objectident])
    Parser.Tidy.Abs.EGetExpression getexpr -> prPrec i 9 (concatD [prt 0 getexpr])
    Parser.Tidy.Abs.EDoExpression doexpr -> prPrec i 9 (concatD [prt 0 doexpr])
    Parser.Tidy.Abs.EConstructorCall ctorcall -> prPrec i 8 (concatD [prt 0 ctorcall])
    Parser.Tidy.Abs.ELambdaFunction lambdafunction -> prPrec i 7 (concatD [prt 0 lambdafunction])
    Parser.Tidy.Abs.ELambdaAction lambdaaction -> prPrec i 7 (concatD [prt 0 lambdaaction])
    Parser.Tidy.Abs.EImperativeControlFlow imperativecontrolflow -> prPrec i 6 (concatD [prt 0 imperativecontrolflow])
    Parser.Tidy.Abs.EFunctionalControlFlow functionalcontrolflow -> prPrec i 6 (concatD [prt 0 functionalcontrolflow])
    Parser.Tidy.Abs.ELocalValueDeclaration localvaluedecl -> prPrec i 5 (concatD [prt 0 localvaluedecl])
    Parser.Tidy.Abs.EUnaryNot expr -> prPrec i 4 (concatD [doc (showString "not"), prt 5 expr])
    Parser.Tidy.Abs.EUnaryMinus expr -> prPrec i 4 (concatD [doc (showString "-"), prt 5 expr])
    Parser.Tidy.Abs.EMultiply expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "*"), prt 4 expr2])
    Parser.Tidy.Abs.EDivide expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "/"), prt 4 expr2])
    Parser.Tidy.Abs.EModulo expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "%"), prt 4 expr2])
    Parser.Tidy.Abs.EAdd expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "+"), prt 3 expr2])
    Parser.Tidy.Abs.ESubtract expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "-"), prt 3 expr2])
    Parser.Tidy.Abs.EConcatenate expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "++"), prt 3 expr2])
    Parser.Tidy.Abs.ERelationalOperator expr1 relationaloperator expr2 -> prPrec i 1 (concatD [prt 1 expr1, prt 0 relationaloperator, prt 2 expr2])
    Parser.Tidy.Abs.EBooleanOperator expr1 booleanoperator expr2 -> prPrec i 0 (concatD [prt 1 expr1, prt 0 booleanoperator, prt 0 expr2])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Parser.Tidy.Abs.Literal where
  prt i e = case e of
    Parser.Tidy.Abs.LInt n -> prPrec i 0 (concatD [prt 0 n])
    Parser.Tidy.Abs.LBool boolean -> prPrec i 0 (concatD [prt 0 boolean])
    Parser.Tidy.Abs.LChar c -> prPrec i 0 (concatD [prt 0 c])
    Parser.Tidy.Abs.LString str -> prPrec i 0 (concatD [prt 0 str])
    Parser.Tidy.Abs.LVoid void -> prPrec i 0 (concatD [prt 0 void])

instance Print Parser.Tidy.Abs.Boolean where
  prt i e = case e of
    Parser.Tidy.Abs.BTrue -> prPrec i 0 (concatD [doc (showString "True")])
    Parser.Tidy.Abs.BFalse -> prPrec i 0 (concatD [doc (showString "False")])

instance Print Parser.Tidy.Abs.Void where
  prt i e = case e of
    Parser.Tidy.Abs.VPass -> prPrec i 0 (concatD [doc (showString "Pass")])

instance Print Parser.Tidy.Abs.LocalValueDecl where
  prt i e = case e of
    Parser.Tidy.Abs.LocalValueDeclaration objectdecl -> prPrec i 0 (concatD [doc (showString "value"), prt 0 objectdecl])

instance Print Parser.Tidy.Abs.LambdaFunction where
  prt i e = case e of
    Parser.Tidy.Abs.LambdaFunctionOneLine paramlist expr -> prPrec i 0 (concatD [doc (showString "get"), prt 0 paramlist, doc (showString "->"), prt 0 expr, doc (showString ";")])
    Parser.Tidy.Abs.LambdaFunctionMultiLine paramlist expr -> prPrec i 0 (concatD [doc (showString "get"), prt 0 paramlist, doc (showString "->"), doc (showString "{"), prt 0 expr, doc (showString "}")])

instance Print Parser.Tidy.Abs.LambdaAction where
  prt i e = case e of
    Parser.Tidy.Abs.LambdaActionOneLine paramlist expr -> prPrec i 0 (concatD [doc (showString "do"), prt 0 paramlist, doc (showString "->"), prt 0 expr, doc (showString ";")])
    Parser.Tidy.Abs.LambdaActionMultiLine paramlist exprs -> prPrec i 0 (concatD [doc (showString "do"), prt 0 paramlist, doc (showString "->"), doc (showString "{"), prt 0 exprs, doc (showString "}")])

instance Print Parser.Tidy.Abs.ArgList where
  prt i e = case e of
    Parser.Tidy.Abs.ArgumentListAbsent -> prPrec i 0 (concatD [])
    Parser.Tidy.Abs.ArgumentListPresent functionargs -> prPrec i 0 (concatD [doc (showString "("), prt 0 functionargs, doc (showString ")")])

instance Print [Parser.Tidy.Abs.FunctionArg] where
  prt = prtList

instance Print Parser.Tidy.Abs.FunctionArg where
  prt i e = case e of
    Parser.Tidy.Abs.FunctionArgument expr -> prPrec i 0 (concatD [prt 0 expr])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Parser.Tidy.Abs.FunctionCall where
  prt i e = case e of
    Parser.Tidy.Abs.CallFunction methodident arglist -> prPrec i 0 (concatD [doc (showString "."), prt 0 methodident, prt 0 arglist])

instance Print Parser.Tidy.Abs.ActionCall where
  prt i e = case e of
    Parser.Tidy.Abs.CallAction methodident arglist -> prPrec i 0 (concatD [doc (showString "#"), prt 0 methodident, prt 0 arglist])

instance Print Parser.Tidy.Abs.CtorCall where
  prt i e = case e of
    Parser.Tidy.Abs.CallConstructor classident arglist -> prPrec i 0 (concatD [prt 0 classident, prt 0 arglist])

instance Print Parser.Tidy.Abs.GetExpr where
  prt i e = case e of
    Parser.Tidy.Abs.GetExpressionInstance objectident functioncall -> prPrec i 0 (concatD [prt 0 objectident, prt 0 functioncall])
    Parser.Tidy.Abs.GetExpressionStatic classident functioncall -> prPrec i 0 (concatD [prt 0 classident, prt 0 functioncall])
    Parser.Tidy.Abs.GetExpressionChain getexpr functioncall -> prPrec i 0 (concatD [prt 0 getexpr, prt 0 functioncall])

instance Print Parser.Tidy.Abs.DoExpr where
  prt i e = case e of
    Parser.Tidy.Abs.DoExpressionInstance objectident actioncall -> prPrec i 0 (concatD [prt 0 objectident, prt 0 actioncall])
    Parser.Tidy.Abs.DoExpressionStatic classident actioncall -> prPrec i 0 (concatD [prt 0 classident, prt 0 actioncall])
    Parser.Tidy.Abs.DoExpressionChain getexpr actioncall -> prPrec i 0 (concatD [prt 0 getexpr, prt 0 actioncall])

instance Print Parser.Tidy.Abs.ImperativeControlFlow where
  prt i e = case e of
    Parser.Tidy.Abs.IWhile expr exprs -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString "{"), prt 0 exprs, doc (showString "}")])
    Parser.Tidy.Abs.IForeach objectdecl expr exprs -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 objectdecl, doc (showString "in"), prt 0 expr, doc (showString ")"), doc (showString "{"), prt 0 exprs, doc (showString "}")])
    Parser.Tidy.Abs.IIf expr exprs optionalelsebranch -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString "{"), prt 0 exprs, doc (showString "}"), prt 0 optionalelsebranch])

instance Print Parser.Tidy.Abs.OptionalElseBranch where
  prt i e = case e of
    Parser.Tidy.Abs.IElsePresent exprs -> prPrec i 0 (concatD [doc (showString "else"), doc (showString "{"), prt 0 exprs, doc (showString "}")])
    Parser.Tidy.Abs.IElseIf expr exprs optionalelsebranch -> prPrec i 0 (concatD [doc (showString "elif"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString "{"), prt 0 exprs, doc (showString "}"), prt 0 optionalelsebranch])
    Parser.Tidy.Abs.IElseAbsent -> prPrec i 0 (concatD [])

instance Print Parser.Tidy.Abs.FunctionalControlFlow where
  prt i e = case e of
    Parser.Tidy.Abs.FIfThenElse expr thenbranch elsebranch -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 thenbranch, prt 0 elsebranch])
    Parser.Tidy.Abs.FMatchCase expr matchcases -> prPrec i 0 (concatD [doc (showString "match"), prt 0 expr, doc (showString "{"), prt 0 matchcases, doc (showString "}")])

instance Print Parser.Tidy.Abs.ThenBranch where
  prt i e = case e of
    Parser.Tidy.Abs.FThenOneLine expr -> prPrec i 0 (concatD [doc (showString "then"), prt 0 expr, doc (showString ";")])
    Parser.Tidy.Abs.FThenMultiLine expr -> prPrec i 0 (concatD [doc (showString "then"), doc (showString "{"), prt 0 expr, doc (showString "}")])

instance Print Parser.Tidy.Abs.ElseBranch where
  prt i e = case e of
    Parser.Tidy.Abs.FElseOneLine expr -> prPrec i 0 (concatD [doc (showString "else"), prt 0 expr, doc (showString ";")])
    Parser.Tidy.Abs.FElseMultiLine expr -> prPrec i 0 (concatD [doc (showString "else"), doc (showString "{"), prt 0 expr, doc (showString "}")])
    Parser.Tidy.Abs.FElseIf expr thenbranch elsebranch -> prPrec i 0 (concatD [doc (showString "elif"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 thenbranch, prt 0 elsebranch])

instance Print [Parser.Tidy.Abs.MatchCase] where
  prt = prtList

instance Print Parser.Tidy.Abs.MatchCase where
  prt i e = case e of
    Parser.Tidy.Abs.FCase pattern_ expr -> prPrec i 0 (concatD [doc (showString "case"), prt 0 pattern_, doc (showString "->"), prt 0 expr])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Parser.Tidy.Abs.Pattern where
  prt i e = case e of
    Parser.Tidy.Abs.FTypePattern classident -> prPrec i 0 (concatD [prt 0 classident])

instance Print Parser.Tidy.Abs.RelationalOperator where
  prt i e = case e of
    Parser.Tidy.Abs.RLess -> prPrec i 0 (concatD [doc (showString "<")])
    Parser.Tidy.Abs.RLessEqual -> prPrec i 0 (concatD [doc (showString "<=")])
    Parser.Tidy.Abs.RGreater -> prPrec i 0 (concatD [doc (showString ">")])
    Parser.Tidy.Abs.RGreaterEqual -> prPrec i 0 (concatD [doc (showString ">=")])
    Parser.Tidy.Abs.REqual -> prPrec i 0 (concatD [doc (showString "==")])
    Parser.Tidy.Abs.RNotEqual -> prPrec i 0 (concatD [doc (showString "!=")])

instance Print Parser.Tidy.Abs.BooleanOperator where
  prt i e = case e of
    Parser.Tidy.Abs.BAnd -> prPrec i 0 (concatD [doc (showString "and")])
    Parser.Tidy.Abs.BOr -> prPrec i 0 (concatD [doc (showString "or")])

