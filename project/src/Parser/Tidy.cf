-- GLOBAL -------------------------------------

token UpperCaseIdent (upper (letter | digit | '_')*) ;
token LowerCaseIdent (lower (letter | digit | '_')*) ;


-- PROGRAMS -----------------------------------

entrypoints Program ;
ProgramEntrypoint. Program ::= [ClassDecl] ;


-- COMMENTS -----------------------------------

comment "//" ;
comment "/*" "*/" ;


-- CLASS DECLARATIONS -------------------------

separator ClassIdent "," ;
ClassIdentifier. ClassIdent ::= UpperCaseIdent ;

separator nonempty ClassDecl "" ;
ClassDeclaration. ClassDecl ::= AbstractModifier ClassTypeModifier "class" ClassIdent Inheritance ClassBody ;

SuperclassPresent. Inheritance ::= ;
SuperclassAbsent. Inheritance ::= "extends" ClassIdent ;

ClassBodyEmpty. ClassBody ::= ;
ClassBodyFilled. ClassBody ::= "{" ValuesSection VariablesSection FunctionsSection ActionsSection "}" ;


-- CLASS MODIFIERS ----------------------------

MMutable. ClassTypeModifier ::= "mutable" ;
MImmutable. ClassTypeModifier ::= "immutable" ;
MSingleton. ClassTypeModifier ::= "singleton" ;

MConcrete. AbstractModifier ::= ;
MAbstract. AbstractModifier ::= "abstract" ;


-- CLASS SECTIONS -----------------

ValuesAbsent. ValuesSection ::= ;
ValuesPresent. ValuesSection ::= "values:" "{" [ObjectDecl] "}" ;

VariablesAbsent. VariablesSection ::= ;
VariablesPresent. VariablesSection ::= "variables:" "{" [ObjectDecl] "}" ;

FunctionsAbsent. FunctionsSection ::= ;
FunctionsPresent. FunctionsSection ::= "functions:" "{" [FunctionDecl] "}" ;

ActionsAbsent. ActionsSection ::= ;
ActionsPresent. ActionsSection ::= "actions:" "{" [ActionDecl] "}" ;


-- OBJECTS -----------------------------

ObjectIdentifier. ObjectIdent ::= LowerCaseIdent ;

ObjectTypeClass. ObjectType ::=  ClassIdent GenericParameter ;
ObjectTypeFunction. ObjectType ::= "get" MethodType ;
ObjectTypeAction. ObjectType ::= "do" MethodType ;

GenericPrameterAbsent. GenericParameter ::= ;
GenericParameterPresent. GenericParameter ::= "[" [ClassIdent] "]" ; 

separator ObjectDecl "" ;
ObjectDeclaration. ObjectDecl ::= VisibilityModifier ObjectDeclProper ";" ;

MPublic. VisibilityModifier ::= ;
MPrivate. VisibilityModifier ::= "private" ;

separator ObjectDeclProper "," ;
ObjectDeclarationProper. ObjectDeclProper ::= ObjectIdent ":" ObjectType Initialization ;

Uninitialized. Initialization ::= ;
Initialized. Initialization ::= "=" Expr ;


-- FUNCTIONS --------------------------

MethodIdentifier. MethodIdent ::= LowerCaseIdent ;
MethodTypeSignature. MethodType ::= ParameterList "->" ObjectType;

ParamList. ParameterList ::= "(" [ObjectDeclProper] ")" ;

separator FunctionDecl "" ;
FunctionDeclaration. FunctionDecl ::= OverrideModifier VisibilityModifier MethodIdent ":" MethodType "=" FunctionBody ;

MNonOverriding. OverrideModifier ::= ;
MOverride. OverrideModifier ::= "override" ;

FunctionBodyOneLine. FunctionBody ::= Expr ;
FunctionBodyMultiLine. FunctionBody ::= "{" Expr "}" WithValues ;

WithValuesAbsent. WithValues ::= ;
WithValuesPresent. WithValues ::= "with" ValuesSection ;


-- ACTIONS ----------------------------

separator ActionDecl "" ; 
ActionDeclaration. ActionDecl ::= OverrideModifier VisibilityModifier MethodIdent ":" MethodType "=" ActionBody ;

ActionBodyOneLine. ActionBody ::= Expr ;
ActionBodyMultiLine. ActionBody ::= "{" [Expr] "}" ;


-- EXPRESSIONS -------------------------------

separator Expr "" ;
coercions Expr 10 ;

ELiteral. Expr10 ::= Literal ;
ELocalValue. Expr10 ::= ObjectIdent ;

EGetExpr. Expr9 ::= GetExpr ;
EDoExpr. Expr9 ::= DoExpr ;

ELambdaFunction. Expr8 ::= LambdaFunction ;
ELambdaAction. Expr8 ::= LambdaAction ;

ELocalFunctionCall. Expr7 ::= "local" FunctionCall ;
ELocalActionCall. Expr7 ::= "local" ActionCall ;
ECtorCall. Expr7 ::= ConstructorCall ;

EImperativeControlFlow. Expr6 ::= ImperativeControlFlow ;
EFunctionalControlFlow. Expr6 ::= FunctionalControlFlow ;

ELocalObjectDecl. Expr5 ::= LocalObjectDecl ;

EUnaryNot. Expr4 ::= "not" Expr5 ;
EUnaryMinus. Expr4 ::= "-" Expr5 ;

EMultiply. Expr3 ::= Expr3 "*" Expr4 ;
EDivide. Expr3 ::= Expr3 "/" Expr4 ;

EAdd. Expr2 ::= Expr2 "+" Expr3 ;
ESubtract. Expr2 ::= Expr2 "-" Expr3 ;
EConcatenate. Expr2 ::= Expr2 "++" Expr3 ;

ERelationalOperator. Expr1 ::= Expr1 RelationalOperator Expr2 ;

EBooleanOperator. Expr ::= Expr1 BooleanOperator Expr ;


-- LITERALS ----------------------------------

LInt. Literal ::= Integer ;
LBool. Literal ::= Boolean ;
LChar. Literal ::= Char ;
LString. Literal ::= String ;
LVoid. Literal ::= Void ;

BTrue. Boolean ::= "True" ;
BFalse. Boolean ::= "False" ;
VPass. Void ::= "Pass" ;


-- LOCAL VALUE DECLARATIONS ------------------

LocalVDecl. LocalObjectDecl ::= "value" ObjectDecl ;


-- LAMBDAS -----------------------------------

LambdaFunctionOneLine. LambdaFunction ::= "get" ParameterList "->" Expr ";" ;
LambdaFunctionMultiLine. LambdaFunction ::= "get" ParameterList "->" "{" Expr "}" ;

LambdaActionOneLine. LambdaAction ::= "do" ParameterList "->" Expr ";" ;
LambdaActionMultiLine. LambdaAction ::= "do" ParameterList "->" "{" [Expr] "}" ;


-- FUNCTION AND CONSTRUCTOR CALLS --------------

ArgListAbsent. ArgumentList ::= ;
ArgListPresent. ArgumentList ::= "(" [FunctionArgument] ")" ;

separator FunctionArgument "," ;
FunctionArg. FunctionArgument ::= Expr ;

FCall. FunctionCall ::= "." MethodIdent ArgumentList ;
ACall. ActionCall ::= "#" MethodIdent ArgumentList ;
CCall. ConstructorCall ::= ClassIdent ArgumentList ;


-- GET EXPRESSIONS ----------------------------

GetExprInstance. GetExpr ::= ObjectIdent FunctionCall ;
GetExprStatic. GetExpr ::= ClassIdent FunctionCall ;
GetExprChain. GetExpr ::= GetExpr FunctionCall ;


-- DO EXPRESSIONS ----------------------------

DoExprInstance. DoExpr ::= ObjectIdent ActionCall ;
DoExprStatic. DoExpr ::= ClassIdent ActionCall ;
DoExprChain. DoExpr ::= GetExpr ActionCall ;


-- IMPERATIVE CONTROL FLOW -------------------

IWhile. ImperativeControlFlow ::= "while" "(" Expr ")" "{" [Expr] "}" ;
IForeach. ImperativeControlFlow ::= "for" "(" ObjectDecl "in" Expr ")" "{" [Expr] "}" ;
IIf. ImperativeControlFlow ::= "if" "(" Expr ")" "{" [Expr] "}" OptionalElseBranch ;

ElsePresent. OptionalElseBranch ::= "else" "{" [Expr] "}" ;
ElseAbsent. OptionalElseBranch ::= ;


-- FUNCTIONAL CONTROL FLOW -------------------

FIfThenElse. FunctionalControlFlow ::= "if" "(" Expr ")" ThenBranch ElseBranch ;

ThenOneLine. ThenBranch ::= "then" Expr ";" ;
ThenMultiLine. ThenBranch ::= "then" "{" Expr "}" ;
ElseOneLine. ElseBranch ::= "else" Expr ";" ;
ElseMultiLine. ElseBranch ::= "else" "{" Expr "}" ;
ElseIf. ElseBranch ::= "elif" "(" Expr ")" ThenBranch ElseBranch ;

FMatch. FunctionalControlFlow ::= "match" Expr "{" [MatchCase] "}" ;

separator MatchCase "" ;
Case. MatchCase ::= "case" Pattern "->" Expr ;

TypePattern. Pattern ::= ClassIdent ; 


-- RELATIONAL OPERATORS ----------------------

RLess. RelationalOperator ::= "<" ;
RLessEqual. RelationalOperator ::= "<=" ;
RGreater. RelationalOperator ::= ">" ;
RGreaterEqual. RelationalOperator ::= ">=" ;
REqual. RelationalOperator ::= "==" ;
RNotEqual. RelationalOperator ::= "!=" ;


-- BOOLEAN OPERATORS -------------------------

BAnd. BooleanOperator ::= "and" ;
BOr. BooleanOperator ::= "or" ;
