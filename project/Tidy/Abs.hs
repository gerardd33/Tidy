-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Tidy.Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype UpperCaseIdent = UpperCaseIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype LowerCaseIdent = LowerCaseIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Program = ProgramEntrypoint [ClassDecl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassIdent = CIdent UpperCaseIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassDecl
    = ClassDeclConcrete ClassType ClassIdent Inheritance ClassBody
    | ClassDeclAbstract ClassType ClassIdent Inheritance ClassBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Inheritance = SuperclassAbsent | SuperclassPresent ClassIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassBody
    = ClassBodyEmpty
    | ClassBodyFilled ValuesSection VariablesSection FunctionsSection ActionsSection
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ClassType = MMutable | MImmutable | MSingleton
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValuesSection = ValuesAbsent | ValuesPresent ValSBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VariablesSection = VariablesAbsent | VariablesPresent VarSBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionsSection = FunctionsAbsent | FunctionsPresent FSBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ActionsSection = ActionsAbsent | ActionsPresent ASBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValSBody = ValuesSBody [ValueDecl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValueIdent = VIdent LowerCaseIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValueType
    = ValueTypeClass ClassIdent
    | ValueTypeGeneric ClassIdent [ClassIdent]
    | ValueTypeFunction MethodType
    | ValueTypeAction MethodType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValueDecl
    = PublicValueDecl ValueDeclProper
    | PrivateValueDecl ValueDeclProper
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ValueDeclProper
    = UninitialisedValue ValueIdent ValueType
    | InitialisedValue ValueIdent ValueType Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VarSBody = VariablesSBody [ValueDecl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FSBody = FSBodyEmpty | FSBodyFilled [FunctionDecl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionIdent = FIdent LowerCaseIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MethodType = FType ParameterList ValueType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ParameterList = ParamList [ValueDeclProper]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionDecl
    = OverrideFunctionDecl FunctionIdent MethodType FunctionBody
    | PublicFunctionDecl FunctionIdent MethodType FunctionBody
    | PrivateFunctionDecl FunctionIdent MethodType FunctionBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionBody
    = FunctionBodyOneLine Expr | FunctionBodyMultiLine Expr WithValues
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WithValues
    = WithValuesAbsent | WithValuesPresent ValuesSection
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ASBody = ASBodyEmpty | ASBodyFilled [ActionDecl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ActionDecl
    = OverrideActionDecl FunctionIdent MethodType ActionBody
    | PublicActionDecl FunctionIdent MethodType ActionBody
    | PrivateActionDecl FunctionIdent MethodType ActionBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ActionBody
    = ActionBodyOneLine Expr | ActionBodyMultiLine [Expr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = ELiteral Literal
    | ELocalValue ValueIdent
    | EGetExpr GetExpr
    | EDoExpr DoExpr
    | ELambdaFunction LambdaFunction
    | ELambdaAction LambdaAction
    | ELocalFunctionCall FunctionCall
    | ELocalActionCall ActionCall
    | ECtorCall ConstructorCall
    | EImperativeControlFlow ImperativeControlFlow
    | EFunctionalControlFlow FunctionalControlFlow
    | ELocalValueDecl LocalValueDecl
    | EUnaryNot Expr
    | EUnaryMinus Expr
    | EMultiply Expr Expr
    | EDivide Expr Expr
    | EAdd Expr Expr
    | ESubtract Expr Expr
    | EConcatenate Expr Expr
    | ERelationalOperator Expr RelationalOperator Expr
    | EBooleanOperator Expr BooleanOperator Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Literal
    = LInt Integer
    | LBool Boolean
    | LChar Char
    | LString String
    | LVoid Void
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Boolean = BTrue | BFalse
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Void = VPass
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LocalValueDecl = LocalVDecl ValueDecl
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LambdaFunction
    = LambdaFunctionOneLine ParameterList Expr
    | LambdaFunctionMultiLine ParameterList Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LambdaAction
    = LambdaActionOneLine ParameterList Expr
    | LambdaActionMultiLine ParameterList [Expr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ArgumentList
    = ArgListAbsent | ArgListPresent [FunctionArgument]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionArgument = FunctionArg Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionCall = FCall FunctionIdent ArgumentList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ActionCall = ACall FunctionIdent ArgumentList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstructorCall = CCall ClassIdent ArgumentList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data GetExpr
    = GetExprInstance ValueIdent FunctionCall
    | GetExprStatic ClassIdent FunctionCall
    | GetExprChain GetExpr FunctionCall
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DoExpr
    = DoExprInstance ValueIdent ActionCall
    | DoExprStatic ClassIdent ActionCall
    | DoExprChain GetExpr ActionCall
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ImperativeControlFlow
    = IWhile Expr [Expr]
    | IForeach ValueDecl Expr [Expr]
    | IIf Expr [Expr] OptionalElseBranch
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptionalElseBranch = ElsePresent [Expr] | ElseAbsent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionalControlFlow
    = FIfThenElse Expr ThenBranch ElseBranch | FMatch Expr [MatchCase]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ThenBranch = ThenOneLine Expr | ThenMultiLine Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ElseBranch
    = ElseOneLine Expr
    | ElseMultiLine Expr
    | ElseIf Expr ThenBranch ElseBranch
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchCase = Case Pattern Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pattern = TypePattern ClassIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelationalOperator
    = RLess
    | RLessEqual
    | RGreater
    | RGreaterEqual
    | REqual
    | RNotEqual
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BooleanOperator = BAnd | BOr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

