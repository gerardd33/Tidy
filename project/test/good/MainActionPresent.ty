mutable class PhoneMessageReceiver extends MessageReceiver {
    
    values: {
        messageReceived: String = "You got a new message!";
        messageInvalid: String = "Invalid message";
        maxMessageLength: Int = 100;
        emptyString: String = "";
        
        notificationChannels: List[NotificationChannel];
    }
    
    variables: {
        messages: List[Message] = List();
    }
    
    functions: {
        private parseMessage: (message: Message) -> String = {
            if (this.validateMessage(message)) then {
                match message {
                    case Email -> "One new email"
                    case Sms -> "One new SMS"
                    case Notification -> "One new notification"
                }
            } elif (message.privileged) then {
                this.emptyString
            } else {
                this.messageInvalid
            }
        }
        
        private validateMessage: (message: Message) -> Bool = {
            not message.empty and message.length <= this.maxMessageLength
        }
    }
    
    actions: {
        override receive: (message: Message) -> Bool = {    
            System#printLine(this.messageReceived)
            
            value response: String = this.parseMessage(message);
            System#printLine(response)
            
            if (response != this.messageInvalid) {
                super#receive(message)
                this#messages(this.messages.add(message))
                
                for (channel: NotificationChannel; in this.notificationChannels) {
                    channel#notify(response)
                }
                
                True
            } else {
                False
            }
        }
        
        // a bit more artificial example to show how some more advanced features work
        override transformMessages: (messageTransformer: do (complete: Bool) -> Void) -> Void = {
            value handleMessage: do (message: Message) -> Void = do (message: Message) -> {
                System#printLine("Transforming message " ++ message)
                message#transform(local#messageTransformer(False))
            };
            
            for (message: Message; in this.messages) {
                local#handleMessage(message)
            }
        }
    }
}

singleton class MessageReceiverExecutor extends Executor {
    
    values: {
        numberOfMessages: Integer = 1;
    }
    
    functions: {
        main: () -> Void = {
            Pass
            // not a proper main
        }
    }
    
    actions: {
        otherAction1: () -> Void = System#printLine("?")
        
        main: () -> Void = {
            System#printLine("The main action is here!")
            System#printLine("It does a lot of interesting things")
            value receiver: PhoneMessageReceiver = PhoneMessageReceiver(List());
            receiver#receive(Message("some message"))
        }
        
        otherAction2: () -> Void = System#printLine("??")
    }
}
