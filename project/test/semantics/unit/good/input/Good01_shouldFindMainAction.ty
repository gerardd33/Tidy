mutable class SomeMutableClass {

    values: {
        total: Int;
        count: Int;
        name: String = "Some name";
    }
    
    variables: {
        var1: Int = 1;
        var2: String = "S";
    }
    
    functions: {
        goodFunction: () -> Int = 50
    }
    
    actions: {
        main: () -> Void = { // Bad main, not a singleton class
            Pass
        }
        
        goodAction: (x: Int, y: String) -> Int = {
            val z: Int = 4;
            z
        }
        
        someAction: (arg1: Bool, arg2: Int, arg3: Int) -> Int = {
            val x: Int = arg2;
            arg2 + x
        }
    }
}

singleton class SomeSingletonClass {
    
    actions: {
        goodAction: (x: Int, y: String) -> Int = {
            val z: Int = 4;
            z
        }
        
        someAction: (arg1: Bool, arg2: Int, arg3: Int) -> Int = {
            val x: Int = arg2;
            arg2 + x
        }
        
        badMain: () -> Void = {
            Pass
        }
    }
}

immutable class SomeImmutableClass {
    
    values: {
        total: Int;
        count: Int;
        name: String = "Some name";
    }
    
    functions: {
        goodFunction: () -> Int = 50
        main: () -> Void = Pass // Bad main, not an action, not a singleton class
    }
}


singleton class AnotherSingletonClass {
    
    actions: {
        goodAction: (x: Int, y: String) -> Int = {
            3
        }
        
        someAction: (arg1: Bool, arg2: Int, arg3: Int) -> Int = {
            2 + 2
        }
        
        main: () -> Void = {
            System#printLine("Proper main action!")
        }
        
        anotherAction: () -> Void = {
            3 + 4
            Pass
        }
    }
}

