immutable class Container[A] {
    
    values: {
        element: A;
    }
}

immutable class DoubleContainer[A, B] {
    
    values: {
        element1: A;
        element2: B;
    }
    
    functions: {
        compareFirst: (x: A) -> Bool = this.element1 == x
        compareSecond: (x: B) -> Bool = this.element2 == x
    }
}


mutable class TripleContainer[A, B, C] {
    
    values: {
        mainElements: DoubleContainer[A, B];
        additionalElement: C;
    }
    
    variables: {
        oneMoreElement: C;
    }
    
    functions: {
        compareFirstInMain: (another: DoubleContainer[A, B]) -> Bool = this.mainElements.element1 == another.element1
    }
    
    actions: {
        printAll: () -> Void = {
            System#printLine(mainElements)
            System#printLine(additionalElement)
            System#printLine(oneMoreElement)
        }
    }
}

singleton class GenericTypes {
    
    actions: {
        main: () -> Void = {
            var x: Int = 3;
            val y: Int = 3;
            
            val container: Container[Int] = Container[Int](x);
            val check: Bool = y == container.element;
            val check2: Bool = 3 > 2;
            
            val double: DoubleContainer[Int, Bool] = DoubleContainer[](y, check);
            System#assert(double.compareFirst(x))
            System#assert(double.compareSecond(check2))
            
            val triple: TripleContainer[Int, Void, Int] = TripleContainer[Int, Void, Int](DoubleContainer[Int, Void](x, Pass), 15, y);
            triple#printAll
            triple#oneMoreElement(92929)
            triple#printAll
        }
    }
}
